<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
	<channel>
		<title>AngryAnt.com/feed - Articles</title>
		<description>Random scribblings at random intervals</description>
		<link>http://angryant.com</link>
		
			
			<item>
				<title>Moving in Unity</title>
				<description>&lt;p&gt;&lt;strong&gt;Updated March 8th&lt;/strong&gt;: Added a few more details on mapping to navmesh and extrapolating the root motion vector.&lt;/p&gt;
&lt;p&gt;Moving something around on the screen in Unity is really not that hard. The point of this post is therefore not to introduce you to how this is accomplished, but rather to point out where you&amp;#8217;re doing it wrong&amp;#8482;.&lt;/p&gt;
&lt;p&gt;Generally Unity moves objects using one of three systems:&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;Direct transform manipulation.&lt;/li&gt;
	&lt;li&gt;Physics.&lt;/li&gt;
	&lt;li&gt;Navigation.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;In the end, movement is measured on transform updates. I make the distinction from the point of view of where you provide the input. Technically you could argue that animation should be up there as well, but I choose to lump that in with transform manipulation, since disabling the application of movement by the animation system has no other side effects.&lt;/p&gt;
&lt;p&gt;As a side-note, since 4.3 it is possible to partially or completely disable having the animation system update the transform hierarchy.&lt;/p&gt;
&lt;h1&gt;Transform&lt;/h1&gt;
&lt;p&gt;So long as the goal is simply to move an object and nothing else, modifying the values of the transform component, or using its various useful methods to do so, is all you need.&lt;/p&gt;
&lt;p&gt;This includes directly animating the transform via the animation window or by enabling animation root motion.&lt;/p&gt;
&lt;p&gt;However chances are that your situation is more complex than this and you would do well to read on.&lt;/p&gt;
&lt;h1&gt;Physics&lt;/h1&gt;
&lt;p&gt;When your object in any way needs to affect and/or be affected by the physics simulation, you need to make some extra considerations. Simply slapping on a collider and calling it a day will ruin your next.&lt;/p&gt;
&lt;p&gt;To properly participate as a dynamic part of the physics simulation, an object needs to have a rigidbody component attached somewhere in its transform hierarchy.&lt;/p&gt;
&lt;p&gt;The physics system considers separate transform hierarchies as separate objects, so one (and only one) rigidbody component will mark the rest of its hierarchy as dynamic.&lt;/p&gt;
&lt;p&gt;Multiple rigidbodies in the same hierarchy leads to undetermined behaviour (read: weirdnessness) &amp;#8211; the only exception being if those rigidbodies are connected by a joint &amp;#8211; thus making their behaviour again well defined.&lt;/p&gt;
&lt;h2&gt;Kinematic&lt;/h2&gt;
&lt;p&gt;&amp;#8220;But I don&amp;#8217;t need gravity or forces or all that other nonsense!&amp;#8221; &amp;#8211; be cool, that is what the &amp;#8220;kinematic&amp;#8221; switch is for. This basically tells the physics simulation that your object is dynamic, but you will take care of all its movement.&lt;/p&gt;
&lt;p&gt;Kinematic rigidbodies will not be affected by forces or collisions, but will collide with non-kinematic rigidbodies, sending collision events and pushing them out of the way (assuming there are colliders present somewhere in the transform hierarchy of the object).&lt;/p&gt;
&lt;p&gt;&amp;#8220;So why add the rigidbody in the first place? Things work just fine without!&amp;#8221; &amp;#8211; if you have Unity pro, I would direct your attention at the profiler as you move about &amp;#8211; if not, take my word for it that it is not a joyous sight.&lt;/p&gt;
&lt;p&gt;Any object (unique transform hierarchy) with no rigidbody present is treated by the physics simulation as static. For optimal performance, all static colliders are baked into a static collision geometry, securing optimal performance when doing collision checks.&lt;/p&gt;
&lt;p&gt;However every time one static collider (note that this has nothing to do with the static flags on the GameObject &amp;#8211; just the presence of absence of a rigidbody on the object in question) is moved, the whole static collision geometry is marked dirty and regenerated.&lt;/p&gt;
&lt;p&gt;This is not a terribly costly operation, so moving pieces of level geometry from one position to another from time to time is fine. However moving a character of one or more static colliders around every frame will cost you.&lt;/p&gt;
&lt;p&gt;Note that while moving by directly modifying the transform of a kinematic rigidbody is just fine, you will get better results for rapid movement by using the MovePosition and MoveRotation rigidbody functions.&lt;/p&gt;
&lt;p&gt;The former will effectively &amp;#8220;teleport&amp;#8221; the physical object &amp;#8211; fine for short distances and minor rotations, but less so for longer moves. MoveRotation and -Position effectively &amp;#8220;drags&amp;#8221; the object from A to B.&lt;/p&gt;
&lt;h2&gt;Kine-not-so-matic&lt;/h2&gt;
&lt;p&gt;&amp;#8220;Ok, so maybe it would pretty useful if my character could walk into walls, get pushed by others and that sort of thing&amp;#8230;&amp;#8221; No problem. Disable the kinematic flag and start moving via the rigidbody component. If you wanted proper forces and all that, I&amp;#8217;m sure you&amp;#8217;re already all over the AddForce function and all that.&lt;/p&gt;
&lt;p&gt;However if you still want strict control &amp;#8211; just with a touch of presence &amp;#8211; you should look at directly setting the velocity property of the rigidbody.&lt;/p&gt;
&lt;p&gt;Given sideways and forward movement input, forming a velocity vector is easy. By setting the velocity of the rigidbody you add that information to the physics simulation as well as tell it to update the position of the object smoothly.&lt;/p&gt;
&lt;p&gt;That includes pushes from other rigidbodies or pushbacks from static geometry. However directly setting the velocity will override any directional change and so momentum will remain unchanged.&lt;/p&gt;
&lt;p&gt;Therefore consider factoring in some acceleration when building your target velocity vector &amp;#8211; for a more natural look after your character is pushed or makes an abrupt change of direction.&lt;/p&gt;
&lt;h1&gt;Navigation&lt;/h1&gt;
&lt;p&gt;Parallel to the physics simulation you find the navigation runtime. Similarly to how the rendered world model is defined by static and dynamic geometry and the physics world model is defined by static colliders and rigidbodies, the navigation world model is defined by interconnected navigation mesh and dynamic obstacles.&lt;/p&gt;
&lt;p&gt;While the static physics geometry defines areas of no access, navigation mesh defines areas which &lt;strong&gt;are&lt;/strong&gt; navigable. This information is used for finding a valid path from point A to B, but more importantly it is used to constrain characters and inform them of their surroundings.&lt;/p&gt;
&lt;p&gt;The physics simulation can be used for this as well and traditionally is. However the data covered by the physics system is vastly more complex and its ability to define traversable space is a side effect of its ability to define non-traversable space.&lt;/p&gt;
&lt;p&gt;This is where you end up spending way too much time blocking off sections of scenery and later testing that there are indeed no holes in that. Navmeshes on the other hand define a surface on which characters of a given height and with a given radius can move.&lt;/p&gt;
&lt;h2&gt;NavMeshAgent&lt;/h2&gt;
&lt;p&gt;Similarly to the rigidbody component, the NavMeshAgent component wires an object to the navigation runtime. In stead of the single kinematic switch, however, the NavMeshAgent has separate updatePosition and updateRotation toggles.&lt;/p&gt;
&lt;p&gt;To get things going, you can either set a path by one of the many accessors for that or directly set the velocity. Assuming that the NavMeshAgent is configured to update the position, this will start smoothly moving the object like with the rigidbody &amp;#8211; only this time constrained by the navigation meshes rather than collision geometry.&lt;/p&gt;
&lt;p&gt;In addition to pathfinding and staying on the navigation mesh, the navigation runtime will also attempt to have the various NavMeshAgents avoid one-another by adjusting velocity based on the position and velocity of nearby dynamic obstacles and NavMeshAgents.&lt;/p&gt;
&lt;p&gt;Avoidance can be completely tweaked though &amp;#8211; so that one NavMeshAgent can ignore it completely or itself be ignored or weigh different NavMeshAgents differently.&lt;/p&gt;
&lt;h2&gt;Direct control&lt;/h2&gt;
&lt;p&gt;&amp;#8220;Pathfinding? I just need to move this character around based on input.&amp;#8221; Sure, fine &amp;#8211; that is where you just go set the velocity of the NavMeshAgent rather than trying to set a path or destination for it.&lt;/p&gt;
&lt;p&gt;Like with the rigidbody, this starts moving the NavMeshAgent smoothly and tells the runtime about its current velocity &amp;#8211; giving other agents a chance to avoid. Note that even if you do not let the NavMeshAgent directly control the position of your character, you should still feed the velocity back to it &amp;#8211; in order to keep the avoidance runtime up to date.&lt;/p&gt;
&lt;h1&gt;Animation&lt;/h1&gt;
&lt;p&gt;&amp;#8220;&lt;span class=&quot;caps&quot;&gt;WAT&lt;/span&gt;! You did not count this as one of the three ways of moving stuff!&amp;#8221; &amp;#8211; nop, quite right. However root motion is awesome, so let&amp;#8217;s briefly touch on how we tie that to the other systems for much greatness.&lt;/p&gt;
&lt;p&gt;While most of what the animation system does is not of too much concern for your movement logic, one very useful feature is. By analysing animations on import, the surface movement relevant for those animations is calculated and later blended as the animations are blended.&lt;/p&gt;
&lt;p&gt;By default the animation system will, with root motion enabled, move an animated object around by directly updating the transform position based on the root motion of the currently playing animation blend. Animation nicely synchronised with world movement.&lt;/p&gt;
&lt;h2&gt;I&amp;#8217;ll root my own motion, thank you&lt;/h2&gt;
&lt;p&gt;However while that looks mighty cool, it really isn&amp;#8217;t very considerate of your carefully crafted physics simulation or your neatly marked navigation runtime. Luckily it does give an in by allowing you to override the actual application of the root motion.&lt;/p&gt;
&lt;p&gt;This is accomplished by, on the same game object as your animator component, attaching a script implementing the method OnAnimatorMove. Once that method is defined, the animation system will no longer directly apply root motion and in stead call this implementation post-evaluation.&lt;/p&gt;
&lt;p&gt;In the implementation of the OnAnimatorMove callback, you could then update a target velocity vector by simply dividing animator.deltaPosition by Time.deltaTime and similarly rotation. And once we have desired movement in the form of a velocity vector, plenty of the earlier described scenarios become relevant.&lt;/p&gt;
&lt;h2&gt;Most interactive niceness&lt;/h2&gt;
&lt;p&gt;&amp;#8220;Great, I&amp;#8217;ll take one of each!&amp;#8221; Sure, no problem. Well&amp;#8230; It&amp;#8217;s not exactly straight forward, but it is indeed possible to combine all of these things to get something that is responsive, embedded in your simulations and looks great.&lt;/p&gt;
&lt;p&gt;The chain of data goes a little something like this:&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;Player controlled characters:
	&lt;ol&gt;
		&lt;li&gt;Feed input to the animator, resulting in nicely blended animations and root motion.&lt;/li&gt;
		&lt;li&gt;Generate a target velocity in OnAnimatorMove.&lt;/li&gt;
		&lt;li&gt;Set velocity of NavMeshAgent (configured to not update position or rotation).&lt;/li&gt;
		&lt;li&gt;Set velocity and rotation of non-kinematic rigidbody (properly constrained on rotation so it doesn&amp;#8217;t tip over).&lt;/li&gt;
		&lt;li&gt;Map transform position to navigation mesh via NavMesh.SamplePosition.&lt;/li&gt;
	&lt;/ol&gt;&lt;/li&gt;
	&lt;li&gt;Non-player characters or indirectly controlled player characters:
	&lt;ol&gt;
		&lt;li&gt;Set destination or path of NavMeshAgent.&lt;/li&gt;
		&lt;li&gt;Feed desiredVelocity of NavMeshAgent to animator.&lt;/li&gt;
		&lt;li&gt;Repeat as for player controlled characters from 2.&lt;/li&gt;
	&lt;/ol&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;What this setup does not give you is responsiveness to being bumped into. However velocity-wise this is not something your movement implementation should handle directly unless you are ok with breaking that nice root motion setup you just established.&lt;/p&gt;
&lt;p&gt;In stead I would recommend using queries on the surrounding physics and navigation environment to inform the animation state machine of special conditions like &amp;#8220;player wants to go full speed, but there&amp;#8217;s a wall two units from here&amp;#8221; and handle slowing down, stopping and similar in there where the result will look good.&lt;/p&gt;
&lt;p&gt;One simple trick is to do a navigation raycast along the forward vector of the moving transform for some amount of look-ahead distance and if a navigation mesh edge is hit and do a physics raycast further forward from a point slightly elevated from that edge hit point.&lt;/p&gt;
&lt;p&gt;With that setup you can very simply gather information about where the character is headed &amp;#8211; if into a steep wall or perhaps to a ledge or obstacle which could be leapt.&lt;/p&gt;
&lt;h1&gt;Unity Hacks&lt;/h1&gt;
&lt;p&gt;Since apparently I lumped just about everything into that project, unsurprisingly the Unity Hacks project has some work on this form of wired up movement. Particularly the &lt;a href=&quot;https://github.com/AngryAnt/UnityHacks/blob/master/Assets/Standard%20Assets/Movement/Mover.cs&quot;&gt;Mover&lt;/a&gt; component attempts to create a system-agnostic movement interface as well as some simple movement on networked setups not covered here.&lt;/p&gt;
&lt;p&gt;While not complete or in any way a final answer, I hope that with the information provided here, it turns out useful for you.&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;&lt;a href=&quot;https://github.com/AngryAnt/UnityHacks/blob/master/Assets/Standard%20Assets/Movement/Mover.cs&quot;&gt;Mover.cs&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description>
				<published>2014-03-07 00:00:00 +0100</published>
				<link>http://angryant.com/2014/03/07/Moving-in-Unity/</link>
			</item>
			
		
			
			<item>
				<title>Behave 2.3</title>
				<description>&lt;p&gt;In good time for &lt;span class=&quot;caps&quot;&gt;GDC&lt;/span&gt;, I present version 2.3 of Behave. Not exactly the rapid January release I had hoped for &amp;#8211; admittedly I got a bit carried away. However that just means more goodies for everyone :)&lt;/p&gt;
&lt;h2&gt;Contents&lt;/h2&gt;
&lt;p&gt;Highlights from the changelist below:&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;Great new behaviour for Repeaters and decorator components in general.&lt;/li&gt;
	&lt;li&gt;Mandatory contexts.&lt;/li&gt;
	&lt;li&gt;Useful runtime &lt;span class=&quot;caps&quot;&gt;API&lt;/span&gt; tweaks.&lt;/li&gt;
	&lt;li&gt;A good, thick coat of editor polish.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;A word of caution on the new instant repeater: It &lt;strong&gt;will&lt;/strong&gt; very easily send you into an infinite loop if you are not watching out. Just in case you by accident set one up, the compiler will warn about this potential scenario.&lt;/p&gt;
&lt;p&gt;For this release, the AngryAnt community has again provided great bug reports and many suggestions for changes and additions. Thanks! I hope you enjoy this release &amp;#8211; do let me know in either case.&lt;/p&gt;
&lt;h2&gt;Onwards&lt;/h2&gt;
&lt;p&gt;As noted in the release notes, a good deal of time was spent refactoring while working on this release. This puts me on a good path for some exciting additions later on.&lt;/p&gt;
&lt;p&gt;However with &lt;span class=&quot;caps&quot;&gt;GDC&lt;/span&gt; right around the corner, I will likely have to reduce my velocity on Behave a bit. So let&amp;#8217;s keep this new stuff as a surprise for later. No need for letting out all the spoilers now, right?&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;&lt;a href=&quot;http://u3d.as/5hA&quot;&gt;Behave 2 for Unity on the asset store&lt;/a&gt;.&lt;/li&gt;
	&lt;li&gt;&lt;a href=&quot;/behave/&quot;&gt;Project information&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;
Changelist:


2.3:
 - Added support for instant repeaters.
 - Added support for mandatory contexts.
 - Added optional target parameter to Tree.ResetForwards.
 - Added Tree.TickWrapping method.
 - Added debugger auto-launch settings to library build options.
 - Added home screen - shown on launch or via the Help menu, full of resources.
 - Behavioural change: Decorators no longer forward the instant flag of their child node.
 - Behaviour of decorators receiving a Running signal from their control connection is now defined.
 - Dependencies now shipped as separate (replaceable) files for minimal project impact.
 - Editor polish.
     - Added support for running multiple editor debugging instances on one machine.
     - Added focus-follow for debugger and canvas.
     - Added both scrollwheel/pad and drag-to-scroll support to all canvas views.
     - Drag connection to occupied input slot to replace.
     - Directly drag-drop trees from the sidebar onto the canvas as reference nodes.
     - Instant flag doesn&#39;t show on nodes connected to parents ignoring the flag.
     - &quot;Last edited library&quot; now tracked per project.
     - Last selected tree is now also restored between sessions and playmode transitions.
     - A bunch of minor adjustments and improvements.
     - Performance + memory + disk space optimisations.
     - Minor bugfixes.
 - New documentation layout and enhancements (already released as available).
 - Reshuffling of code to make way for exciting new things down the road.


2.2.2:
 - Addressed protobuf issue causing Parallel component completion setting to not get stored correctly.


2.2.1:
 - Fixed issue causing parallel components to fail compilation.


2.2:
 - Behavioural change: Support for multiple different action handler signatures is discontinued effective immediately.
    - Generated agent blueprint as well as accepted reflected signatures are now only:
        - public BehaveResult [Tick/Init][Name]Action (Tree sender);
        - public void Reset[Name]Action (Tree sender);
 - Added Tree class accessors - all valid only during an active init/tick/reset handler call:
    - string ActiveStringParameter
    - float ActiveFloatParameter
    - IAgent ActiveAgent
    - object ActiveData
 - Rather than waiting for the Unity bugfix, the built-in compiler API is now bypassed in favour of direct compiler binary execution.
    - An additional system-level mono SDK install is no longer needed to work around this Unity bug.
 - Tree.SetForward now returns boolean success value rather than logging error when passed unused action.
 - Full-library export now also available from the library settings in stead of menu-only access.
 - Even more UI polish: Better word-wrap, more contrasts for emphasis, instant flag hidden in unaffected scenarios and much more.
 - &quot;Form new tree&quot; nicely moves the new subtree up around the root socket rather than retaining the old position.
 - Default frame-rate of DebugUpdater now set to 20 fps rather than every frame. Gun safety and all that.
 - Massive codegen size save for larger libraries - from optimisation of tree-agent introspection codegen. Compile-time win.
 - More rigid parameter evaluation (remove needless occasional extra codegen).
 - Fixed copy and duplication procedures incorrectly not copying parameter values.
 - Force Unity to write serialised data before compiling.


2.1.1:
 - Fixed issue with tree paramterisation breaking debugger visualisation.


2.1:
 - Added autocomplete on action names, string parameters and component contexts.
 - Added mandatory actions (present in library regardless of use in trees).
 - Added partial library export and library merging / import-to-library.
 - Added Behave stripping - leave behind only a very lean Behave runtime, for redistribution or super slim deploy.
 - Added parameterised trees - get even more re-use out of your trees by overriding context and variables per reference.
 - Behavioural change: Tree.Reset will now delay resetting tree variables until after complete component reset.
 - Behavioural change: Tree.Tick will no longer automatically reset the tree upon completion. This plays very well with:
 - Added Tree.TickContinuously (int iterationCap = 1024) - ticks tree till completion or iteration cap is reached.
 - Added BehaveResult Tree.Result (bool value) utility function to side with Tree.Invert (BehaveResult value).
 - Added int Debugging.Local.ConnectionCount property - facilitating debug behaviour dependent on Behave debugger presence.
 - Moved default install path from Assets/Behave to Assets/Plugins/Behave.
    - WARNING: See Readme.txt upgrade guide.
 - Fixed decorator control node removal resulting in detached control connection.
 - Fixed decorator incorrectly not forwarding the instant status of its child node.
 - Fixed scenario where agent classes would get reflected for handlers even if blueprint derived.
 - Fixed unexpected corner cases of bad library configuration failing compiles (now causing warnings or simply being ignored).
 - Fixed Behave window breaking down when exiting play mode after having been active there.
 - Fixes to context getting incorrectly reset in some scenarios.
 - Fixed copy / paste functionality missing in some text fields.
 - Lots of UI polish and minor fixes.


2.0:
 - New editor.
    - Unified all controls into one window.
    - Completely customised look - compatible with both Unity light and dark skin.
    - Keyboard authoring interface in addition to drag &amp;amp; drop.
 - Debugger upgrade.
    - Remote debugging.
    - Tick and reset.
    - &quot;Unplug&quot; for debugger-only control.
    - Breakpoints.
    - Action overrides - override the return values of specified actions.
 - Decorator rewrite.
    - Deprecated old decorator.
       - Still compiles, but cannot be added.
    - Decorators are now control-type components.
       - No specific decorator handlers on agents.
       - Control is achieved via third connection socket.
    - Two initial decorator types: Repeater and Interrupter.
 - Asset restructuring.
 	- No more collections - for nesting, use paths in tree names.
 	- New serialization format - see Readme.txt for upgrade instructions.
    - Collections are gone. Use Unix-style path names for tree organisation.
 - IAgent.Tick (Tree, bool) changed to IAgent.Tick (Tree)
	- Init calls can now only be handled explicitly
 - Full coverage online documentation and other community resources.
 - Countless fixes and polish items.

1.5:
 - Added Tree.TickActive - indicating if a tree is currently executing a tick or if it has completed evaluation.
 - In-tick tree reset requests now result in a reset at the end of tree evaluation rather than an immediate one.
 - Removed the legacy compatibility assembly (for compatibility with pre-1.2 assets) from the default distribution.
 - Fixed &quot;X must be instantiated using the ScriptableObject.CreateInstance method instead of new X&quot; warnings.

1.4:
 - Fixed decorator incorrectly initializing on every returning tick when tick handler returned Running.
 - Fixed debugger view dependency on active tree editor - causing reported null reference exception.
 - Fixed missing scrollbars on browser window.
 - Reduced logging noise from debug builds.
 - Agent blueprints can now be MonoBehaviour based.
 - Clarified wording on &quot;library not loaded&quot;.
 - Now handling reset a bit cleverer - potential performance boost.
 - Changed the default success criteria of Parallel components from SuccessOrFailure to Success.
 - Added &quot;instant&quot; flag to components. Components marked instant will affect sequences and selectors when moving between child nodes. When a child node marked &quot;instant&quot; completes, rather than waiting for the next tree tick to tick the following child node, the sequence or selector does it immediately.
 - The compiler progress bar returns.
 - Editing a Behave asset now focuses the asset browser last instead of the tree editor.
 - Behave can now be installed in any subfolder of Assets - provided its internal folder structure remains intact.
 - Compilation speed improvements.
 - Enabled references across collection borders.
 - Added Tree.DataSize - returning the number of bytes used by a tree instance. This is also displayed in the debugger window.

1.3:
 - Fixed priority selector init flag resetting.
 - Fixed reference handling on tree renaming and deletion.
 - Fixed references still pointing at old collection post collection duplication.
 - Fixed compilation of actions and decorators with non-integral float parameters.
 - Fixed GUI list behaviours.
 - Fixed passing context back and forth between referenced trees and referrer.
 - Fixed reordering connections not causing save state to be set.
 - Various GUI tweaks.
 - Runtime optimisations.
 - Enabled scrolling of the tree list in the debugger window.
 - Exposed Tree.ReflectForwards.
 - Added Tree.ResetForwards.
 - Added agent blueprints - connecting to agent handlers through virtual methods rather than reflected handlers.
 - Made connections selectable in the tree editor via the connection nub.
 - Moved connection managing from the inspector to the tree editor, where it is more visible and handy.
 - Added support for disabling connections - for faster, less destructive debugging.
 - Double-click reference component to jump to referenced tree.
 - Changed &quot;Cannot update unregistered tree&quot; handling from an exception to an error message. Still need more info.
 - Now showing string and float parameters in the tree editor if either is set.

1.2:
 - Fixed release building.
 - Added the priority selector, introducing the API points:
    - int IAgent.SelectTopPriority (Tree sender, params int[] IDs);
    - enum BL[LibraryName].PriorityType { PriorityName, ..., Unknown };
 - Added support for branch contexts, introducing the API points:
    - enum BL[LibraryName].ContextType { ContextName, ..., Unknown };
    - int Tree.ActiveContext { get; }
 - Changed IAgent interface:
    - Tick (bool init, Tree sender) -&amp;gt; Tick (Tree sender, bool init)
 - Added &quot;Select asset&quot; button to the standard inspector.
 - Interface polish.

1.1:
 - Made compatible with Unity 3.0 - including ensuring that the 2.5-2.6.1 bug preventing compilation on Windows is fixed on the Unity side.
 - UI tweaks and polish.
 - Added the option to have return values of nodes be inverted.
 - Fixed compiler bug when facing sequence or selector with only one child node.
 - Renamed Library.Tree -&amp;gt; Library.InstantiateTree.
 - Added Tree.Tick () and Tree.Reset () methods using the IAgent instance given at instantiation of the tree.
 - Removed the abstract Library class.
 - Changed generated library class:
    - Trees -&amp;gt; TreeType.
    - Actions -&amp;gt; ActionType.
    - Decorators -&amp;gt; DecoratorType.
    - Tree InstantiateTree (int, IAgent) -&amp;gt; static Tree InstantiateTree (TreeType, IAgent)
    - int TreeID (Tree) -&amp;gt; static TreeType Type (Tree)
    - bool IsAction (int) -&amp;gt; static bool IsAction (int)
    - bool IsDecorator (int) -&amp;gt; static bool IsDecorator (int)
 - Upped editor performance.
 - New asset structure change with automatic import of Behave 1.0 assets.
 - Changed action and decorator handlers. These are now the handlers mapped:
    - public BehaveResult Init[Name][Action/Decorator] (Tree sender, string stringParameter, float floatParameter, IAgent agent, object data);
    - public BehaveResult Tick[Name][Action/Decorator] (Tree sender, string stringParameter, float floatParameter, IAgent agent, object data);
    - public void Reset[Name][Action/Decorator] (Tree sender, string stringParameter, float floatParameter, IAgent agent, object data);
    - public BehaveResult Init[Name][Action/Decorator] (Tree sender);
    - public BehaveResult Tick[Name][Action/Decorator] (Tree sender);
    - public void Reset[Name][Action/Decorator] (Tree sender);
    - public BehaveResult [Name][Action/Decorator] {get; set;}
 - Added support for collection duplication.
 - Moved debug rendering into the editor with its own dedicated debugger window, including actor listing.
 - Debugger now renders active sub-trees as well.

1.0:
 - Lots o fixes for Unity 2.5 compatibility.
 - Closer editor integration with new UI.
    - Component bar.
    - Node inspection.
 - Runtime tree debugging.
 - Direct mapping of action and delegate handlers via reflection.
 - Kitty demo.

0.3b:
 - Various tweaks to the editor UI.
 - Optimised the compiler.
 - Fixed the following editor bugs from the bug list:
    - When the editor scrips are recompiled and when the user enters and exits play mode, running editors will loose references, causing undetermined behaviour.
    - When a compile fails, the Behave compiler is locked and unusable – requiring a unity relaunch.
 - Implemented the following wishlist items:
    - Behaviour tree decorators.
    - Stand-alone edition of the Behave editor.
    - Behaviour tree debugging features.

0.2b:
 - Made the demo project a whole lot more interesting.
 - Implemented the editor wish list item: Ability to move trees between collections.
 - Various tweaks to the editor UI.
 - Fixed a ton of bugs in the compiler.
 - Fixed the following editor bugs from the bug list:
    - Not able to delete collections from library.
    - Not able to delete trees from library.
    - Not able to rename collections from library.
    - Not able to rename trees from library.
    - Missing &quot;tree has been changed, save changes?&quot; dialog.

0.1b:
 - Some documentation is available.
 - Compiler is now creating sensible output.
 - A simple test tree and script using it is provided with the demo.
 - Documentation is linked directly from the unity help menu.
 - Less spamming of the log with debug information.

Pre-release:
 - Magic happened. Behave was born.
&lt;/pre&gt;</description>
				<published>2014-02-27 00:00:00 +0100</published>
				<link>http://angryant.com/2014/02/27/Behave-2-3/</link>
			</item>
			
		
			
			<item>
				<title>Unity and .net assemblies</title>
				<description>&lt;p&gt;Since I started making middleware for Unity in early 2008, I have been working with Unity and .net assemblies. I have in this time had many opportunities to juggle the two in many different contexts, so I figured a sort of summary of what I learned would make sense.&lt;/p&gt;
&lt;p&gt;Why not start off by setting a few facts straight, eh?&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;Aside from the extension and a header, .net assemblies have little to do with Windows Dynamic Link Libraries.
	&lt;ul&gt;
		&lt;li&gt;Windows DLLs contain binary code, usually with a very simple interface, while .net assemblies contain .net bytecode (or &lt;span class=&quot;caps&quot;&gt;CIL&lt;/span&gt;).&lt;/li&gt;
	&lt;/ul&gt;&lt;/li&gt;
	&lt;li&gt;Unity pro is not required to use .net assemblies.
	&lt;ul&gt;
		&lt;li&gt;Binary plugins require Unity pro (at time of writing) and must be placed in Assets/Plugins. However .net assemblies are just bytecode &amp;#8211; just like what Unity turns your scripts into, so none of these requirements apply.&lt;/li&gt;
	&lt;/ul&gt;&lt;/li&gt;
	&lt;li&gt;.net assemblies run on all platforms &amp;#8211; including webplayer.
	&lt;ul&gt;
		&lt;li&gt;Again, as we are talking about bytecode which is fed directly to the mono runtime &amp;#8211; like the compiled result of your scripts, the same rules go.&lt;/li&gt;
	&lt;/ul&gt;&lt;/li&gt;
	&lt;li&gt;Distributing .net assemblies in stead of script files does not copy protect your code.
	&lt;ul&gt;
		&lt;li&gt;Since the mono runtime has to Just In Time compile your assembly to run on the current platform, the bytecode is quite verbose and while some information is lost, generally it is very easy to decompile and read .net assemblies.&lt;/li&gt;
		&lt;li&gt;Remember that this is true for your script source in most project builds as well, since for most platforms Unity builds your scripts to .net assemblies.&lt;/li&gt;
	&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;Argh! But my kodes!&lt;/h1&gt;
&lt;p&gt;I will not get into source protection too much, but generally I would not worry too much about it.&lt;/p&gt;
&lt;p&gt;Source code in and of itself does not mean that someone can instantly copy and use parts of your work. It takes actual skill and time investment to make use of it, integrated in a different setup from what it was originally designed for. In the end it is my opinion that it would not be worth it compared to doing the same work from scratch.&lt;/p&gt;
&lt;p&gt;Consider that the entire source of Half Life 2 was very publicly leaked shortly before its originally scheduled release and how we are all now drowning in games based on it.&lt;/p&gt;
&lt;p&gt;If you have client-side security measures which you would like to protect &amp;#8211; like in-app purchases or other anti-cheat measures, you may indeed want to consider splitting out and encrypting part of this logic as well as applying some measure of source obfuscation.&lt;/p&gt;
&lt;p&gt;A word of caution: While source-level obfuscation is fine and usually sufficient, assembly-level obfuscation can be risky as it generally relies on bugs in the mono runtime in order to function. Bugs which might get fixed at any time &amp;#8211; at which point you will need to go back and revisit your security efforts.&lt;/p&gt;
&lt;p&gt;And remember: Encryption and obfuscation is just about making it harder for people to do things you don&amp;#8217;t want them to. In the end this all has to be understood by processors and even binaries are routinely reverse engineered. The best security is gained by not making what you wish to protect available outside of hardware in your control.&lt;/p&gt;
&lt;p&gt;For more information on protecting sensitive client-side information from tampering, see the Unite Asia 2013 &amp;#8220;Protecting Your Android Content&amp;#8221; talk by Erik Hemming.&lt;/p&gt;
&lt;p&gt;Note that Unity does not distribute .net assemblies on all platforms. Some platforms do not run the mono &lt;span class=&quot;caps&quot;&gt;JIT&lt;/span&gt; compiler because reasons and for those Unity will in stead perform Ahead Of Time compilation on your code while building.&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;caps&quot;&gt;AOT&lt;/span&gt; compilation basically means that in stead of relying on the &lt;span class=&quot;caps&quot;&gt;JIT&lt;/span&gt; compiler to at runtime load your bytecode when relevant and compile it for the specific hardware it is running on, the &lt;span class=&quot;caps&quot;&gt;AOT&lt;/span&gt; compiler will compile all your assembly to platform-specific binary right up front.&lt;/p&gt;
&lt;p&gt;This means that your source code assemblies, any assemblies present in your project as well as the Unity engine assemblies are all jumbled into one binary. In most cases this should disincentivise tampering sufficiently.&lt;/p&gt;
&lt;p&gt;At time of writing, Unity employs &lt;span class=&quot;caps&quot;&gt;AOT&lt;/span&gt; compiling on iOS and the console platforms.&lt;/p&gt;
&lt;h1&gt;What is the point then?&lt;/h1&gt;
&lt;p&gt;Now that you know what assemblies are not, you might be wondering why you should be interested in them at all. And rightly so.&lt;/p&gt;
&lt;p&gt;I think it is always healthy to have some understanding of what goes on in the lower layers of your technology stack, but most Unity developers will not need to know about .net assemblies.&lt;/p&gt;
&lt;p&gt;However here are some reasons why they are really cool:&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;If you are distributing middleware, they allow you to significantly reduce your distribution footprint without compromising your development environment (one assembly vs. a bunch of script files).
	&lt;ul&gt;
		&lt;li&gt;Like their Windows cousins, .net assemblies allow embedded resources, which means you can literally put everything you need &amp;#8211; textures, audio, whatever &amp;#8211; inside one file.&lt;/li&gt;
	&lt;/ul&gt;&lt;/li&gt;
	&lt;li&gt;Where &lt;span class=&quot;caps&quot;&gt;JIT&lt;/span&gt; is available, new assembly can be loaded at runtime.
	&lt;ul&gt;
		&lt;li&gt;So what? So live patching baby!&lt;/li&gt;
	&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Since the &lt;span class=&quot;caps&quot;&gt;JIT&lt;/span&gt; compiler routinely loads bytecode from disk and compiles and executes it, there is nothing preventing you from having it load bytecode which was not included in your original build.&lt;/p&gt;
&lt;p&gt;The class System.Reflection.Assembly lets you load in bytecode from a file or a byte array, after which you can use reflection to find and instantiate types, call functions and all that other good stuff on what is contained in the assembly.&lt;/p&gt;
&lt;p&gt;Remember that since Unity employs &lt;span class=&quot;caps&quot;&gt;AOT&lt;/span&gt; and not &lt;span class=&quot;caps&quot;&gt;JIT&lt;/span&gt; on some platforms, this functionality is not available everywhere.&lt;/p&gt;
&lt;p&gt;For an example of loading in new assembly, see the code-in-asset-bundles example from the &amp;#8220;Unity Hacks&amp;#8221; talk available on the &lt;a href=&quot;/videos&quot;&gt;videos&lt;/a&gt; page (source included).&lt;/p&gt;
&lt;p&gt;A word of caution: If you plan on employing remote patching, make sure to at least sign your transfers in order to avoid man in the middle injection attacks.&lt;/p&gt;
&lt;h1&gt;Wohoo! Assemble all of the things!&lt;/h1&gt;
&lt;p&gt;This is all great, but how do you get started building assemblies for all them things? Well, dear reader, there are different approaches:&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;If you are already set up with Visual Studio or Mono Develop, you can simply create a new project for a .net assembly using the project creation wizard. In order to access Unity types, simply add the UnityEngine.dll (and if necessary the UnityEditor.dll) assemblies to the project references and off you go.&lt;/li&gt;
	&lt;li&gt;Should you be of a different persuasion and if you are not one to shy away from a terminal window, you can use the the gmcs binary as distributed with Unity or the mono &lt;span class=&quot;caps&quot;&gt;SDK&lt;/span&gt; to build your assembly by command-line.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Either of these will produce a .dll file with all of your kodes (and potentially resources). Simply drop it anywhere in your assets folder to gain access to the contained classes. The same compile order rules which apply to scripts, also hold true for assemblies.&lt;/p&gt;
&lt;p&gt;Any public ScriptableObject or MonoBehaviour derived classes will appear as children of the assembly asset. Simply click the folding widget next to the asset in order to view and be able to drag-drop them.&lt;/p&gt;
&lt;p&gt;Ah and if you were too lazy to check out the Unity Hacks talk (you really should, it is full of useful snippets), the trick for putting code in asset bundles is to compile the scripts to an assembly rather than letting Unity compile them and then save the assembly in your assets folder with the .bytes extension rather than .dll.&lt;/p&gt;
&lt;p&gt;This makes Unity import the assembly as a TextAsset which is not addressed by Unitys compiler and can be included in asset bundles. At runtime, the bytes property of the asset reference is then passed to the Assembly constructor as described earlier.&lt;/p&gt;
&lt;h1&gt;And the catch?&lt;/h1&gt;
&lt;p&gt;Given that we are reaching the end of this article, that would mean it is high time for some dream bursting. This all sounds very easy and optimal to work with, but of-course it is not that simple.&lt;/p&gt;
&lt;p&gt;While Unity makes it fairly straight forward to debug your scripts using MonoDevelop, it will by default do absolutely nothing to help you with your assemblies.&lt;/p&gt;
&lt;p&gt;To help it on its way, you need to first build your assemblies for debug and secondly copy the generated [AssemblyName].mdb file to your assets folder along side the .dll file.&lt;/p&gt;
&lt;p&gt;If you went ahead and looked for the mdb file right as I had ended the above paragraph, you would stand some chance of not finding it. Should you be on Windows, a pdb file rather than an mdb is generated and it is absolutely useless to the Unity debugging runtime.&lt;/p&gt;
&lt;p&gt;Should you be stuck with a pdb file, you will need to use the pdb2mdb command-line tool as distributed with the Unity mono runtime or the mono &lt;span class=&quot;caps&quot;&gt;SDK&lt;/span&gt;. However running this command by hand every time you need to debug gets old really fast, so I recommend adding it in as a post-build step on your MonoDevelop or VisualStudio project.&lt;/p&gt;
&lt;p&gt;For more information on debugging assemblies in Unity and indeed general use of assemblies in Unity, see this excellent article in the Unity documentation: &lt;a href=&quot;http://docs.unity3d.com/Documentation/Manual/UsingDLL.html&quot;&gt;Using Mono DLLs in a Unity Project&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;And that is all, folks. I hope you find it useful!&lt;/p&gt;</description>
				<published>2014-01-03 00:00:00 +0100</published>
				<link>http://angryant.com/2014/01/03/Unity-and-net-assemblies/</link>
			</item>
			
		
			
			<item>
				<title>Behave 2.2</title>
				<description>&lt;p&gt;It is finally here! Sorry about this release taking a bit longer than the prior ones. I have experienced the very luxurious &amp;#8220;problem&amp;#8221; of &lt;a href=&quot;/work/&quot;&gt;having lots to do&lt;/a&gt;. The last contract of the year finished this Friday though, so here we are: 2.2 :)&lt;/p&gt;
&lt;h2&gt;Contents&lt;/h2&gt;
&lt;p&gt;While the full changelist will follow the body of this post as per usual, I would still like to draw out a few of the main changes in 2.2:&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;Behavioural change: Support for multiple different action handler signatures is discontinued effective immediately.&lt;/li&gt;
	&lt;li&gt;Rather than waiting for the Unity bugfix, the built-in compiler &lt;span class=&quot;caps&quot;&gt;API&lt;/span&gt; is now bypassed in favour of direct compiler binary execution.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Watch out for that behavioural change &amp;#8211; it will very likely break code. I decided on this in order to reduce the size of your obligatory agent code. Additional parameters have been moved onto properties of the sender tree.&lt;/p&gt;
&lt;p&gt;The compiler change means we are finally rid of that annoying requirement of having mono installed next to Unity in order to run the Behave compiler. Yay!&lt;/p&gt;
&lt;p&gt;The remaining changes are more or less just heaps of UI- and workflow polish, plus a few bug fixes &amp;#8211; again, many thanks to the AngryAnt community for providing invaluable assistance in identifying and tracking these down.&lt;/p&gt;
&lt;h2&gt;Onwards&lt;/h2&gt;
&lt;p&gt;Early next year I hope to have some more time for Behave, allowing me to do some rapid releases with new features in January. As always, any feedback you might have is very much appreciated.&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;&lt;a href=&quot;http://u3d.as/5hA&quot;&gt;Behave 2 for Unity on the asset store&lt;/a&gt;.&lt;/li&gt;
	&lt;li&gt;&lt;a href=&quot;/behave/&quot;&gt;Project information&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;
Changelist:


2.2:
 - Behavioural change: Support for multiple different action handler signatures is discontinued effective immediately.
    - Generated agent blueprint as well as accepted reflected signatures are now only:
        - public BehaveResult [Tick/Init][Name]Action (Tree sender);
        - public void Reset[Name]Action (Tree sender);
 - Added Tree class accessors - all valid only during an active init/tick/reset handler call:
    - string ActiveStringParameter
    - float ActiveFloatParameter
    - IAgent ActiveAgent
    - object ActiveData
 - Rather than waiting for the Unity bugfix, the built-in compiler API is now bypassed in favour of direct compiler binary execution.
    - An additional system-level mono SDK install is no longer needed to work around this Unity bug.
 - Tree.SetForward now returns boolean success value rather than logging error when passed unused action.
 - Full-library export now also available from the library settings in stead of menu-only access.
 - Even more UI polish: Better word-wrap, more contrasts for emphasis, instant flag hidden in unaffected scenarios and much more.
 - &quot;Form new tree&quot; nicely moves the new subtree up around the root socket rather than retaining the old position.
 - Default frame-rate of DebugUpdater now set to 20 fps rather than every frame. Gun safety and all that.
 - Massive codegen size save for larger libraries - from optimisation of tree-agent introspection codegen. Compile-time win.
 - More rigid parameter evaluation (remove needless occasional extra codegen).
 - Fixed copy and duplication procedures incorrectly not copying parameter values.
 - Force Unity to write serialised data before compiling.


2.1.1:
 - Fixed issue with tree paramterisation breaking debugger visualisation.


2.1:
 - Added autocomplete on action names, string parameters and component contexts.
 - Added mandatory actions (present in library regardless of use in trees).
 - Added partial library export and library merging / import-to-library.
 - Added Behave stripping - leave behind only a very lean Behave runtime, for redistribution or super slim deploy.
 - Added parameterised trees - get even more re-use out of your trees by overriding context and variables per reference.
 - Behavioural change: Tree.Reset will now delay resetting tree variables until after complete component reset.
 - Behavioural change: Tree.Tick will no longer automatically reset the tree upon completion. This plays very well with:
 - Added Tree.TickContinuously (int iterationCap = 1024) - ticks tree till completion or iteration cap is reached.
 - Added BehaveResult Tree.Result (bool value) utility function to side with Tree.Invert (BehaveResult value).
 - Added int Debugging.Local.ConnectionCount property - facilitating debug behaviour dependent on Behave debugger presence.
 - Moved default install path from Assets/Behave to Assets/Plugins/Behave.
    - WARNING: See Readme.txt upgrade guide.
 - Fixed decorator control node removal resulting in detached control connection.
 - Fixed decorator incorrectly not forwarding the instant status of its child node.
 - Fixed scenario where agent classes would get reflected for handlers even if blueprint derived.
 - Fixed unexpected corner cases of bad library configuration failing compiles (now causing warnings or simply being ignored).
 - Fixed Behave window breaking down when exiting play mode after having been active there.
 - Fixes to context getting incorrectly reset in some scenarios.
 - Fixed copy / paste functionality missing in some text fields.
 - Lots of UI polish and minor fixes.


2.0:
 - New editor.
    - Unified all controls into one window.
    - Completely customised look - compatible with both Unity light and dark skin.
    - Keyboard authoring interface in addition to drag &amp;amp; drop.
 - Debugger upgrade.
    - Remote debugging.
    - Tick and reset.
    - &quot;Unplug&quot; for debugger-only control.
    - Breakpoints.
    - Action overrides - override the return values of specified actions.
 - Decorator rewrite.
    - Deprecated old decorator.
       - Still compiles, but cannot be added.
    - Decorators are now control-type components.
       - No specific decorator handlers on agents.
       - Control is achieved via third connection socket.
    - Two initial decorator types: Repeater and Interrupter.
 - Asset restructuring.
    - No more collections - for nesting, use paths in tree names.
    - New serialization format - see Readme.txt for upgrade instructions.
    - Collections are gone. Use Unix-style path names for tree organisation.
 - IAgent.Tick (Tree, bool) changed to IAgent.Tick (Tree)
    - Init calls can now only be handled explicitly
 - Full coverage online documentation and other community resources.
 - Countless fixes and polish items.

1.5:
 - Added Tree.TickActive - indicating if a tree is currently executing a tick or if it has completed evaluation.
 - In-tick tree reset requests now result in a reset at the end of tree evaluation rather than an immediate one.
 - Removed the legacy compatibility assembly (for compatibility with pre-1.2 assets) from the default distribution.
 - Fixed &quot;X must be instantiated using the ScriptableObject.CreateInstance method instead of new X&quot; warnings.

1.4:
 - Fixed decorator incorrectly initializing on every returning tick when tick handler returned Running.
 - Fixed debugger view dependency on active tree editor - causing reported null reference exception.
 - Fixed missing scrollbars on browser window.
 - Reduced logging noise from debug builds.
 - Agent blueprints can now be MonoBehaviour based.
 - Clarified wording on &quot;library not loaded&quot;.
 - Now handling reset a bit cleverer - potential performance boost.
 - Changed the default success criteria of Parallel components from SuccessOrFailure to Success.
 - Added &quot;instant&quot; flag to components. Components marked instant will affect sequences and selectors when moving between child nodes. When a child node marked &quot;instant&quot; completes, rather than waiting for the next tree tick to tick the following child node, the sequence or selector does it immediately.
 - The compiler progress bar returns.
 - Editing a Behave asset now focuses the asset browser last instead of the tree editor.
 - Behave can now be installed in any subfolder of Assets - provided its internal folder structure remains intact.
 - Compilation speed improvements.
 - Enabled references across collection borders.
 - Added Tree.DataSize - returning the number of bytes used by a tree instance. This is also displayed in the debugger window.

1.3:
 - Fixed priority selector init flag resetting.
 - Fixed reference handling on tree renaming and deletion.
 - Fixed references still pointing at old collection post collection duplication.
 - Fixed compilation of actions and decorators with non-integral float parameters.
 - Fixed GUI list behaviours.
 - Fixed passing context back and forth between referenced trees and referrer.
 - Fixed reordering connections not causing save state to be set.
 - Various GUI tweaks.
 - Runtime optimisations.
 - Enabled scrolling of the tree list in the debugger window.
 - Exposed Tree.ReflectForwards.
 - Added Tree.ResetForwards.
 - Added agent blueprints - connecting to agent handlers through virtual methods rather than reflected handlers.
 - Made connections selectable in the tree editor via the connection nub.
 - Moved connection managing from the inspector to the tree editor, where it is more visible and handy.
 - Added support for disabling connections - for faster, less destructive debugging.
 - Double-click reference component to jump to referenced tree.
 - Changed &quot;Cannot update unregistered tree&quot; handling from an exception to an error message. Still need more info.
 - Now showing string and float parameters in the tree editor if either is set.

1.2:
 - Fixed release building.
 - Added the priority selector, introducing the API points:
    - int IAgent.SelectTopPriority (Tree sender, params int[] IDs);
    - enum BL[LibraryName].PriorityType { PriorityName, ..., Unknown };
 - Added support for branch contexts, introducing the API points:
    - enum BL[LibraryName].ContextType { ContextName, ..., Unknown };
    - int Tree.ActiveContext { get; }
 - Changed IAgent interface:
    - Tick (bool init, Tree sender) -&amp;gt; Tick (Tree sender, bool init)
 - Added &quot;Select asset&quot; button to the standard inspector.
 - Interface polish.

1.1:
 - Made compatible with Unity 3.0 - including ensuring that the 2.5-2.6.1 bug preventing compilation on Windows is fixed on the Unity side.
 - UI tweaks and polish.
 - Added the option to have return values of nodes be inverted.
 - Fixed compiler bug when facing sequence or selector with only one child node.
 - Renamed Library.Tree -&amp;gt; Library.InstantiateTree.
 - Added Tree.Tick () and Tree.Reset () methods using the IAgent instance given at instantiation of the tree.
 - Removed the abstract Library class.
 - Changed generated library class:
    - Trees -&amp;gt; TreeType.
    - Actions -&amp;gt; ActionType.
    - Decorators -&amp;gt; DecoratorType.
    - Tree InstantiateTree (int, IAgent) -&amp;gt; static Tree InstantiateTree (TreeType, IAgent)
    - int TreeID (Tree) -&amp;gt; static TreeType Type (Tree)
    - bool IsAction (int) -&amp;gt; static bool IsAction (int)
    - bool IsDecorator (int) -&amp;gt; static bool IsDecorator (int)
 - Upped editor performance.
 - New asset structure change with automatic import of Behave 1.0 assets.
 - Changed action and decorator handlers. These are now the handlers mapped:
    - public BehaveResult Init[Name][Action/Decorator] (Tree sender, string stringParameter, float floatParameter, IAgent agent, object data);
    - public BehaveResult Tick[Name][Action/Decorator] (Tree sender, string stringParameter, float floatParameter, IAgent agent, object data);
    - public void Reset[Name][Action/Decorator] (Tree sender, string stringParameter, float floatParameter, IAgent agent, object data);
    - public BehaveResult Init[Name][Action/Decorator] (Tree sender);
    - public BehaveResult Tick[Name][Action/Decorator] (Tree sender);
    - public void Reset[Name][Action/Decorator] (Tree sender);
    - public BehaveResult [Name][Action/Decorator] {get; set;}
 - Added support for collection duplication.
 - Moved debug rendering into the editor with its own dedicated debugger window, including actor listing.
 - Debugger now renders active sub-trees as well.

1.0:
 - Lots o fixes for Unity 2.5 compatibility.
 - Closer editor integration with new UI.
    - Component bar.
    - Node inspection.
 - Runtime tree debugging.
 - Direct mapping of action and delegate handlers via reflection.
 - Kitty demo.

0.3b:
 - Various tweaks to the editor UI.
 - Optimised the compiler.
 - Fixed the following editor bugs from the bug list:
    - When the editor scrips are recompiled and when the user enters and exits play mode, running editors will loose references, causing undetermined behaviour.
    - When a compile fails, the Behave compiler is locked and unusable – requiring a unity relaunch.
 - Implemented the following wishlist items:
    - Behaviour tree decorators.
    - Stand-alone edition of the Behave editor.
    - Behaviour tree debugging features.

0.2b:
 - Made the demo project a whole lot more interesting.
 - Implemented the editor wish list item: Ability to move trees between collections.
 - Various tweaks to the editor UI.
 - Fixed a ton of bugs in the compiler.
 - Fixed the following editor bugs from the bug list:
    - Not able to delete collections from library.
    - Not able to delete trees from library.
    - Not able to rename collections from library.
    - Not able to rename trees from library.
    - Missing &quot;tree has been changed, save changes?&quot; dialog.

0.1b:
 - Some documentation is available.
 - Compiler is now creating sensible output.
 - A simple test tree and script using it is provided with the demo.
 - Documentation is linked directly from the unity help menu.
 - Less spamming of the log with debug information.

Pre-release:
 - Magic happened. Behave was born.
&lt;/pre&gt;</description>
				<published>2013-12-23 00:00:00 +0100</published>
				<link>http://angryant.com/2013/12/23/Behave-2-2/</link>
			</item>
			
		
			
			<item>
				<title>ReView</title>
				<description>&lt;p&gt;Earlier this week ReView, a small Unity editor extension of mine, went live on the Unity Asset Store.&lt;/p&gt;
&lt;p&gt;The story behind it is simply that I was getting tired of adjusting layouts all the time &amp;#8211; as my tooling needs changed between authoring something in edit mode and testing it in play mode. The closest thing to something built-in addressing this would be the &amp;#8220;maximise on play&amp;#8221; feature. However that is basically only useful for demoing.&lt;/p&gt;
&lt;p&gt;So I wrote ReView. It lets you define two window layouts &amp;#8211; just like any other Unity window layout &amp;#8211; with the key difference being that you append &amp;#8220;-edit&amp;#8221; to one and &amp;#8220;-play&amp;#8221; to another. Once you switch to the one relevant for your current mode, ReView will then automatically switch to its counterpart when you enter or exit playmode.&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;&lt;a href=&quot;/tools&quot;&gt;More info and video&lt;/a&gt;&lt;/li&gt;
	&lt;li&gt;&lt;a href=&quot;http://u3d.as/5B5&quot;&gt;ReView on the Asset Store&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description>
				<published>2013-10-11 00:00:00 +0200</published>
				<link>http://angryant.com/2013/10/11/ReView/</link>
			</item>
			
		
			
			<item>
				<title>Behave 2.1</title>
				<description>&lt;p&gt;A little over a month ago &lt;a href=&quot;http://angryant.com/2013/08/25/Behave-2-0/&quot;&gt;I shipped Behave 2&lt;/a&gt; after having spent quite a while rewiring a lot of the core of the project. Today you get to see even more benefit of this work as already I am ready with version 2.1.&lt;/p&gt;
&lt;p&gt;I would like to take this opportunity to thank the members of the AngryAnt community who have been a great help in identifying bugs I had not found and properly corner those I had.&lt;/p&gt;
&lt;h2&gt;Contents&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;/resources/posts/2013-10-06-Behave-2-1/Parameter.png&quot; alt=&quot;&quot; /&gt;
While the full changelist will follow the body of this post as per usual, I would still like to draw out a few of the main changes in 2.1:&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;Auto complete on contexts, action names and string parameters makes for faster editing and helps guard against typos.&lt;/li&gt;
	&lt;li&gt;Partial library export and import-to-library makes moving trees between projects a breeze.&lt;/li&gt;
	&lt;li&gt;Parameterised trees increase tree re-usability even more by exposing select node settings as tree parameters, tweak-able per reference.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Onwards&lt;/h2&gt;
&lt;p&gt;While 2.1 brings great additions to the solid feature set of Behave 2, I am far from done.&lt;/p&gt;
&lt;p&gt;I realise that many currently still on the fence with regards to upgrading from 1.x have asked for more in terms of examples and demos and I will do my best to get to that as soon as possible.&lt;/p&gt;
&lt;p&gt;As always, I greatly appreciate any feedback you might have.&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;&lt;a href=&quot;http://u3d.as/5hA&quot;&gt;Behave 2 for Unity on the asset store&lt;/a&gt;.&lt;/li&gt;
	&lt;li&gt;&lt;a href=&quot;/behave/&quot;&gt;Project information&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;
Changelist:

2.1:
 - Added autocomplete on action names, string parameters and component contexts.
 - Added mandatory actions (present in library regardless of use in trees).
 - Added partial library export and library merging / import-to-library.
 - Added Behave stripping - leave behind only a very lean Behave runtime, for redistribution or super slim deploy.
 - Added parameterised trees - get even more re-use out of your trees by overriding context and variables per reference.
 - Behavioural change: Tree.Reset will now delay resetting tree variables until after complete component reset.
 - Behavioural change: Tree.Tick will no longer automatically reset the tree upon completion. This plays very well with:
 - Added Tree.TickContinuously (int iterationCap = 1024) - ticks tree till completion or iteration cap is reached.
 - Added BehaveResult Tree.Result (bool value) utility function to side with Tree.Invert (BehaveResult value).
 - Added int Debugging.Local.ConnectionCount property - facilitating debug behaviour dependent on Behave debugger presence.
 - Moved default install path from Assets/Behave to Assets/Plugins/Behave.
    - WARNING: See Readme.txt upgrade guide.
 - Fixed decorator control node removal resulting in detached control connection.
 - Fixed decorator incorrectly not forwarding the instant status of its child node.
 - Fixed scenario where agent classes would get reflected for handlers even if blueprint derived.
 - Fixed unexpected corner cases of bad library configuration failing compiles (now causing warnings or simply being ignored).
 - Fixed Behave window breaking down when exiting play mode after having been active there.
 - Fixes to context getting incorrectly reset in some scenarios.
 - Fixed copy / paste functionality missing in some text fields.
 - Lots of UI polish and minor fixes.


2.0:
 - New editor.
    - Unified all controls into one window.
    - Completely customised look - compatible with both Unity light and dark skin.
    - Keyboard authoring interface in addition to drag &amp;amp; drop.
 - Debugger upgrade.
    - Remote debugging.
    - Tick and reset.
    - &quot;Unplug&quot; for debugger-only control.
    - Breakpoints.
    - Action overrides - override the return values of specified actions.
 - Decorator rewrite.
    - Deprecated old decorator.
       - Still compiles, but cannot be added.
    - Decorators are now control-type components.
       - No specific decorator handlers on agents.
       - Control is achieved via third connection socket.
    - Two initial decorator types: Repeater and Interrupter.
 - Asset restructuring.
 	- No more collections - for nesting, use paths in tree names.
 	- New serialization format - see Readme.txt for upgrade instructions.
    - Collections are gone. Use Unix-style path names for tree organisation.
 - IAgent.Tick (Tree, bool) changed to IAgent.Tick (Tree)
	- Init calls can now only be handled explicitly
 - Full coverage online documentation and other community resources.
 - Countless fixes and polish items.

1.5:
 - Added Tree.TickActive - indicating if a tree is currently executing a tick or if it has completed evaluation.
 - In-tick tree reset requests now result in a reset at the end of tree evaluation rather than an immediate one.
 - Removed the legacy compatibility assembly (for compatibility with pre-1.2 assets) from the default distribution.
 - Fixed &quot;X must be instantiated using the ScriptableObject.CreateInstance method instead of new X&quot; warnings.

1.4:
 - Fixed decorator incorrectly initializing on every returning tick when tick handler returned Running.
 - Fixed debugger view dependency on active tree editor - causing reported null reference exception.
 - Fixed missing scrollbars on browser window.
 - Reduced logging noise from debug builds.
 - Agent blueprints can now be MonoBehaviour based.
 - Clarified wording on &quot;library not loaded&quot;.
 - Now handling reset a bit cleverer - potential performance boost.
 - Changed the default success criteria of Parallel components from SuccessOrFailure to Success.
 - Added &quot;instant&quot; flag to components. Components marked instant will affect sequences and selectors when moving between child nodes. When a child node marked &quot;instant&quot; completes, rather than waiting for the next tree tick to tick the following child node, the sequence or selector does it immediately.
 - The compiler progress bar returns.
 - Editing a Behave asset now focuses the asset browser last instead of the tree editor.
 - Behave can now be installed in any subfolder of Assets - provided its internal folder structure remains intact.
 - Compilation speed improvements.
 - Enabled references across collection borders.
 - Added Tree.DataSize - returning the number of bytes used by a tree instance. This is also displayed in the debugger window.

1.3:
 - Fixed priority selector init flag resetting.
 - Fixed reference handling on tree renaming and deletion.
 - Fixed references still pointing at old collection post collection duplication.
 - Fixed compilation of actions and decorators with non-integral float parameters.
 - Fixed GUI list behaviours.
 - Fixed passing context back and forth between referenced trees and referrer.
 - Fixed reordering connections not causing save state to be set.
 - Various GUI tweaks.
 - Runtime optimisations.
 - Enabled scrolling of the tree list in the debugger window.
 - Exposed Tree.ReflectForwards.
 - Added Tree.ResetForwards.
 - Added agent blueprints - connecting to agent handlers through virtual methods rather than reflected handlers.
 - Made connections selectable in the tree editor via the connection nub.
 - Moved connection managing from the inspector to the tree editor, where it is more visible and handy.
 - Added support for disabling connections - for faster, less destructive debugging.
 - Double-click reference component to jump to referenced tree.
 - Changed &quot;Cannot update unregistered tree&quot; handling from an exception to an error message. Still need more info.
 - Now showing string and float parameters in the tree editor if either is set.

1.2:
 - Fixed release building.
 - Added the priority selector, introducing the API points:
    - int IAgent.SelectTopPriority (Tree sender, params int[] IDs);
    - enum BL[LibraryName].PriorityType { PriorityName, ..., Unknown };
 - Added support for branch contexts, introducing the API points:
    - enum BL[LibraryName].ContextType { ContextName, ..., Unknown };
    - int Tree.ActiveContext { get; }
 - Changed IAgent interface:
    - Tick (bool init, Tree sender) -&amp;gt; Tick (Tree sender, bool init)
 - Added &quot;Select asset&quot; button to the standard inspector.
 - Interface polish.

1.1:
 - Made compatible with Unity 3.0 - including ensuring that the 2.5-2.6.1 bug preventing compilation on Windows is fixed on the Unity side.
 - UI tweaks and polish.
 - Added the option to have return values of nodes be inverted.
 - Fixed compiler bug when facing sequence or selector with only one child node.
 - Renamed Library.Tree -&amp;gt; Library.InstantiateTree.
 - Added Tree.Tick () and Tree.Reset () methods using the IAgent instance given at instantiation of the tree.
 - Removed the abstract Library class.
 - Changed generated library class:
    - Trees -&amp;gt; TreeType.
    - Actions -&amp;gt; ActionType.
    - Decorators -&amp;gt; DecoratorType.
    - Tree InstantiateTree (int, IAgent) -&amp;gt; static Tree InstantiateTree (TreeType, IAgent)
    - int TreeID (Tree) -&amp;gt; static TreeType Type (Tree)
    - bool IsAction (int) -&amp;gt; static bool IsAction (int)
    - bool IsDecorator (int) -&amp;gt; static bool IsDecorator (int)
 - Upped editor performance.
 - New asset structure change with automatic import of Behave 1.0 assets.
 - Changed action and decorator handlers. These are now the handlers mapped:
    - public BehaveResult Init[Name][Action/Decorator] (Tree sender, string stringParameter, float floatParameter, IAgent agent, object data);
    - public BehaveResult Tick[Name][Action/Decorator] (Tree sender, string stringParameter, float floatParameter, IAgent agent, object data);
    - public void Reset[Name][Action/Decorator] (Tree sender, string stringParameter, float floatParameter, IAgent agent, object data);
    - public BehaveResult Init[Name][Action/Decorator] (Tree sender);
    - public BehaveResult Tick[Name][Action/Decorator] (Tree sender);
    - public void Reset[Name][Action/Decorator] (Tree sender);
    - public BehaveResult [Name][Action/Decorator] {get; set;}
 - Added support for collection duplication.
 - Moved debug rendering into the editor with its own dedicated debugger window, including actor listing.
 - Debugger now renders active sub-trees as well.

1.0:
 - Lots o fixes for Unity 2.5 compatibility.
 - Closer editor integration with new UI.
    - Component bar.
    - Node inspection.
 - Runtime tree debugging.
 - Direct mapping of action and delegate handlers via reflection.
 - Kitty demo.

0.3b:
 - Various tweaks to the editor UI.
 - Optimised the compiler.
 - Fixed the following editor bugs from the bug list:
    - When the editor scrips are recompiled and when the user enters and exits play mode, running editors will loose references, causing undetermined behaviour.
    - When a compile fails, the Behave compiler is locked and unusable – requiring a unity relaunch.
 - Implemented the following wishlist items:
    - Behaviour tree decorators.
    - Stand-alone edition of the Behave editor.
    - Behaviour tree debugging features.

0.2b:
 - Made the demo project a whole lot more interesting.
 - Implemented the editor wish list item: Ability to move trees between collections.
 - Various tweaks to the editor UI.
 - Fixed a ton of bugs in the compiler.
 - Fixed the following editor bugs from the bug list:
    - Not able to delete collections from library.
    - Not able to delete trees from library.
    - Not able to rename collections from library.
    - Not able to rename trees from library.
    - Missing &quot;tree has been changed, save changes?&quot; dialog.

0.1b:
 - Some documentation is available.
 - Compiler is now creating sensible output.
 - A simple test tree and script using it is provided with the demo.
 - Documentation is linked directly from the unity help menu.
 - Less spamming of the log with debug information.

Pre-release:
 - Magic happened. Behave was born.
&lt;/pre&gt;</description>
				<published>2013-10-06 00:00:00 +0200</published>
				<link>http://angryant.com/2013/10/06/Behave-2-1/</link>
			</item>
			
		
			
			<item>
				<title>Behave 2.0</title>
				<description>&lt;p&gt;In 2010 the Unity Asset Store launched with an editor extension already live. That extension was Behave 1. Three years later, after way too long a pause, I have finally gotten around to releasing version 2.0 of Behave.&lt;/p&gt;
&lt;p&gt;As you might have noticed, especially lately, I have had quite a few things going on &amp;#8211; not the least of which is my recent exit from Unity Technologies and entry into freelancing. This all meant not a lot of time for Behave.&lt;/p&gt;
&lt;p&gt;So anyway, this is what I was doing when I was not writing that Unity Hacks blog post you were waiting for.&lt;/p&gt;
&lt;h2&gt;Behave&lt;/h2&gt;
&lt;p&gt;If you have no idea what Behave is and don&amp;#8217;t feel like dropping by the &lt;a href=&quot;/behave&quot;&gt;subsection on this site&lt;/a&gt; dedicated to it, here is how it is defined on the Asset Store:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Behave is a system for designing, integrating and running behaviour logic using Behaviour Trees. At its core Behave has a drag-drop designer and a highly effective and flexible compiled runtime.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;No funky runtime data formats or interpretation. Designer &amp;#8594; Compiler &amp;#8594; Your code.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;What is the use of a workflow extension without proper rapid iteration tools? Connect the visual debugger with break, step, reset, breakpoints and overrides directly to your project in the editor or on your target device.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;Update&lt;/strong&gt;: An introductory video to Behave 2 is now available:&lt;/p&gt;
&lt;p&gt;&lt;iframe width=&quot;600&quot; height=&quot;400&quot; src=&quot;//www.youtube.com/embed/vcsFjM-cw9k&quot; frameborder=&quot;0&quot; allowfullscreen&gt;&lt;/iframe&gt;&lt;/p&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2&gt;Future&lt;/h2&gt;
&lt;p&gt;Part of the challenge with any project is always to fight feature creep. This was very much also the case with Behave 2, so don&amp;#8217;t worry &amp;#8211; I have plenty of improvements to come. Not saying that this build is broken though &amp;#8211; go get it!&lt;/p&gt;
&lt;h2&gt;License&lt;/h2&gt;
&lt;p&gt;Unlike Behave 1, version 2 is a paid package. Aside from having gone freelance and needing a financial basis to keep up support for the software, this also had to be done as the Asset Store long ago banned the use of custom licenses.&lt;/p&gt;
&lt;p&gt;This, of-course posed a bit of a problem for Behave 1&amp;#8217;s default &amp;#8220;free if you show the splash&amp;#8221; license. Fortunately the Asset Store team members are merciful gods and I got a veeery long grace period to beat Behave into compliance.&lt;/p&gt;
&lt;p&gt;Included in the license is also access to a private community and internal support resources &amp;#8211; including the beta list.&lt;/p&gt;
&lt;h2&gt;Launch&lt;/h2&gt;
&lt;p&gt;For a limited time after launch, Behave 2 will be available at a flat discount of 50%. Additionally, if you happen to bump into me at Unite 2013 in Vancouver next week, you can slip me your business card and partake in the draw for one of &lt;strong&gt;three free Behave 2 licenses&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;If you already purchased a copy of Behave 2 and win a free copy, I&amp;#8217;ll refund you the purchase amount.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Update&lt;/strong&gt;: Details of the Unite license draw are available &lt;a href=&quot;/unite2013&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;Changes&lt;/h2&gt;
&lt;p&gt;So if you are a Behave 1 user and you are wondering what exactly is under the hood, I included the full Behave changelog below.&lt;/p&gt;
&lt;p&gt;Now you might go &amp;#8220;1.5? What the hell? Did I miss something?&amp;#8221;. No you did not. That version unfortunately did not ship, but was in stead rolled straight into 2.0. But hey, water and bridges, right? 2.0 is here baby!&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://u3d.as/5hA&quot;&gt;Behave 2 for Unity on the asset store&lt;/a&gt;.&lt;/p&gt;
&lt;pre&gt;Changelist:

2.0:
 - New editor.
	- Unified all controls into one window.
	- Completely customised look - compatible with both Unity light and dark skin.
	- Keyboard authoring interface in addition to drag &amp;amp; drop.
 - Debugger upgrade.
	- Remote debugging.
	- Tick and reset.
	- &quot;Unplug&quot; for debugger-only control.
	- Breakpoints.
	- Action overrides - override the return values of specified actions.
 - Decorator rewrite.
	- Deprecated old decorator.
	   - Still compiles, but cannot be added.
	- Decorators are now control-type components.
	   - No specific decorator handlers on agents.
	   - Control is achieved via third connection socket.
	- Two initial decorator types: Repeater and Interrupter.
 - Asset restructuring.
	- No more collections - for nesting, use paths in tree names.
	- New serialization format - see Readme.txt for upgrade instructions.
	- Collections are gone. Use Unix-style path names for tree organisation.
 - IAgent.Tick (Tree, bool) changed to IAgent.Tick (Tree)
	- Init calls can now only be handled explicitly
 - Full coverage online documentation and other community resources.
 - Countless fixes and polish items.

1.5:
 - Added Tree.TickActive - indicating if a tree is currently executing a tick or if it has completed evaluation.
 - In-tick tree reset requests now result in a reset at the end of tree evaluation rather than an immediate one.
 - Removed the legacy compatibility assembly (for compatibility with pre-1.2 assets) from the default distribution.
 - Fixed &quot;X must be instantiated using the ScriptableObject.CreateInstance method instead of new X&quot; warnings.

1.4:
 - Fixed decorator incorrectly initializing on every returning tick when tick handler returned Running.
 - Fixed debugger view dependency on active tree editor - causing reported null reference exception.
 - Fixed missing scrollbars on browser window.
 - Reduced logging noise from debug builds.
 - Agent blueprints can now be MonoBehaviour based.
 - Clarified wording on &quot;library not loaded&quot;.
 - Now handling reset a bit cleverer - potential performance boost.
 - Changed the default success criteria of Parallel components from SuccessOrFailure to Success.
 - Added &quot;instant&quot; flag to components. Components marked instant will affect sequences and selectors when moving between child nodes. When a child node marked &quot;instant&quot; completes, rather than waiting for the next tree tick to tick the following child node, the sequence or selector does it immediately.
 - The compiler progress bar returns.
 - Editing a Behave asset now focuses the asset browser last instead of the tree editor.
 - Behave can now be installed in any subfolder of Assets - provided its internal folder structure remains intact.
 - Compilation speed improvements.
 - Enabled references across collection borders.
 - Added Tree.DataSize - returning the number of bytes used by a tree instance. This is also displayed in the debugger window.

1.3:
 - Fixed priority selector init flag resetting.
 - Fixed reference handling on tree renaming and deletion.
 - Fixed references still pointing at old collection post collection duplication.
 - Fixed compilation of actions and decorators with non-integral float parameters.
 - Fixed GUI list behaviours.
 - Fixed passing context back and forth between referenced trees and referrer.
 - Fixed reordering connections not causing save state to be set.
 - Various GUI tweaks.
 - Runtime optimisations.
 - Enabled scrolling of the tree list in the debugger window.
 - Exposed Tree.ReflectForwards.
 - Added Tree.ResetForwards.
 - Added agent blueprints - connecting to agent handlers through virtual methods rather than reflected handlers.
 - Made connections selectable in the tree editor via the connection nub.
 - Moved connection managing from the inspector to the tree editor, where it is more visible and handy.
 - Added support for disabling connections - for faster, less destructive debugging.
 - Double-click reference component to jump to referenced tree.
 - Changed &quot;Cannot update unregistered tree&quot; handling from an exception to an error message. Still need more info.
 - Now showing string and float parameters in the tree editor if either is set.

1.2:
 - Fixed release building.
 - Added the priority selector, introducing the API points:
	- int IAgent.SelectTopPriority (Tree sender, params int[] IDs);
	- enum BL[LibraryName].PriorityType { PriorityName, ..., Unknown };
 - Added support for branch contexts, introducing the API points:
	- enum BL[LibraryName].ContextType { ContextName, ..., Unknown };
	- int Tree.ActiveContext { get; }
 - Changed IAgent interface:
	- Tick (bool init, Tree sender) -&amp;gt; Tick (Tree sender, bool init)
 - Added &quot;Select asset&quot; button to the standard inspector.
 - Interface polish.

1.1:
 - Made compatible with Unity 3.0 - including ensuring that the 2.5-2.6.1 bug preventing compilation on Windows is fixed on the Unity side.
 - UI tweaks and polish.
 - Added the option to have return values of nodes be inverted.
 - Fixed compiler bug when facing sequence or selector with only one child node.
 - Renamed Library.Tree -&amp;gt; Library.InstantiateTree.
 - Added Tree.Tick () and Tree.Reset () methods using the IAgent instance given at instantiation of the tree.
 - Removed the abstract Library class.
 - Changed generated library class:
	- Trees -&amp;gt; TreeType.
	- Actions -&amp;gt; ActionType.
	- Decorators -&amp;gt; DecoratorType.
	- Tree InstantiateTree (int, IAgent) -&amp;gt; static Tree InstantiateTree (TreeType, IAgent)
	- int TreeID (Tree) -&amp;gt; static TreeType Type (Tree)
	- bool IsAction (int) -&amp;gt; static bool IsAction (int)
	- bool IsDecorator (int) -&amp;gt; static bool IsDecorator (int)
 - Upped editor performance.
 - New asset structure change with automatic import of Behave 1.0 assets.
 - Changed action and decorator handlers. These are now the handlers mapped:
	- public BehaveResult Init[Name][Action/Decorator] (Tree sender, string stringParameter, float floatParameter, IAgent agent, object data);
	- public BehaveResult Tick[Name][Action/Decorator] (Tree sender, string stringParameter, float floatParameter, IAgent agent, object data);
	- public void Reset[Name][Action/Decorator] (Tree sender, string stringParameter, float floatParameter, IAgent agent, object data);
	- public BehaveResult Init[Name][Action/Decorator] (Tree sender);
	- public BehaveResult Tick[Name][Action/Decorator] (Tree sender);
	- public void Reset[Name][Action/Decorator] (Tree sender);
	- public BehaveResult [Name][Action/Decorator] {get; set;}
 - Added support for collection duplication.
 - Moved debug rendering into the editor with its own dedicated debugger window, including actor listing.
 - Debugger now renders active sub-trees as well.

1.0:
 - Lots o fixes for Unity 2.5 compatibility.
 - Closer editor integration with new UI.
	- Component bar.
	- Node inspection.
 - Runtime tree debugging.
 - Direct mapping of action and delegate handlers via reflection.
 - Kitty demo.

0.3b:
 - Various tweaks to the editor UI.
 - Optimised the compiler.
 - Fixed the following editor bugs from the bug list:
	- When the editor scrips are recompiled and when the user enters and exits play mode, running editors will loose references, causing undetermined behaviour.
	- When a compile fails, the Behave compiler is locked and unusable – requiring a unity relaunch.
 - Implemented the following wishlist items:
	- Behaviour tree decorators.
	- Stand-alone edition of the Behave editor.
	- Behaviour tree debugging features.

0.2b:
 - Made the demo project a whole lot more interesting.
 - Implemented the editor wish list item: Ability to move trees between collections.
 - Various tweaks to the editor UI.
 - Fixed a ton of bugs in the compiler.
 - Fixed the following editor bugs from the bug list:
	- Not able to delete collections from library.
	- Not able to delete trees from library.
	- Not able to rename collections from library.
	- Not able to rename trees from library.
	- Missing &quot;tree has been changed, save changes?&quot; dialog.

0.1b:
 - Some documentation is available.
 - Compiler is now creating sensible output.
 - A simple test tree and script using it is provided with the demo.
 - Documentation is linked directly from the unity help menu.
 - Less spamming of the log with debug information.

Pre-release:
 - Magic happened. Behave was born.&lt;/pre&gt;</description>
				<published>2013-08-25 00:00:00 +0200</published>
				<link>http://angryant.com/2013/08/25/Behave-2-0/</link>
			</item>
			
		
			
			<item>
				<title>Unity Hacks: Dual sticks</title>
				<description>&lt;p&gt;This is my third post in what looks like is going to turn into &lt;a href=&quot;http://angryant.com/2013/07/19/Unity-Hacks-Touch-gestures/&quot;&gt;a series&lt;/a&gt;, examining parts of the example project I provided for the Unity Hacks presentation &amp;#8211; delivered at a couple of the Unite conferences this year.&lt;/p&gt;
&lt;p&gt;You can find the project and a recording of the presentation in the &lt;a href=&quot;/videos&quot;&gt;videos&lt;/a&gt; section of this site.&lt;/p&gt;
&lt;h1&gt;DualControls&lt;/h1&gt;
&lt;p&gt;The &lt;a href=&quot;https://github.com/AngryAnt/UnityHacks/blob/master/Assets/Standard%20Assets/Input/DualControls.cs&quot;&gt;DualControls&lt;/a&gt; interface has a very straight forward purpose: Provide a 2 &amp;#215; 2 axis input interface across platforms and compatible units. This is exposed via the DualControls.Left and DualControls.Right accessors &amp;#8211; each returning a Vector2.&lt;/p&gt;
&lt;p&gt;Supported out of the box is:&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;&lt;span class=&quot;caps&quot;&gt;WASD&lt;/span&gt; + mouse.&lt;/li&gt;
	&lt;li&gt;Xbox360 controller (windows-only)&lt;/li&gt;
	&lt;li&gt;ps3 controller (OS X-only)&lt;/li&gt;
	&lt;li&gt;Shadowgun-style touch controls (left/right screen split)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;However abstraction is relaxed enough that virtual sticks or alternative input like the leap motion could be added fairly easily (assuming you have a means of capturing that input data in the first place).&lt;/p&gt;
&lt;h1&gt;Controllers&lt;/h1&gt;
&lt;p&gt;So controllers are not exactly nicely wrapped up in the current version of Unity. Which ungodly hack did I have to apply to get them to play along with just working out of the box in an easily installable package? It is actually not so bad. However I had to concede to some compromises up front. Basically when it comes to joysticks and controllers, you generally have two complications: the hardware itself and the driver.&lt;/p&gt;
&lt;p&gt;So? What is so bad about that? Well, in a perfect world you had one driver for each controller type or at least all the drivers for the same hardware would map the buttons and axes in the same way, right?&lt;/p&gt;
&lt;p&gt;Enter: This world. For every controller you always have at least two drivers set up differently: One for OS X and one for Windows (the Linux one often being based on the Windows one as I understand it). Why would anyone be content with just two drivers though? There exists a good number of different packages and open source solutions, vendor and OS provided drivers for the different controllers.&lt;/p&gt;
&lt;p&gt;The way these are differentiated in the Unity runtime is via the joystick name string &amp;#8211; as accessible via Input.GetJoystickNames.&lt;/p&gt;
&lt;p&gt;This is what &lt;a href=&quot;https://github.com/AngryAnt/UnityHacks/blob/master/Assets/Standard%20Assets/Input/DualControls.cs&quot;&gt;DualControls&lt;/a&gt; checks for in its Update handler. If a new joystick is found connected, it runs the name by the controller wiring and activates the appropriate controller (optionally if accepted by a callback).&lt;/p&gt;
&lt;p&gt;Per default I have compromised and only provided wiring for the Xbox360 controller on Windows and the ps3 controller on OS X. This particular configuration stems from the fact that those OS&amp;#8217;es ship with a pre-installed default driver for those controllers.&lt;/p&gt;
&lt;p&gt;Microsoft clearly should support their own hardware and I&amp;#8217;m assuming that Apple just supports the ps3 controller because it&amp;#8217;s hardware from a direct Microsoft competitor.&lt;/p&gt;
&lt;p&gt;However, again, the abstraction is loose enough that if you want to, you should be able to add support for more controllers fairly easily. See the end of the &lt;a href=&quot;https://github.com/AngryAnt/UnityHacks/blob/master/Assets/Standard%20Assets/Input/Controllers.cs&quot;&gt;Controllers.cs&lt;/a&gt; script for that.&lt;/p&gt;
&lt;p&gt;Oh, but I almost forgot the hack: As I am using the standard Unity Input &lt;span class=&quot;caps&quot;&gt;API&lt;/span&gt; for this, the input manager needs configuring, right? So with no &lt;span class=&quot;caps&quot;&gt;API&lt;/span&gt; for it, how do you go about doing that for a package?&lt;/p&gt;
&lt;p&gt;You use the AssetDatabase &lt;span class=&quot;caps&quot;&gt;API&lt;/span&gt; to load ProjectSettings/InputManager.asset and then the ScriptableObject &lt;span class=&quot;caps&quot;&gt;API&lt;/span&gt; to modify it.
&lt;script src=&#39;https://gist.github.com/6151366.js?file=&#39;&gt;&lt;/script&gt;&lt;div&gt;&lt;noscript&gt;&lt;pre&gt;&lt;code&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/noscript&gt;&lt;/div&gt;&lt;/p&gt;
&lt;p&gt;I hope you find this useful. For more details, these are the Unity Hacks scripts related to this post:&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;&lt;a href=&quot;https://github.com/AngryAnt/UnityHacks/blob/master/Assets/Standard%20Assets/Input/DualControls.cs&quot;&gt;DualControls.cs&lt;/a&gt;&lt;/li&gt;
	&lt;li&gt;&lt;a href=&quot;https://github.com/AngryAnt/UnityHacks/blob/master/Assets/Standard%20Assets/Input/DualControls.Stick.cs&quot;&gt;DualControls.Stick.cs&lt;/a&gt;&lt;/li&gt;
	&lt;li&gt;&lt;a href=&quot;https://github.com/AngryAnt/UnityHacks/blob/master/Assets/Standard%20Assets/Input/Controllers.cs&quot;&gt;Controllers.cs&lt;/a&gt;&lt;/li&gt;
	&lt;li&gt;&lt;a href=&quot;https://github.com/AngryAnt/UnityHacks/blob/master/Assets/Standard%20Assets/Input/ControllerInput.cs&quot;&gt;ControllerInput.cs&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;


</description>
				<published>2013-08-04 00:00:00 +0200</published>
				<link>http://angryant.com/2013/08/04/Unity-Hacks-Dual-sticks/</link>
			</item>
			
		
			
			<item>
				<title>Unity Hacks: Cameras</title>
				<description>&lt;p&gt;In my &lt;a href=&quot;http://angryant.com/2013/07/19/Unity-Hacks-Touch-gestures/&quot;&gt;effort to pick apart&lt;/a&gt; the &amp;#8220;Unity Hacks&amp;#8221; project as made available, along with a recording of the presentation, in the &lt;a href=&quot;/videos&quot;&gt;videos&lt;/a&gt; section, I now focus on the camera system.&lt;/p&gt;
&lt;h1&gt;Overview&lt;/h1&gt;
&lt;p&gt;Like the other new components I was preparing for the new standard assets, a key part of this setup is modularity and versatility. This is why I from the start chose to have camera handling values maintained via the transform tree &amp;#8211; as opposed to maintaining internal values to overwrite the transform values when updated.&lt;/p&gt;
&lt;p&gt;This way, not only can camera logic be broken down into several components which can be optional or replaced, but co-operation between the camera system, animations and any other systems which could apply relative transformation, is much easier.&lt;/p&gt;
&lt;p&gt;As this approach would be placing a certain requirement on the transform tree structure surrounding the camera in any case, I opted to go for greatest amount of possible detail vs. smallest impact. The structure therefore requires a three layers deep transform tree.&lt;/p&gt;
&lt;p&gt;The root of the tree is designated the horizontal hinge. It takes care of movement in all three dimensions as well as rotation on the horizontal plane. The immediate child of this transform is referred to as the vertical hinge. This transform is expected to not move and will have its position reset every frame to enforce this. In stead, the vertical hinge is only responsible for rotation on the vertical plane.&lt;/p&gt;
&lt;p&gt;The final transform, the child of the vertical hinge, is expected to not rotate and only move on its relative z-axis. This effectively makes it the zoom component of the rig. The GameObject of this transform is the one holding the camera component.&lt;/p&gt;
&lt;h1&gt;DualHingeCamera&lt;/h1&gt;
&lt;p&gt;Maintaining and abstracting this setup is the &lt;a href=&quot;https://github.com/AngryAnt/UnityHacks/blob/master/Assets/Standard%20Assets/Camera/DualHingeCamera.cs&quot;&gt;DualHingeCamera&lt;/a&gt; component. With reference to the different transforms of the rig, this component maintains the setup by apply three targets: targetOffset, targetHorizontalRotation and targetVerticalRotation. These are set by controller scripts and applied via constrained speed and offset variables.&lt;/p&gt;
&lt;p&gt;Vertical rotation is clamped and damped by the verticalSpan animation curve variable. As explained in the presentation, the time value of the most extreme animation keys specify the vertical angles (relative to a vector pointing backwards from the rig root) at which vertical rotation is clamped.&lt;/p&gt;
&lt;p&gt;The height of the curve at any point specifies the scale of the update speed &amp;#8211; as the camera moves through that angle and further towards the end of the half of the curve it is on. As in: If the angle is above the middle of the vertical span and the camera is moving further up, speed is scaled according to the curve, but if it is moving down then no scale is applied. The inverse if of-course true as well. The effect, assuming the curve is not flat, is a smooth limit rather than a hard clamp.&lt;/p&gt;
&lt;h1&gt;Control&lt;/h1&gt;
&lt;p&gt;The base for any of the example camera behaviours supplied with the project is the &lt;a href=&quot;https://github.com/AngryAnt/UnityHacks/blob/master/Assets/Standard%20Assets/Camera/CameraBehaviour.cs&quot;&gt;CameraBehaviour&lt;/a&gt; component. This supplies wrapping of access to the DualHingeCamera, as well as a bit of default handling &amp;#8211; such as automatically updating the camera activity tracking when the camera moves. It also offers up the MoveCamera method as a common interface for input scripts to apply movement instructions.&lt;/p&gt;
&lt;p&gt;One of the most simple examples of a camera behaviour is the &lt;a href=&quot;https://github.com/AngryAnt/UnityHacks/blob/master/Assets/Standard%20Assets/Camera/OrbitCamera.cs&quot;&gt;OrbitCamera&lt;/a&gt;. This camera simply takes the movement instructions (a Vector2) and apply them to the target horizontal and vertical rotation. The result is the familiar behaviour of being able to rotate around a subject, while rotating up and down within the clamped span.&lt;/p&gt;
&lt;p&gt;There are several more camera behaviours in the project (which you should take a look at) and they are demonstrated in an example scene as well as within the presentation. However as a last example, I want to point out the &lt;a href=&quot;https://github.com/AngryAnt/UnityHacks/blob/master/Assets/Standard%20Assets/Camera/TravelCamera.cs&quot;&gt;TravelCamera&lt;/a&gt; component. Unlike the others, this does not inherit from CameraBehaviour &amp;#8211; nor does it directly affect its rotation or position. In stead, it holds a simple piece of logic which enables and disables other behaviours, based on input activity. The result should be a behaviour somewhere between that seen in Journey and that of the Assassins Creed games.&lt;/p&gt;
&lt;p&gt;I tried to keep this post short, but I hope you still find this useful and decide to build on the system. In any case, here are direct links to the resources covered in the post:&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;&lt;a href=&quot;https://github.com/AngryAnt/UnityHacks/blob/master/Assets/Standard%20Assets/Camera/DualHingeCamera.cs&quot;&gt;DualHingeCamera.cs&lt;/a&gt;&lt;/li&gt;
	&lt;li&gt;&lt;a href=&quot;https://github.com/AngryAnt/UnityHacks/blob/master/Assets/Standard%20Assets/Camera/CameraBehaviour.cs&quot;&gt;CameraBehaviour.cs&lt;/a&gt;&lt;/li&gt;
	&lt;li&gt;&lt;a href=&quot;https://github.com/AngryAnt/UnityHacks/blob/master/Assets/Standard%20Assets/Camera/OrbitCamera.cs&quot;&gt;OrbitCamera.cs&lt;/a&gt;&lt;/li&gt;
	&lt;li&gt;&lt;a href=&quot;https://github.com/AngryAnt/UnityHacks/blob/master/Assets/Standard%20Assets/Camera/TravelCamera.cs&quot;&gt;TravelCamera.cs&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;


</description>
				<published>2013-07-28 00:00:00 +0200</published>
				<link>http://angryant.com/2013/07/28/Unity-Hacks-Cameras/</link>
			</item>
			
		
			
			<item>
				<title>Unity Hacks: Touch gestures</title>
				<description>&lt;p&gt;So earlier this month I could finally push the Unity Hacks example code and slide show project &lt;a href=&quot;https://github.com/AngryAnt/UnityHacks/&quot;&gt;live&lt;/a&gt; &amp;#8211; after one of the &lt;a href=&quot;/videos&quot;&gt;videos&lt;/a&gt; of the presentation was pushed live.&lt;/p&gt;
&lt;p&gt;The project is a pretty big treasure trove of handy scripts though and I didn&amp;#8217;t like just tossing it out there and let people pick it apart on their own(feel free to go excavating if you learn better that way though). Therefore I plan for the next couple of posts here to cover various bits and bops from that project.&lt;/p&gt;
&lt;p&gt;Note that a bunch of these scripts &amp;#8211; for instance the one I cover today &amp;#8211; was at the time I was still at Unity Technologies slated for the new Standard Assets shipped with Unity. Since I left, I obviously can&amp;#8217;t say if or when these are shipped and in which form. What&amp;#8217;s in the Unity Hacks project is pretty much the last iteration I did on them before leaving.&lt;/p&gt;
&lt;h1&gt;TouchGestures.cs&lt;/h1&gt;
&lt;p&gt;The purpose of this component is to facilitate easy handling of common gestures on touch enabled devices. With one instance of the component placed in a scene, you can specify which gestures to track, some key measuring caps with sensible defaults and a list of MonoBehaviours interested in receiving notification when a gesture has been detected.&lt;/p&gt;
&lt;p&gt;An example of how to handle gesture tracking event can be found in this particular snippet from the presentation Control.cs script from Unity Hacks:
&lt;script src=&#39;https://gist.github.com/6039082.js?file=&#39;&gt;&lt;/script&gt;&lt;div&gt;&lt;noscript&gt;&lt;pre&gt;&lt;code&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/noscript&gt;&lt;/div&gt;&lt;/p&gt;
&lt;p&gt;This handler responds to single swipes, checking for strictly left or right swipes, handling them by progressing to the next slide/build step or jumping to the previous slide.&lt;/p&gt;
&lt;p&gt;Great, so what do the different configuration values mean? First, let&amp;#8217;s take a look at the tracking clamps:&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;maxDuration: If a tracked touch remains active for longer than this time, it is no longer considered as part of a gesture. This avoids misinterpreting drags or virtual joysticks.&lt;/li&gt;
	&lt;li&gt;min[Pinch/Swipe]ScreenTravel: How much of the normalized screen size should a pinch or a swipe travel before it is considered valid? This avoids misinterpreting taps as mini pinches or swipes.&lt;/li&gt;
	&lt;li&gt;maxTapScreenTravel: What is the maximum normalized screen movement a tap gesture can have before it is no longer considered a tap?&lt;/li&gt;
	&lt;li&gt;maxTapDuration: For how long can a tracked touch be live before it is no longer considered a tap?&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The last elements are somewhat less finicky and tweak happy, though the tracking clamps should have sensible default values:&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;receivers: The list of MonoBehaviours interested in receiving a callback when a gesture has been identified.&lt;/li&gt;
	&lt;li&gt;trackingMask: This is a bitmask identifying which gestures you are interested in tracking. If you only need to deal with swipes, there is no need to spend time tracking any other gestures. Note that in order for this field to be set correctly, it is important that the custom inspector for the TouchGestures component is used.&lt;/li&gt;
	&lt;li&gt;trackMultiple: Should the gesture tracker allow multiple gestures to occur at the same time? Like a pinch and a swipe in different ends of the screen.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;And that is about it! You should have what you need to start using the TouchGestures component. Hopefully you will find it useful.&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;&lt;a href=&quot;https://github.com/AngryAnt/UnityHacks/blob/master/Assets/Standard%20Assets/Input/TouchGestures.cs&quot;&gt;TouchGestures.cs&lt;/a&gt;&lt;/li&gt;
	&lt;li&gt;&lt;a href=&quot;https://github.com/AngryAnt/UnityHacks/blob/master/Assets/Standard%20Assets/Editor/TouchGesturesInspector.cs&quot;&gt;TouchGesturesInspector.cs&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description>
				<published>2013-07-19 00:00:00 +0200</published>
				<link>http://angryant.com/2013/07/19/Unity-Hacks-Touch-gestures/</link>
			</item>
			
		
			
			<item>
				<title>OnRenderTextureGUI</title>
				<description>&lt;p&gt;Have you ever wanted to apply a full-screen effect to your &lt;span class=&quot;caps&quot;&gt;GUI&lt;/span&gt; without having to completely restructuring the way you set up your OnGUI structure? Or how about rendering text and &lt;span class=&quot;caps&quot;&gt;GUI&lt;/span&gt; controls onto in-scene virtual screens and objects? Yea me too.&lt;/p&gt;
&lt;p&gt;So a couple of years ago I did a friday project investigating the possibility of a setup like this. What I wanted was a Doom 3 &amp;#8211; style in-game numpad, responding to mouse clicks. Unfortunately I couldn&amp;#8217;t get there 100% and in a nice and straight-forward way, so I abandoned it with no further time spent.&lt;/p&gt;
&lt;p&gt;The specific problem was that while I could get my &lt;span class=&quot;caps&quot;&gt;GUI&lt;/span&gt; to render to the object just fine, the &lt;span class=&quot;caps&quot;&gt;GUI&lt;/span&gt; system had no way of injecting events or modifying existing ones. This meant that if I wanted &lt;span class=&quot;caps&quot;&gt;GUI&lt;/span&gt; to respond to events, I would have to bypass the &lt;span class=&quot;caps&quot;&gt;GUI&lt;/span&gt; event system and effectively rewrite the basic &lt;span class=&quot;caps&quot;&gt;GUI&lt;/span&gt; controls. That failed my &amp;#8220;nice and straight-forward&amp;#8221; requirement.&lt;/p&gt;
&lt;p&gt;However a while later, I came across a similar need: I had a project where the screen was warped slightly fish-eye, to give an impression of an old-school &lt;span class=&quot;caps&quot;&gt;CRT&lt;/span&gt; display. It looked great, except the &lt;span class=&quot;caps&quot;&gt;GUI&lt;/span&gt; was just rendered on top of everything &amp;#8211; as per usual &amp;#8211; with no warping. Since the &lt;span class=&quot;caps&quot;&gt;GUI&lt;/span&gt; was non-interactive, there was no down-side to using the approach I had come up with before to include the &lt;span class=&quot;caps&quot;&gt;GUI&lt;/span&gt; in the full-screen effect rendering.&lt;/p&gt;
&lt;p&gt;It was a snap to apply, I had no required changes to my general OnGUI structure and the result looked great. This setup also came in handy when I was working with the Oculus Rift &amp;#8211; rendering the &lt;span class=&quot;caps&quot;&gt;GUI&lt;/span&gt; on a plane, rendered always on top, in front of the Oculus cameras.&lt;/p&gt;
&lt;p&gt;So what is the idea then? Well it is quite straight forward: OnGUI is invoked multiple times each frame (once per event) &amp;#8211; at least twice &amp;#8211; unless layouting has been disabled on the MonoBehaviour. The last event of the frame is the repaint event. In this, all resolved controls render to the active context. Which fortunately can be set by render textures.&lt;/p&gt;
&lt;p&gt;The trick therefore becomes:
&lt;script src=&#39;https://gist.github.com/5984299.js?file=&#39;&gt;&lt;/script&gt;&lt;div&gt;&lt;noscript&gt;&lt;pre&gt;&lt;code&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/noscript&gt;&lt;/div&gt;&lt;/p&gt;
&lt;p&gt;Remember that this is not immediately useful if you need interactive &lt;span class=&quot;caps&quot;&gt;GUI&lt;/span&gt; as this would require work to handle input gathered from the regular UnityEngine.Input &lt;span class=&quot;caps&quot;&gt;API&lt;/span&gt;. Nonetheless it will give you for instance a scrolling screen of text on an in-game monitor.&lt;/p&gt;
&lt;p&gt;I hope you find it useful!&lt;/p&gt;</description>
				<published>2013-07-17 00:00:00 +0200</published>
				<link>http://angryant.com/2013/07/17/OnRenderTextureGUI/</link>
			</item>
			
		
			
			<item>
				<title>Unite 13 video "Unity Hacks" available</title>
				<description>&lt;p&gt;The &amp;#8220;Unity Hacks&amp;#8221; presentation, containing a good chunk of practical tips &amp;amp; tricks and example code, I did for Unite 13 Korea, Japan, China and Nordic is now available as video and presentation/examples download. The specific video recording is the one from Unite Japan.&lt;/p&gt;
&lt;p&gt;Find link to video, presentation and examples in the &lt;a href=&quot;/videos&quot;&gt;videos&lt;/a&gt; section.&lt;/p&gt;</description>
				<published>2013-07-05 00:00:00 +0200</published>
				<link>http://angryant.com/2013/07/05/Unite-13-video-Unity-Hacks-available/</link>
			</item>
			
		
			
			<item>
				<title>The implicit local network interface</title>
				<description>&lt;p&gt;I foolishly promised I would resume my posting of tech stuff on this blog, so I suppose I better own up to that.&lt;/p&gt;
&lt;h1&gt;Story time&lt;/h1&gt;
&lt;p&gt;You are playing some amazingly addictive game on your iOS device when commuting home. Let&amp;#8217;s say it&amp;#8217;s a Mario clone.&lt;/p&gt;
&lt;p&gt;As you arrive home, you want more of this gaming goodness. So you switch on your television and use AirPlay to continue the game on your TV, controls on your iOS device, via your Apple TV or other AirServer hosting, TV connected, device.&lt;/p&gt;
&lt;p&gt;Now your good friend Bob comes by (you forgot to lock the door, so he walks straight in). Obviously this game is too good to put down, so in stead you instruct Bob to buy a copy of it. Bob pulls out his android phone, jumps on your wifi, downloads the game and starts playing.&lt;/p&gt;
&lt;p&gt;At one point in Bobs game he sees this funky spinning portal in the level and opts to tap it. And poof! Bobs character is sucked into your game on the TV.&lt;/p&gt;
&lt;p&gt;Unfortunately Bob is a terrible player of this game and ruins your score, but it was pretty cool to try this game in multiplayer mode.&lt;/p&gt;
&lt;h1&gt;Do want!&lt;/h1&gt;
&lt;p&gt;The above scenario may sound complex to set up, but like so many other cases, it is just a nice combination of simpler bits. So let&amp;#8217;s look into how we enable something like this in our (Unity based) game.&lt;/p&gt;
&lt;p&gt;First up, AirPlay support was recently added to Unity and I posted &lt;a href=&quot;https://gist.github.com/AngryAnt/5160204&quot;&gt;a gist&lt;/a&gt; to help people get started with it.&lt;/p&gt;
&lt;p&gt;Secondly, we need to host a network game pretty much all the time, so that others may join any ongoing session at any time. Of-course you might want to provide an opt-in/out setting for networked play in your game. Just remember that we are only enabling this feature for local network play &amp;#8211; not internet play like Journey did it.&lt;/p&gt;
&lt;p&gt;For information on how to easily set up this network game, see the talk I did at Unite 12 in Amsterdam: &amp;#8220;Unity, Network Code, and You&amp;#8221; &amp;#8211; the example provided for the built-in networking is quite relevant to the above example. You can find the talk linked from the &lt;a href=&quot;/videos/&quot;&gt;video&lt;/a&gt; section of this site.&lt;/p&gt;
&lt;p&gt;So with those parts in place, we just need a bit of glue &amp;#8211; namely the broadcasting of games on your local network. This gist deals with just that:
&lt;script src=&#39;https://gist.github.com/5730611.js?file=Broadcaster.cs&#39;&gt;&lt;/script&gt;&lt;div&gt;&lt;noscript&gt;&lt;pre&gt;&lt;code&gt;if (m_BroadcastTimer == null)
// Setup broadcast of hosting service
{
	m_BroadcastSocket = new Socket (AddressFamily.InterNetwork, SocketType.Dgram, ProtocolType.Udp);&lt;/p&gt;
&lt;p&gt;try
	{
		IPAddress broadcastGroup = IPAddress.Parse (kBroadcastGroup);&lt;/p&gt;
&lt;p&gt;m_BroadcastSocket.SetSocketOption (
			SocketOptionLevel.IP,
			SocketOptionName.AddMembership,
			new MulticastOption (broadcastGroup)
		);&lt;/p&gt;
&lt;p&gt;m_BroadcastSocket.SetSocketOption (
			SocketOptionLevel.IP,
			SocketOptionName.MulticastTimeToLive,
			1
		);&lt;/p&gt;
&lt;p&gt;m_BroadcastSocket.Connect (new IPEndPoint (broadcastGroup, kBroadcastPort));
	}
	catch (Exception e)
	{
		Debug.LogError (string.Format (
			&amp;quot;Exception when attempting to set up service broadcast ({0}:{1}): {2}&amp;quot;,
			kBroadcastGroup,
			kBroadcastPort,
			e
		));&lt;/p&gt;
&lt;p&gt;return false;
	}&lt;/p&gt;
&lt;p&gt;m_BroadcastTimer = new Timer (kBroadcastDelay);&lt;/p&gt;
&lt;p&gt;m_BroadcastTimer.Elapsed += new ElapsedEventHandler (
		(object s, ElapsedEventArgs e) =&amp;gt;
		{
			m_BroadcastSocket.Send (GetBroadcastBytes ());
		}
	);
	m_BroadcastTimer.Enabled = true;
}&lt;/p&gt;
&lt;p&gt;return true;&lt;/p&gt;
&lt;p&gt;// &amp;#8230;&lt;/p&gt;
&lt;p&gt;byte[] GetBroadcastBytes ()
{
	/*
		Return byte array containing IP and port of our host socket plus meta data
		such as current level and perhaps location (for portal placement)
	*/
}&lt;/code&gt;&lt;/pre&gt;&lt;/noscript&gt;&lt;/div&gt;&lt;/p&gt;
&lt;p&gt;Let&amp;#8217;s go over the interface for this gist:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;kBroadcastGroup&lt;/strong&gt; and &lt;strong&gt;kBroadcastPort&lt;/strong&gt; are effectively shared keys we use to facilitate broadcasting communication between game instances. Broadcasting happens by way of multi-casting &amp;#8211; an IP protocol feature allowing peers to send one package to multiple unidentified receivers. This is why our shared keys are in the form of an IP address and a port, though their value is completely arbitrary &amp;#8211; all that matters is that both broadcaster and receiver use the same keys.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;m_BroadcastTimer&lt;/strong&gt; and &lt;strong&gt;kBroadcastDelay&lt;/strong&gt; control how often &lt;strong&gt;m_BroadcastSocket&lt;/strong&gt; will send out the broadcast message generated by &lt;strong&gt;GetBroadcastBytes&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;This covers the transmission part of the broadcast functionality. The following gist deals with receiving the broadcast message:&lt;/p&gt;
&lt;script src=&#39;https://gist.github.com/5730611.js?file=Seeker.cs&#39;&gt;&lt;/script&gt;&lt;div&gt;&lt;noscript&gt;&lt;pre&gt;&lt;code&gt;if (m_SeekerSocket == null)
{
	m_SeekerSocket = new Socket (AddressFamily.InterNetwork, SocketType.Dgram, ProtocolType.Udp);

	try
	{
		m_SeekerSocket.Bind (new IPEndPoint (IPAddress.Any, kBroadcastPort));

		IPAddress broadcastGroup = IPAddress.Parse (kBroadcastGroup);

		m_SeekerSocket.SetSocketOption (
			SocketOptionLevel.IP,
			SocketOptionName.AddMembership,
			new MulticastOption (broadcastGroup, IPAddress.Any)
		);

		ReadBroadcasts ();
	}
	catch (Exception e)
	{
		Debug.LogError (string.Format (
			&amp;amp;quot;Exception when attempting to set up service listener ({0}:{1}): {2}&amp;amp;quot;,
			kBroadcastGroup,
			kBroadcastPort,
			e
		));

		m_SeekerSocket.Dispose ();
	}
}

// ...

void ReadBroadcasts ()
{
	/*
		Now set up periodic or event-driven reading from m_SeekerSocket, parsing
		broadcast packages containing IP, port and meta data of locally available games
	*/
}&lt;/code&gt;&lt;/pre&gt;&lt;/noscript&gt;&lt;/div&gt;
&lt;p&gt;Like with the broadcaster, &lt;strong&gt;kBroadcastGroup&lt;/strong&gt; and &lt;strong&gt;kBroadcastPort&lt;/strong&gt; are used with the same values to make sure we are listening on the same multi-cast setup as the broadcaster.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;m_SeekerSocket&lt;/strong&gt; is the socket on which broadcasts will be received &amp;#8211; just like you would on any other reception socket.&lt;/p&gt;
&lt;p&gt;And that is all there is to it. I hope you found it useful.&lt;/p&gt;</description>
				<published>2013-06-07 00:00:00 +0200</published>
				<link>http://angryant.com/2013/06/07/The-implicit-local-network-interface/</link>
			</item>
			
		
			
			<item>
				<title>Talks and progress</title>
				<description>&lt;p&gt;Recently I have been posting less hacks, tips and tricks than I wanted to and I fully intend to rectify this. However, first let me provide a brief overview of what I have in stead been squandering my time on.&lt;/p&gt;
&lt;p&gt;2013 started off with lots of still-internal Unity work which I hope will be publicly available very soon. Shortly after that I was off to a very busy &lt;span class=&quot;caps&quot;&gt;GDC&lt;/span&gt; with a very fancy booth sandwiched between Sony and Nintendo (very fitting given our announcements of partnering with both to support their new platforms).&lt;/p&gt;
&lt;p&gt;Beforehand, I had been playing around with the Oculus Rift devkits we had received in the Unity Copenhagen office and at &lt;span class=&quot;caps&quot;&gt;GDC&lt;/span&gt; a guy from Road To VR caught me for an interview about this. If you are interested in Unity and Oculus Rift, you can find the interview linked from the &lt;a href=&quot;/videos/&quot;&gt;video section&lt;/a&gt; of this site.&lt;/p&gt;
&lt;p&gt;Following &lt;span class=&quot;caps&quot;&gt;GDC&lt;/span&gt; I had a week at home to reset my time-zone orientation again, before heading to this years Unite Asia tour (re-branded from last years Unity Asia Bootcamp). So that week obviously went completely into talk prep.&lt;/p&gt;
&lt;p&gt;Unfortunately the talk recordings are not yet available, but as soon as they are, I will make sure to link them from the &lt;a href=&quot;/videos/&quot;&gt;video section&lt;/a&gt;, where you can also find recordings and example source from last years Unity Asia Bootcamp.&lt;/p&gt;
&lt;p&gt;After the two weeks blast through Asia, I had taken three weeks of vacation to reset an at this point quite messed up time-zone orientation. While I did spend some time relaxing, however I of-course had a hard time not using such a great opportunity to make some headway on Behave 2.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/resources/share/behave2peek.png&quot; title=&quot;Sneak peek at Behave 2&quot; alt=&quot;Sneak peek at Behave 2&quot; /&gt;&lt;/p&gt;
&lt;p&gt;Remaining tasks are mainly polish items and one fix for iOS &lt;span class=&quot;caps&quot;&gt;AOT&lt;/span&gt; compilation &amp;#8211; specifically I have moved serialization to use ProtoBuf-net for better performance and flexibility, however this library requires slightly different implementation for &lt;span class=&quot;caps&quot;&gt;AOT&lt;/span&gt; compatibility than regular &lt;span class=&quot;caps&quot;&gt;JIT&lt;/span&gt; platforms.&lt;/p&gt;
&lt;p&gt;I hope to get this wrapped up and shipped very soon, however right now I am sitting on the train to Malmö &amp;#8211; headed to the Unite Nordic conference. Tomorrow at the conference (May 22nd) I am scheduled to give two talks &amp;#8211; &amp;#8220;Unity Hacks&amp;#8221; at 10:00 and &amp;#8220;Cross-platform Considerations&amp;#8221; at 14:30.&lt;/p&gt;
&lt;p&gt;&amp;#8220;Unity Hacks&amp;#8221; is a repeat from Unite Asia, so if you don&amp;#8217;t want to wait for the videos on that one, tomorrow is your chance for some great Unity hackery. For the complete conference schedule, see the &lt;a href=&quot;http://unity3d.com/unite/nordic/&quot;&gt;Unite Nordic website&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Finally, after much consideration I decided to end my time at Unity Technologies. It has been great fun, but now seems the right time to get out and stretch my legs a bit. I do so by starting contracting again and if you&amp;#8217;re interested in working together, please use &lt;a href=&quot;/contracting&quot;&gt;the form&lt;/a&gt; I have provided for that purpose.&lt;/p&gt;
&lt;p&gt;Or if you are at Unite Nordic or Nordic Game which follows right after, feel free to give me a poke there.&lt;/p&gt;
&lt;p&gt;Until next time!&lt;/p&gt;</description>
				<published>2013-05-21 00:00:00 +0200</published>
				<link>http://angryant.com/2013/05/21/Talks-and-progress/</link>
			</item>
			
		
			
			<item>
				<title>Five years of Unity expertise looking for contracts</title>
				<description>&lt;p&gt;On the 28th of June, after four great years at Unity Technologies, I part ways with my friends to go explore for a while &amp;#8211; doing consulting / contract work.&lt;/p&gt;
&lt;p&gt;I have had a great time and seen absolutely crazy growth and things while at Unity. I definitely am leaving with a nice big bag of great memories. However I feel the need to stretch my legs a bit, so off I go.&lt;/p&gt;
&lt;p&gt;So I am available for contracts from July 1st, offering up among other things, my five years of Unity expertise. For more details on the things that I do there is this site and my &lt;a href=&quot;http://eej.dk&quot;&gt;LinkedIn profile&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;And, well, that&amp;#8217;s pretty much it. Want to play? Please use the handy contact form I set up: &lt;a href=&quot;/contracting&quot;&gt;Handy contact form&lt;/a&gt;.&lt;/p&gt;</description>
				<published>2013-05-14 00:00:00 +0200</published>
				<link>http://angryant.com/2013/05/14/Five-years-of-Unity-expertise-looking-for-contracts/</link>
			</item>
			
		
			
			<item>
				<title>Automagic Unity Android Java gadget OF DOOM!</title>
				<description>&lt;p&gt;Ok maybe not that dramatic, but pretty handy if you&amp;#8217;re working with Unity Android and doing some Java plugin work.&lt;/p&gt;
&lt;p&gt;I hadn&amp;#8217;t really touched Unity Android specific code since setting up automatic testing of it, so a few months back I wanted to remedy that by diving in head-first with an obvious not-hello-world sort of project.&lt;/p&gt;
&lt;p&gt;For christmas of 2011, my awesome parents had bought me a &lt;span class=&quot;caps&quot;&gt;IOIO&lt;/span&gt; board&lt;sup class=&quot;footnote&quot; id=&quot;fnr1&quot;&gt;&lt;a href=&quot;#fn1&quot;&gt;1&lt;/a&gt;&lt;/sup&gt;. I wanted to push some more boundaries of mine and do some hacking which couldn&amp;#8217;t all be contained in an email attachment and the &lt;span class=&quot;caps&quot;&gt;IOIO&lt;/span&gt; seemed a great start for that.&lt;/p&gt;
&lt;p&gt;In short, the &lt;span class=&quot;caps&quot;&gt;IOIO&lt;/span&gt; board is a small, inexpensive IO board with a &lt;span class=&quot;caps&quot;&gt;USB&lt;/span&gt; interface and Android drivers &amp;#8211; allowing you to connect your Android phone to it and control its 48 IO ports from software running on that phone.&lt;/p&gt;
&lt;p&gt;Obviously I had to write that software as a Unity project and I hope I&amp;#8217;ll get some more time to polish up the last bits of the soft- and hardware for it soonish and tell you some more about it.&lt;/p&gt;
&lt;p&gt;Anywho, that&amp;#8217;s enough background. Long story short, I obviously started out (after consulting the Unity documentation on how to work with the Java interface with Unity Android which I would need to access the &lt;span class=&quot;caps&quot;&gt;IOIO&lt;/span&gt; driver) by doing some editor scripting to reduce my iteration time on the Java I needed. Wisely I predicted that my Java would be so terribly rusty that I would need a significant number of iterations.&lt;/p&gt;
&lt;p&gt;Basically what I wanted was to get rid of the multiple steps needed for compiling, signing and assembling a Java plugin. Initially I just hacked together a perl script to reduce those steps to one line of shell execution, but that still meant more context switching than I wanted.&lt;/p&gt;
&lt;p&gt;So I leveled up the hack by having a Unity asset post processor automatically execute the perl script whenever a Java file got imported in the plugins directory &amp;#8211; re-routing any output from it to the Unity console.&lt;/p&gt;
&lt;p&gt;That was really awesome. I would make a change in my Java, save it, switch to Unity and see all my horrible compiler errors right there in the console. And as this was my only Android project, I was quite happy with my hack &amp;#8211; proceeding to kill my compiler errors and build my &lt;span class=&quot;caps&quot;&gt;IOIO&lt;/span&gt; project.&lt;/p&gt;
&lt;p&gt;Some friends had been poking me about cleaning up and generalising the hack a bit more and luck would have it that in my christmas vacation I spent a lot of time being sick. So I used some time here and there to clean up the Unity Android plugin builder and yesterday I pushed it to github &amp;#8211; without any project specific bits, without perl and somewhat more user friendly.&lt;/p&gt;
&lt;p&gt;Check it out and let me know what you think. If anything is broken or you&amp;#8217;d like to request a change or addition, please use the github issues feature:&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;&lt;a href=&quot;https://github.com/AngryAnt/JavaPluginBuilder&quot;&gt;The JavaPluginBuilder repository on github&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p class=&quot;footnote&quot; id=&quot;fn1&quot;&gt;&lt;a href=&quot;#fnr1&quot;&gt;&lt;sup&gt;1&lt;/sup&gt;&lt;/a&gt; &lt;a href=&quot;https://www.sparkfun.com/products/10748&quot;&gt;The &lt;span class=&quot;caps&quot;&gt;IOIO&lt;/span&gt; board&lt;/a&gt;&lt;/p&gt;</description>
				<published>2012-12-22 00:00:00 +0100</published>
				<link>http://angryant.com/2012/12/22/Automagic-Unity-Android-Java-gadget-OF-DOOM/</link>
			</item>
			
		
			
			<item>
				<title>Invading Planet from your couch</title>
				<description>&lt;p&gt;So yesterday was Tuesday which would normally mean I head to the local hackerspace and play around with my RC car and &lt;span class=&quot;caps&quot;&gt;IOIO&lt;/span&gt; board. However that plan was completely shot down by girlfriend homework leading to required baby juggling. Which is always fun.&lt;/p&gt;
&lt;p&gt;Obviously I did not let that deter me from getting some hacking done anyway, so I picked up another project I&amp;#8217;d had on my &lt;span class=&quot;caps&quot;&gt;TODO&lt;/span&gt; for a while.&lt;/p&gt;
&lt;p&gt;You see I quite like my home entertainment setup. So much that aside from music, reading and the occasional iOS game, I only consume entertainment from my couch.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/resources/posts/2012-10-03-Invading-Planet-from-your-couch/CouchEntertainment.jpg&quot; title=&quot;The view from my couch&quot; alt=&quot;The view from my couch&quot; /&gt;&lt;/p&gt;
&lt;p class=&quot;comment&quot;&gt;Photo shows Star Craft II running in order to appease the SC2 gang at work which is not at all impressed with the amount of hours I manage to spend training with them. I tend to play more Alpha Centauri and Galactic Civilizations II ;)&lt;/p&gt;
&lt;p&gt;That includes the occasional gaming on my mini which I mostly use for TV and videos through Plex&lt;sup class=&quot;footnote&quot; id=&quot;fnr1&quot;&gt;&lt;a href=&quot;#fn1&quot;&gt;1&lt;/a&gt;&lt;/sup&gt;, so launching a game means hiding or quitting Plex, finding the game in whatever launcher, running it and then reversing when done.&lt;/p&gt;
&lt;p&gt;Now, I&amp;#8217;m lazy and I miss a feature of Plex 8 which allowed you to launch apps from within Plex &amp;#8211; right from your apple remote. So my hacking session last evening was creating a small Plex plugin which brings that feature back &amp;#8211; as I have been unable to find a pre-existing solution from someone else.&lt;/p&gt;
&lt;p&gt;And it works just lovely. I now only need to select AppTV from my Plex main menu, select Alpha Centauri, get out my bluetooth mouse and keyboard and get gaming.&lt;/p&gt;
&lt;p&gt;And you can too! Go find the &lt;a href=&quot;https://github.com/AngryAnt/AppTV&quot;&gt;AppTV project on github&lt;/a&gt; and have some fun :)&lt;/p&gt;
&lt;p&gt;Oh and if you add something cool, pull requests would be awesome.&lt;/p&gt;
&lt;p class=&quot;footnote&quot; id=&quot;fn1&quot;&gt;&lt;a href=&quot;#fnr1&quot;&gt;&lt;sup&gt;1&lt;/sup&gt;&lt;/a&gt; &lt;a href=&quot;http://plexapp.com&quot;&gt;Plex&lt;/a&gt;&lt;/p&gt;</description>
				<published>2012-10-03 00:00:00 +0200</published>
				<link>http://angryant.com/2012/10/03/Invading-Planet-from-your-couch/</link>
			</item>
			
		
			
			<item>
				<title>Mountain Lion and laggy bluetooth and duct-tape</title>
				<description>&lt;p&gt;If you, like me, run a bluetooth keyboard and mouse on your Mountain Lion machine, you might have noticed recent occasional slow-downs in the response time from those devices.&lt;/p&gt;
&lt;p&gt;A bit of googling told me that was not an uncommon problem and that apparently it happens mostly after resuming the OS after sleep. Also the solution appears to be restarting the BT radio.&lt;/p&gt;
&lt;p&gt;So until apple addresses this, I&amp;#8217;ve written myself a little utility apple script for turning the radio off and back on again. It&amp;#8217;s based on &lt;a href=&quot;http://www.frederikseiffert.de/blueutil/&quot;&gt;blueutil&lt;/a&gt; which is available with source if you worry about malware and simply turns off the radio for five seconds before turning it back on.&lt;/p&gt;
&lt;p&gt;I hope you find it useful.&lt;/p&gt;
&lt;script src=&#39;https://gist.github.com/3798723.js?file=&#39;&gt;&lt;/script&gt;&lt;div&gt;&lt;noscript&gt;&lt;pre&gt;&lt;code&gt;do shell script &amp;amp;quot;sudo /usr/local/bin/blueutil off&amp;amp;quot; with administrator privileges
delay 5
do shell script &amp;amp;quot;sudo /usr/local/bin/blueutil on&amp;amp;quot; with administrator privileges&lt;/code&gt;&lt;/pre&gt;&lt;/noscript&gt;&lt;/div&gt;</description>
				<published>2012-09-28 00:00:00 +0200</published>
				<link>http://angryant.com/2012/09/28/Mountain-Lion-and-laggy-bluetooth-and-duct-tape/</link>
			</item>
			
		
			
			<item>
				<title>Unite 12 video and new videos section available</title>
				<description>&lt;p&gt;While I was away at gameAIconf 12 in Vienna, the recording of my networking talk at this years Unite conference was made available.&lt;/p&gt;
&lt;p&gt;Rather than spreading more sporatic linking in various blog posts, I created a videos page collecting up talks, interviews and documentation videos. I&amp;#8217;m hoping it will serve as a good addition to the blog and my gists.&lt;/p&gt;
&lt;p&gt;The new section can be found over at &lt;a href=&quot;/videos&quot;&gt;/videos&lt;/a&gt;&lt;/p&gt;</description>
				<published>2012-09-23 00:00:00 +0200</published>
				<link>http://angryant.com/2012/09/23/Unite-12-video-and-new-videos-section-available/</link>
			</item>
			
		
			
			<item>
				<title>Asia Bootcamp videos now available</title>
				<description>&lt;p&gt;&lt;span class=&quot;caps&quot;&gt;OHAI&lt;/span&gt;!&lt;/p&gt;
&lt;p&gt;Good news everyone! Having just gotten back from Unite 12, I&amp;#8217;ve just been informed that the videos from the Asia Bootcamp earlier this year are now available for public consumption!&lt;/p&gt;
&lt;p&gt;Here are the two talks I did on the tour (recordings from the Tokyo event):&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;&lt;a href=&quot;http://vimeopro.com/unity3djp/unity-asia-bootcamp-tour-tokyo-for-the-public/video/41968409&quot;&gt;Streamlining your Unity editor&lt;/a&gt;&lt;/li&gt;
	&lt;li&gt;&lt;a href=&quot;http://vimeopro.com/unity3djp/unity-asia-bootcamp-tour-tokyo-for-the-public/video/41969880&quot;&gt;Rapid network- and AI-ready game development in Unity&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Note that example projects and slides are linked just below the videos.&lt;/p&gt;
&lt;p&gt;At this yeas Unite I gave the talk &amp;#8220;Unity, Network Code, and You&amp;#8221;, which was also recorded. I&amp;#8217;ll make the recordings and example projects available for that as soon as everything is cut and online.&lt;/p&gt;</description>
				<published>2012-08-28 00:00:00 +0200</published>
				<link>http://angryant.com/2012/08/28/Asia-Bootcamp-videos-now-available/</link>
			</item>
			
		
			
			<item>
				<title>Path is now MIT licensed</title>
				<description>&lt;p&gt;Hey guys. Obviously I&amp;#8217;ve been pretty busy and since I&amp;#8217;d like to spend the spare time coding time I have on Behave, I have just made the Path repository publicly available with an &lt;span class=&quot;caps&quot;&gt;MIT&lt;/span&gt; license attached.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/AngryAnt/Path&quot; title=&quot;Path on github&quot;&gt;https://github.com/AngryAnt/Path&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Note that I will be monitoring and taking in pull requests as well as compiling builds for releasing into the asset store (obviously as a free package). Let&amp;#8217;s make this project as awesome as can be :)&lt;/p&gt;
&lt;p&gt;Issue tracking and wiki development (I would appreciate collaborators on that as well) is still happening on &lt;a href=&quot;https://github.com/AngryAnt/Path-release&quot; title=&quot;The Path-release repository on github&quot;&gt;https://github.com/AngryAnt/Path-release&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Happy hacking!&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://forum.unity3d.com/threads/78037-AI-Pathfinding-in-Unity-Path&quot; title=&quot;Path thread on the Unity forum&quot;&gt;Unity forum thread&lt;/a&gt;.&lt;/p&gt;</description>
				<published>2012-05-17 00:00:00 +0200</published>
				<link>http://angryant.com/2012/05/17/path-is-now-mit-licensed/</link>
			</item>
			
		
			
			<item>
				<title>Behave 1.4 released</title>
				<description>&lt;p&gt;So obviously I ended up not spending more time on that &lt;span class=&quot;caps&quot;&gt;RPG&lt;/span&gt; thing&amp;#8230; I did however work on some 3.5 stuff back at Unity, some upcoming demo stuff and baby Lili was born.&lt;/p&gt;
&lt;p&gt;Meanwhile I spent spare time on Behave rather than the &lt;span class=&quot;caps&quot;&gt;RPG&lt;/span&gt; thing, so now 1.4 is ready for release. &lt;span class=&quot;caps&quot;&gt;TADAA&lt;/span&gt;!&lt;/p&gt;
&lt;p&gt;This release primarily holds runtime optimizations, fixes and tweaks. Specifically I would like to highlight the ability to mark components as &amp;#8220;instant&amp;#8221;. The instant flag affects sequences and selectors when moving between child nodes. When an instant child component completes, rather than waiting for the next tick to tick the following child node, the sequence or selector does it immediately.&lt;/p&gt;
&lt;p&gt;Anywho, get it on the asset store and remember to rebuild your libraries after installing.&lt;/p&gt;
&lt;p&gt;The rest of the changes follow:&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;Fixed decorator incorrectly initializing on every returning tick when tick handler returned Running.&lt;/li&gt;
	&lt;li&gt;Fixed debugger view dependency on active tree editor &amp;#8211; causing reported null reference exception.&lt;/li&gt;
	&lt;li&gt;Fixed missing scrollbars on browser window.&lt;/li&gt;
	&lt;li&gt;Reduced logging noise from debug builds.&lt;/li&gt;
	&lt;li&gt;Agent blueprints can now be MonoBehaviour based.&lt;/li&gt;
	&lt;li&gt;Clarified wording on &amp;#8220;library not loaded&amp;#8221;.&lt;/li&gt;
	&lt;li&gt;Now handling reset a bit cleverer &amp;#8211; potential performance boost.&lt;/li&gt;
	&lt;li&gt;Changed the default success criteria of Parallel components from SuccessOrFailure to Success.&lt;/li&gt;
	&lt;li&gt;Added &amp;#8220;instant&amp;#8221; flag to components. Components marked instant will affect sequences and selectors when moving between child nodes. When a child node marked &amp;#8220;instant&amp;#8221; completes, rather than waiting for the next tree tick to tick the following child node, the sequence or selector does it immediately.&lt;/li&gt;
	&lt;li&gt;The compiler progress bar returns.&lt;/li&gt;
	&lt;li&gt;Editing a Behave asset now focuses the asset browser last instead of the tree editor.&lt;/li&gt;
	&lt;li&gt;Behave can now be installed in any subfolder of Assets &amp;#8211; provided its internal folder structure remains intact.&lt;/li&gt;
	&lt;li&gt;Compilation speed improvements.&lt;/li&gt;
	&lt;li&gt;Enabled references across collection borders.&lt;/li&gt;
	&lt;li&gt;Added Tree.DataSize &amp;#8211; returning the number of bytes used by a tree instance. This is also displayed in the debugger window.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;You&amp;#8217;ll find a link to the package in the &lt;a href=&quot;/behave/download&quot; title=&quot;The Behave download section&quot;&gt;download&lt;/a&gt; section. Have fun!&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://forum.unity3d.com/threads/61849-AI-Behaviour-trees-in-Unity-Behave-1.1-released&quot; title=&quot;Behave thread on the Unity forum&quot;&gt;Unity forum thread&lt;/a&gt;.&lt;/p&gt;</description>
				<published>2011-11-30 00:00:00 +0100</published>
				<link>http://angryant.com/2011/11/30/behave-1-4-released/</link>
			</item>
			
		
			
			<item>
				<title>So I've been a bit busy lately</title>
				<description>&lt;p&gt;Little under half a year later and I&amp;#8217;m still here. Things have been rather hectic since my last update. In Copenhagen we conquered more office space and my team moved in there. I made some demos (&lt;a href=&quot;http://u3d.as/content/unity-technologies/third-person-mmo-controller/1Wt&quot;&gt;Third Person &lt;span class=&quot;caps&quot;&gt;MMO&lt;/span&gt; Controller&lt;/a&gt; and &lt;a href=&quot;http://u3d.as/content/unity-technologies/astro-dude/24Y&quot;&gt;Astro Dude&lt;/a&gt;), went to &lt;a href=&quot;http://gameaiconf.com/&quot;&gt;a conference&lt;/a&gt;, worked on &lt;a href=&quot;http://blogs.unity3d.com/2011/06/16/unity-roadmap-2011/&quot;&gt;a Unity release&lt;/a&gt; and pitched in to realize &lt;a href=&quot;http://unity3d.com/unite/&quot;&gt;another killer conference&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;By the way at that last conference I did a talk titled &amp;#8220;AI in Unity&amp;#8221; &amp;#8211; the goal of which was to try and demystify the concept of AI a bit. I&amp;#8217;ll make some noise when we have the recording of it available.&lt;/p&gt;
&lt;p&gt;Oh and I fixed the comments on the blog, so I&amp;#8217;ve just cleared out 300-something spam posts. Anyone got advice on how to avoid this on a WordPress blog? (Read: I&amp;#8217;m too lazy to change blogging system if anyone suggests that). Oh and therefore I enabled the &amp;#8220;must approve comments&amp;#8221; thingy. Not sure if that is going to help anything, but at least it will reduce the noise on your end.&lt;/p&gt;
&lt;p&gt;So what is next then? Well I&amp;#8217;ve got a few things I&amp;#8217;d like to release in a Behave point upgrade and then the plan is to move on to 2.0 which will hold some backwards-compatibility breaking changes.&lt;/p&gt;
&lt;p&gt;At Unity there&amp;#8217;s a bit more 3.5 stuff to do and some even awesomererer demos on the way. The extra awesomeness has been underway for quite a while, so I&amp;#8217;m very excited to get this out soon.&lt;/p&gt;
&lt;p&gt;I very recently started playing around with some &lt;span class=&quot;caps&quot;&gt;RPG&lt;/span&gt; mechanics in my spare time (had a day off after Unite and couldn&amp;#8217;t sit still). It&amp;#8217;s so spare time that the plan is to have no additional plans. Let&amp;#8217;s see where that goes.&lt;/p&gt;
&lt;p&gt;Ah and I&amp;#8217;ll work with &lt;a href=&quot;http://www.blender.org/blenderorg/blender-foundation/&quot;&gt;some groovy dudes&lt;/a&gt; on getting a &lt;a href=&quot;http://copenhagen.startupweekend.org/&quot;&gt;3D themed workshop event&lt;/a&gt; up and going early next year. I don&amp;#8217;t think it has been announced yet, but it will be awesome &amp;#8211; and full of Unity of-course. That should hit right before &lt;a href=&quot;http://nordicgamejam.org/&quot;&gt;the other groovy thing&lt;/a&gt; I&amp;#8217;m working on again this year with more &lt;a href=&quot;http://igda.dk/&quot;&gt;awesome dudes and dudettes&lt;/a&gt;. Fun times!&lt;/p&gt;
&lt;p&gt;What else? Oh yea. With my low bandwidth for updates, I&amp;#8217;ve increasingly turned to &lt;a href=&quot;http://twitter.com/#!/angryant&quot;&gt;twitter&lt;/a&gt; and the &lt;a href=&quot;https://gist.github.com/AngryAnt&quot;&gt;gist&lt;/a&gt; feature of &lt;a href=&quot;https://github.com/AngryAnt&quot;&gt;github&lt;/a&gt;. Hopefully I will have the time to do some good reads in the Tips and Tricks section soon, but the gist setup is just so very quick.&lt;/p&gt;
&lt;p&gt;I probably forgot a ton of stuff, but hopefully this was a good reboot of this blog thing. Let&amp;#8217;s see what happens. Maybe I could start blogging about that &lt;span class=&quot;caps&quot;&gt;RPG&lt;/span&gt; thing if it accidentally turns interesting. We&amp;#8217;ll see.&lt;/p&gt;
&lt;p&gt;Have fun!&lt;/p&gt;</description>
				<published>2011-10-09 00:00:00 +0200</published>
				<link>http://angryant.com/2011/10/09/so-ive-been-a-bit-busy-lately/</link>
			</item>
			
		
			
			<item>
				<title>Behave 1.3 released</title>
				<description>&lt;p&gt;After quite a long break (including shifting around at utech, doing a Path release etc.), Behave is finally getting another update!&lt;/p&gt;
&lt;p&gt;This release is primarily a bugfix and editor polish release. One thing I&amp;#8217;d like to highlight though is the addition of agent blueprints. From the changelog:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;- Added agent blueprints &amp;#8211; connecting to agent handlers through virtual methods rather than reflected handlers.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Generally this enables you to more explicitly tie up handlers and cuts down on tree initialization time. Oh and of-course you gain auto-completion when setting up your handlers.&lt;/p&gt;
&lt;p&gt;Anyway, here&amp;#8217;s the whole changelog:&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;Fixed priority selector init flag resetting.&lt;/li&gt;
	&lt;li&gt;Fixed reference handling on tree renaming and deletion.&lt;/li&gt;
	&lt;li&gt;Fixed references still pointing at old collection post collection duplication.&lt;/li&gt;
	&lt;li&gt;Fixed compilation of actions and decorators with non-integral float parameters.&lt;/li&gt;
	&lt;li&gt;Fixed &lt;span class=&quot;caps&quot;&gt;GUI&lt;/span&gt; list behaviours.&lt;/li&gt;
	&lt;li&gt;Fixed passing context back and forth between referenced trees and referrer.&lt;/li&gt;
	&lt;li&gt;Fixed reordering connections not causing save state to be set.&lt;/li&gt;
	&lt;li&gt;Various &lt;span class=&quot;caps&quot;&gt;GUI&lt;/span&gt; tweaks.&lt;/li&gt;
	&lt;li&gt;Runtime optimisations.&lt;/li&gt;
	&lt;li&gt;Enabled scrolling of the tree list in the debugger window.&lt;/li&gt;
	&lt;li&gt;Exposed Tree.ReflectForwards.&lt;/li&gt;
	&lt;li&gt;Added Tree.ResetForwards.&lt;/li&gt;
	&lt;li&gt;Added agent blueprints &amp;#8211; connecting to agent handlers through virtual methods rather than reflected handlers.&lt;/li&gt;
	&lt;li&gt;Made connections selectable in the tree editor via the connection nub.&lt;/li&gt;
	&lt;li&gt;Moved connection managing from the inspector to the tree editor, where it is more visible and handy.&lt;/li&gt;
	&lt;li&gt;Added support for disabling connections &amp;#8211; for faster, less destructive debugging.&lt;/li&gt;
	&lt;li&gt;Double-click reference component to jump to referenced tree.&lt;/li&gt;
	&lt;li&gt;Changed &amp;#8220;Cannot update unregistered tree&amp;#8221; handling from an exception to an error message. Still need more info.&lt;/li&gt;
	&lt;li&gt;Now showing string and float parameters in the tree editor if either is set.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;You&amp;#8217;ll find a link to the package in the &lt;a href=&quot;/behave/download&quot; title=&quot;The Behave download section&quot;&gt;download&lt;/a&gt; section. Have fun!&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://forum.unity3d.com/threads/61849-AI-Behaviour-trees-in-Unity-Behave-1.1-released&quot; title=&quot;Behave thread on the Unity forum&quot;&gt;Unity forum thread&lt;/a&gt;.&lt;/p&gt;</description>
				<published>2011-04-28 00:00:00 +0200</published>
				<link>http://angryant.com/2011/04/28/behave-1-3-released/</link>
			</item>
			
		
			
			<item>
				<title>IGDA Unity SIG slides</title>
				<description>&lt;p&gt;&lt;span class=&quot;caps&quot;&gt;OHAI&lt;/span&gt;! Sorry about the delay &amp;#8211; things have been a bit hectic around here. Per request, I&amp;#8217;m making available exports of three of my slideshows from the recent &lt;span class=&quot;caps&quot;&gt;IGDA&lt;/span&gt; Unity SIGs. I hope you&amp;#8217;ll find them useful:&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;&lt;a href=&quot;/resources/posts/2011-04-23-igda-unity-sig-slides/AI%20in%20Unity.pdf&quot;&gt;AI in Unity&lt;/a&gt;&lt;/li&gt;
	&lt;li&gt;&lt;a href=&quot;/resources/posts/2011-04-23-igda-unity-sig-slides/Network.pdf&quot;&gt;Network&lt;/a&gt;&lt;/li&gt;
	&lt;li&gt;&lt;a href=&quot;/resources/posts/2011-04-23-igda-unity-sig-slides/Unity%20GUI.pdf&quot;&gt;Unity &lt;span class=&quot;caps&quot;&gt;GUI&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description>
				<published>2011-04-23 00:00:00 +0200</published>
				<link>http://angryant.com/2011/04/23/igda-unity-sig-slides/</link>
			</item>
			
		
			
			<item>
				<title>Second Unity IGDA SIG this evening: Scene construction and AI</title>
				<description>&lt;p&gt;&lt;span class=&quot;caps&quot;&gt;OHAI&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;A week has passed and the second of six Unity specific &lt;span class=&quot;caps&quot;&gt;IGDA&lt;/span&gt; SIGs is upon us. Like last time, the event will take place at the IT University, Copenhagen, Denmark at 1800.&lt;/p&gt;
&lt;p&gt;We will meet in the reception and from there move to the auditorium. The originally planned physics bit of todays &lt;span class=&quot;caps&quot;&gt;SIG&lt;/span&gt; has been rescheduled to next thursday, where Jonas Echterhoff will be in town and give the talk. Jonas is the man with the plan of the PhysX integration in Unity, so added awesomenessness!&lt;/p&gt;
&lt;p&gt;This means that today Joe Robins will be talking about scene construction and I will be covering AI in Unity.&lt;/p&gt;
&lt;p&gt;For this thursday we should be lucky and get even more Unity Tech people to participate in the discussion bit of the &lt;span class=&quot;caps&quot;&gt;SIG&lt;/span&gt;. And remember afterwards we&amp;#8217;re doing the bar meet and given it&amp;#8217;s Saint Patricks, we&amp;#8217;re likely to be a good group of people moving from bar to bar.&lt;/p&gt;
&lt;p&gt;The original &lt;span class=&quot;caps&quot;&gt;IGDA&lt;/span&gt; post w. schedule:
&lt;a href=&quot;http://igda.dk/2011/02/01/unity-sig-unity-special-interest-group-launch/&quot;&gt;http://igda.dk/2011/02/01/unity-sig-unity-special-interest-group-launch/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;caps&quot;&gt;IGDA&lt;/span&gt; post on the rescheduling of the physics talk:
&lt;a href=&quot;http://igda.dk/2011/03/16/unity-sig-update-on-the-meeting-thursday-173/&quot;&gt;http://igda.dk/2011/03/16/unity-sig-update-on-the-meeting-thursday-173/&lt;/a&gt;&lt;/p&gt;</description>
				<published>2011-03-17 00:00:00 +0100</published>
				<link>http://angryant.com/2011/03/17/second-unity-igda-sig-this-evening-scene-construction-and-ai/</link>
			</item>
			
		
			
			<item>
				<title>First IGDA Unity SIG this evening</title>
				<description>&lt;p&gt;Quick announcement for anyone in or around the &lt;span class=&quot;caps&quot;&gt;CPH&lt;/span&gt; area: I&amp;#8217;m doing the first of six &lt;span class=&quot;caps&quot;&gt;IGDA&lt;/span&gt; Unity SIGs (Special Interest Groups) this evening, with Joe Robins.&lt;/p&gt;
&lt;p&gt;The event is held at the IT University of Copenhagen and starts at 1800. Anyone can attend (for free) and this first &lt;span class=&quot;caps&quot;&gt;SIG&lt;/span&gt; will be a general introduction to Unity &amp;#8211; basic principles of the engine, workflow and such. The following five SIGs will dive into various specific areas of Unity.&lt;/p&gt;
&lt;p&gt;For more information and the full program, see the &lt;span class=&quot;caps&quot;&gt;IGDA&lt;/span&gt; DK blog:
&lt;a href=&quot;http://igda.dk/2011/02/01/unity-sig-unity-special-interest-group-launch/&quot;&gt;http://igda.dk/2011/02/01/unity-sig-unity-special-interest-group-launch/&lt;/a&gt;&lt;/p&gt;</description>
				<published>2011-03-10 00:00:00 +0100</published>
				<link>http://angryant.com/2011/03/10/first-igda-unity-sig-this-evening/</link>
			</item>
			
		
			
			<item>
				<title>Alternative licensing available</title>
				<description>&lt;p&gt;After having been poked on the issue for a while now, I&amp;#8217;m finally offering the option of requesting alternative licensing on Path and Behave.&lt;/p&gt;
&lt;p&gt;Something in the default license which doesn&amp;#8217;t fit your project too well? Let&amp;#8217;s talk about it. Please use the form available on the &lt;a href=&quot;/behave/download/&quot;&gt;download&lt;/a&gt; page.&lt;/p&gt;</description>
				<published>2011-03-03 00:00:00 +0100</published>
				<link>http://angryant.com/2011/03/03/alternative-licensing-available/</link>
			</item>
			
		
			
			<item>
				<title>Pathfinding in two lines</title>
				<description>&lt;p&gt;I just updated the &lt;a href=&quot;/path/documentation&quot;&gt;Path documentation&lt;/a&gt; with a short tutorial describing the simplest possible interface between your code and the Path runtime: &amp;#8220;Pathfinding in two lines&amp;#8221;.&lt;/p&gt;
&lt;p&gt;Furthermore, I added a link to the previously released introduction video to Path 2.0b1. While I will make sure to re-record it with the released build, 99% of the stuff in that video still applies.&lt;/p&gt;</description>
				<published>2011-02-15 00:00:00 +0100</published>
				<link>http://angryant.com/2011/02/15/pathfinding-in-two-line/</link>
			</item>
			
		
			
			<item>
				<title>Path 2 released</title>
				<description>&lt;p&gt;That&amp;#8217;s right, Path is back in business &amp;#8211; easier to use and more powerful than ever before! Version 2 is now available for download on the Unity asset store. Find a link to it in the &lt;a href=&quot;/path/download&quot;&gt;download&lt;/a&gt; section &amp;#8211; along with an example seeker script.&lt;/p&gt;
&lt;p&gt;Full &lt;span class=&quot;caps&quot;&gt;API&lt;/span&gt; documentation is available in the &lt;a href=&quot;/path/documentation&quot;&gt;documentation&lt;/a&gt; section &amp;#8211; more documentation is on the way, as is integration between UnitySteer and Path 2.&lt;/p&gt;
&lt;p&gt;That&amp;#8217;s it for now. Have fun!&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://forum.unity3d.com/threads/78037-AI-Pathfinding-in-Unity-Path&quot; title=&quot;Path thread on the Unity forum&quot;&gt;Unity forum thread&lt;/a&gt;.&lt;/p&gt;</description>
				<published>2011-02-15 00:00:00 +0100</published>
				<link>http://angryant.com/2011/02/15/path-2-released/</link>
			</item>
			
		
			
			<item>
				<title>Assembling and assimilating</title>
				<description>&lt;p&gt;So this post has been delayed for quite a while&amp;#8230; One question I got from many sources after my Advanced Editor Scripting talk with Adam Mechtley at Unite &amp;#8217;10 was &amp;#8220;so how did you do that assembly building thing?&amp;#8221;.&lt;/p&gt;
&lt;p&gt;Well I did it before we had a port of MonoDevelop available, so my options were limited. Now that we do have that port, you&amp;#8217;ll be able to redo this exercise in there with some &lt;span class=&quot;caps&quot;&gt;GUI&lt;/span&gt; drag-drop nicenessness. However, just because I can (and because it is healthy learning and lovely hacky) I will provide the command-line/perl script solution, which is still my approach.&lt;/p&gt;
&lt;p&gt;First a quick &amp;#8220;why&amp;#8221;: As mentioned in my Unite talk, there are three reasons I wrap my projects in .net assemblies before distributing &amp;#8211; and no it&amp;#8217;s got nothing to do with keeping the source secure &amp;#8211; assemblies are &lt;b&gt;easily&lt;/b&gt; decompiled:&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;Reduce deployment clutter. If I were to release Behave without being wrapped in assembly, it would span around 150 &amp;#8211; 170 source files and textures in various folder configurations. Now I have two folders, three assemblies and about five script files.&lt;/li&gt;
	&lt;li&gt;Reduce funky bug reports. While .net assemblies are very easily disassembled, it does at least take some dedication to do so. More than it takes to randomly change something in a full source distribution when things don&amp;#8217;t go your way. So assemblies help you get rid of a portion of those really long bug reports which end up with &amp;quot;oh, by the way, I changed this one thing in your distribution &amp;#8211; you think that might have something to do with it?.&lt;/li&gt;
	&lt;li&gt;They can load in at runtime. This is really cool and quite useful if applicable to your scenario &amp;#8211; for more information, check out this other tips and tricks post: &lt;a href=&quot;http://angryant.com/general/tipsandtricks/downloading-the-hydra/&quot; target=&quot;_parent&quot;&gt;downloading the hydra&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;In this post I am going to show you how to build your scripts into a .net assembly (.dll) and add it to your Unity project. And just to spice things up, lets take that in reverse: Once your assembly is built, copy that bastard into your Assets folder. Done.&lt;/p&gt;
&lt;p&gt;Easy, right? Now, let&amp;#8217;s take a look at the assembly building. And, before you start, yes this will run on all Unity supported platforms and no it does not require pro &amp;#8211; run this on the base Unity license without issues.&lt;/p&gt;
&lt;h2&gt;Setup&lt;/h2&gt;
&lt;p&gt;So first off, if you are on windows, you&amp;#8217;ll be needing a perl install. I usually got for ActivePerl. Not saying it is more awesomerer than anything else out there &amp;#8211; just that I know it and it usually works just fine. If you are on OS X, you&amp;#8217;re in luck, as perl comes preinstalled.&lt;/p&gt;
&lt;p&gt;Now, let&amp;#8217;s get perl hacking. This is in no way meant as a &amp;#8220;my first perl script&amp;#8221; guide. We&amp;#8217;re just getting introduced to a means to an end &amp;#8211; and it is not going to be pretty. So first off, create a new text file in your favorite text editor and save it as build.pl. Start the file off like so:&lt;/p&gt;
&lt;script src=&#39;https://gist.github.com/3165387.js?file=build-1.pl&#39;&gt;&lt;/script&gt;&lt;div&gt;&lt;noscript&gt;&lt;pre&gt;&lt;code&gt;#/usr/local/bin/perl

use strict;
use Getopt::Long;
use Term::ANSIColor;
use File::Basename;
use File::Spec;
chdir (File::Spec-&amp;amp;gt;rel2abs (dirname($0)));

our $compiler = &amp;amp;quot;/Applications/Unity/Unity.app/Contents/Frameworks/Mono/bin/gmcs&amp;amp;quot;;
our $assemblyUnityEngine = &amp;amp;quot;/Applications/Unity/Unity.app/Contents/Frameworks/Managed/UnityEngine.dll&amp;amp;quot;;
our $assemblyUnityEditor = &amp;amp;quot;/Applications/Unity/Unity.app/Contents/Frameworks/Managed/UnityEditor.dll&amp;amp;quot;;&lt;/code&gt;&lt;/pre&gt;&lt;/noscript&gt;&lt;/div&gt;
&lt;p&gt;Now, that was a bit of a mouthful, but it should be pretty straight-forward. Lines three through eight include a lot of perl functionality we will be using later. And actually the last two ones are already used in line nine. Here we&amp;#8217;re ensuring that the rest of the script is being executed in the context of the folder containing the file.&lt;/p&gt;
&lt;p&gt;In the next few lines of interest, three variables are declared &amp;#8211; pathes to the mono compiler shipped with Unity and the UnityEngine and UnityEditor assemblies. Notice that these are OS X pathes, for a windows setup (or if you installed Unity into a different folder than the default), you&amp;#8217;ll need to correct these.&lt;/p&gt;
&lt;h2&gt;Debug command-line parameter&lt;/h2&gt;
&lt;p&gt;Next up, let&amp;#8217;s add support for command-line parameters. &amp;#8220;Why?&amp;#8221; you ask &amp;#8211; because they are going to be awesome for debugging our assembly later. The only command-line parameter we will be supporting for now is &amp;#8220;&amp;#8212;release&amp;#8221;. This will basically let us toggle, when building the assembly, a bunch of logging and other stuff on or off. This is what it looks like:&lt;/p&gt;
&lt;script src=&#39;https://gist.github.com/3165387.js?file=build-2.pl&#39;&gt;&lt;/script&gt;&lt;div&gt;&lt;noscript&gt;&lt;pre&gt;&lt;code&gt;my $optionRelease = 0;

GetOptions (
	&amp;amp;quot;release&amp;amp;quot; =&amp;amp;gt; \$optionRelease
);&lt;/code&gt;&lt;/pre&gt;&lt;/noscript&gt;&lt;/div&gt;
&lt;p&gt;We declare a variable named optionRelease, initialize it to zero and then call GetOptions, telling it to pass data on the use of the &amp;#8220;release&amp;#8221; parameter into our variable. Now, GetOptions has a bunch of functionality, but the way we use it here, it simply assigns one or zero to our variable &amp;#8211; depending on whether the parameter is used or not.&lt;/p&gt;
&lt;p&gt;Next up, we need to use this variable to affect the parameters we pass to the gmcs compiler. Like so:&lt;/p&gt;
&lt;script src=&#39;https://gist.github.com/3165387.js?file=build-3.pl&#39;&gt;&lt;/script&gt;&lt;div&gt;&lt;noscript&gt;&lt;pre&gt;&lt;code&gt;my $debugOptions = $optionRelease == 0 ? &amp;amp;quot;-d:DEBUG&amp;amp;quot; : &amp;amp;quot;&amp;amp;quot;;&lt;/code&gt;&lt;/pre&gt;&lt;/noscript&gt;&lt;/div&gt;
&lt;p&gt;The idea here is that gmcs takes a parameter -d:[name] which instructs it to, during pre-processing, run with the symbol [name] defined. Something we can work with in our code like this:&lt;/p&gt;
&lt;script src=&#39;https://gist.github.com/3165387.js?file=AssemblyTest-1.cs&#39;&gt;&lt;/script&gt;&lt;div&gt;&lt;noscript&gt;&lt;pre&gt;&lt;code&gt;#if DEBUG
	Debug.Log (&amp;amp;quot;I&amp;amp;#39;m only visible in debug builds!&amp;amp;quot;);
#endif&lt;/code&gt;&lt;/pre&gt;&lt;/noscript&gt;&lt;/div&gt;
&lt;h2&gt;Building two assemblies&lt;/h2&gt;
&lt;p&gt;Next up, a bit of info. Since Unity 3, we&amp;#8217;ve enforced that scripts and assembly depending on UnityEditor, even if not using that, cannot be included in builds. This means that if you have some editor scripts, you would also like built to assembly, you will need to split these out into a different assembly than the one containing your runtime scripts.&lt;/p&gt;
&lt;p&gt;Lets&amp;#8217;s assume that is the case for this exercise, that the runtime scripts are located in Source/ and that the editor scripts are located in Source/Editor. So we will have to build two assemblies. That could mean code duplication, which should cause anyone pain, so let&amp;#8217;s be nice and wrap some of the building up in a perl subroutine:&lt;/p&gt;
&lt;script src=&#39;https://gist.github.com/3165387.js?file=build-4.pl&#39;&gt;&lt;/script&gt;&lt;div&gt;&lt;noscript&gt;&lt;pre&gt;&lt;code&gt;sub BuildAssembly
{
	our $compiler;

	my $target = shift;
	my $out = shift;
	my $arguments = shift;
	my $source = shift;

	print (&amp;amp;quot;Compiling $out\n&amp;amp;quot;);
	print color (&amp;amp;quot;blue&amp;amp;quot;), &amp;amp;quot;$compiler -target:$target -out:$out $arguments $source\n&amp;amp;quot;;
	print color (&amp;amp;quot;red&amp;amp;quot;);
	system (&amp;amp;quot;$compiler -target:$target -out:$out $arguments $source&amp;amp;quot;) and die (&amp;amp;quot;Compilation of $out failed.&amp;amp;quot;);
	print color (&amp;amp;quot;reset&amp;amp;quot;);
}&lt;/code&gt;&lt;/pre&gt;&lt;/noscript&gt;&lt;/div&gt;
&lt;p&gt;Let&amp;#8217;s take this subroutine line by line. First off we pull in the global variable &amp;#8220;compiler&amp;#8221;. After this, we populate the variables target, out, arguments and source from subroutine parameters. With these at hand, the fun begins. First off, we print out the name of our build target (MyAwesome.dll) and the command we&amp;#8217;re planning to execute &amp;#8211; marked in fashionable blue.&lt;/p&gt;
&lt;p&gt;Second we actually do the building &amp;#8211; colouring any compiler output red (no news is good news &amp;#8211; output is bad). If compilation fails, we kill the script &amp;#8211; allowing the user to take action. If all went well, we remember to reset the colouring before returning from the subroutine.&lt;/p&gt;
&lt;p&gt;So how about some use of this subroutine, eh?&lt;/p&gt;
&lt;script src=&#39;https://gist.github.com/3165387.js?file=build-5.pl&#39;&gt;&lt;/script&gt;&lt;div&gt;&lt;noscript&gt;&lt;pre&gt;&lt;code&gt;BuildAssembly (&amp;amp;quot;library&amp;amp;quot;, &amp;amp;quot;Awesomenessness.Runtime.dll&amp;amp;quot;, &amp;amp;quot;Source/*.cs&amp;amp;quot;, &amp;amp;quot;-d:RUNTIME $debugOptions -r:$assemblyUnityEngine&amp;amp;quot;);
BuildAssembly (&amp;amp;quot;library&amp;amp;quot;, &amp;amp;quot;Awesomenessness.Editor.dll&amp;amp;quot;, &amp;amp;quot;Source/Editor/*.cs&amp;amp;quot;, &amp;amp;quot;-d:EDITOR $debugOptions -r:Awesomenessness.Runtime.dll,$assemblyUnityEngine,$assemblyUnityEditor&amp;amp;quot;);&lt;/code&gt;&lt;/pre&gt;&lt;/noscript&gt;&lt;/div&gt;
&lt;p&gt;As you see, we first build the runtime assembly from Source/*.cs, with the &lt;span class=&quot;caps&quot;&gt;RUNTIME&lt;/span&gt; and optionally the &lt;span class=&quot;caps&quot;&gt;DEBUG&lt;/span&gt; symbol defined. We also make sure to include the UnityEngine assembly in the building, so that you can reference stuff from the UnityEngine namespace.&lt;/p&gt;
&lt;p&gt;In the second line, we build the editor assembly &amp;#8211; containing all our editor code from Source/Editor/*.cs. This time we define the &lt;span class=&quot;caps&quot;&gt;EDITOR&lt;/span&gt; and optionally the &lt;span class=&quot;caps&quot;&gt;DEBUG&lt;/span&gt; symbol during building. This assembly references not only the UnityEngine assembly, but also the UnityEditor one and the runtime assembly which was just built in the line above.&lt;/p&gt;
&lt;h2&gt;Distribution&lt;/h2&gt;
&lt;p&gt;And that&amp;#8217;s about it! As mentioned early in this post, all you need to do in order to include these assemblies in your project is to drag them into your assets folder, but if you&amp;#8217;re very nice, you could just make that copy a part of the build script:&lt;/p&gt;
&lt;script src=&#39;https://gist.github.com/3165387.js?file=build-6.pl&#39;&gt;&lt;/script&gt;&lt;div&gt;&lt;noscript&gt;&lt;pre&gt;&lt;code&gt;system (&amp;amp;quot;cp Awesomenessness.Runtime.dll Test\\ project/Assets/Awesomenessness&amp;amp;quot;);
system (&amp;amp;quot;cp Awesomenessness.Editor.dll Test\\ project/Assets/Awesomenessness/Editor&amp;amp;quot;);&lt;/code&gt;&lt;/pre&gt;&lt;/noscript&gt;&lt;/div&gt;
&lt;p&gt;Notice that this uses the OS X cp command-line tool. For windows, replace with equivalent.&lt;/p&gt;
&lt;h2&gt;Limitation: Editor classes in assemblies&lt;/h2&gt;
&lt;p&gt;While MonoBehaviours can live just fine in assemblies, editor scripts (ScriptableObject derived classes) come with a limitation (currently still active, as of Unity 3.1): You can not initialize these classes via UnityEditor &lt;span class=&quot;caps&quot;&gt;API&lt;/span&gt; calls. That would be calls like ScriptableObject.CreateInstance and EditorWindow.GetWindow.&lt;/p&gt;
&lt;p&gt;However &amp;#8211; you can create instances of classes via &amp;#8220;new&amp;#8221; just fine and you can derive scripts located outside of the assembly and instantiate those via UnityEditor calls without incident. Say for example that MyEditorWindow derives from EditorWindow and is located in an assembly. Now I cannot instantiate it via GetWindow, but if I create a .cs file in my assets folder containing a class which does nothing but inherit from MyEditorWindow, then that class can be instantiated via GetWindow just fine and will have the exact same behaviour.&lt;/p&gt;
&lt;h2&gt;Extra trick: Including resources in the assembly&lt;/h2&gt;
&lt;p&gt;For extra points, you can include resources, such as textures, in your assembly. This has the bonus of limiting the clutter of your distribution even more.&lt;/p&gt;
&lt;p&gt;Including the resource in your build is as simple as appending the &amp;#8220;-resource:[path]&amp;#8221; parameter to your gmcs build command. This will add the bytes into the assembly manifest &amp;#8211; under the name of the original file. You can fetch these bytes at runtime, using that name. For example, here&amp;#8217;s some utility methods for fetching textures:&lt;/p&gt;
&lt;script src=&#39;https://gist.github.com/3165387.js?file=AssemblyTest-2.cs&#39;&gt;&lt;/script&gt;&lt;div&gt;&lt;noscript&gt;&lt;pre&gt;&lt;code&gt;public static Stream GetResourceStream (string resourceName, Assembly assembly)
{
	if (assembly == null)
	{
		assembly = Assembly.GetExecutingAssembly ();
	}

	return assembly.GetManifestResourceStream (resourceName);
}


public static Stream GetResourceStream (string resourceName)
{
	return GetResourceStream (resourceName, null);
}


public static byte[] GetByteResource (string resourceName, Assembly assembly)
{
	Stream byteStream = GetResourceStream (resourceName, assembly);
	byte[] buffer = new byte[byteStream.Length];
	byteStream.Read (buffer, 0, (int)byteStream.Length);
	byteStream.Close ();

	return buffer;
}


public static byte[] GetByteResource (string resourceName)
{
	return GetByteResource (resourceName, null);
}


public static Texture2D GetTextureResource (string resourceName, Assembly assembly)
{
	Texture2D texture = new Texture2D (4, 4);
	texture.LoadImage (GetByteResource (resourceName, assembly));

	return texture;
}


public static Texture2D GetTextureResource (string resourceName)
{
	return GetTextureResource (resourceName, null);
}&lt;/code&gt;&lt;/pre&gt;&lt;/noscript&gt;&lt;/div&gt;
&lt;p&gt;Given that you added &amp;#8220;-resource:path/to/Logo.png&amp;#8221; to your gmcs build command, you will with the above utility methods be able to fetch that into a texture like so:&lt;/p&gt;
&lt;script src=&#39;https://gist.github.com/3165387.js?file=AssemblyTest-3.cs&#39;&gt;&lt;/script&gt;&lt;div&gt;&lt;noscript&gt;&lt;pre&gt;&lt;code&gt;Texture2D logoTexture = GetTextureResource (&amp;amp;quot;Logo.png&amp;amp;quot;);&lt;/code&gt;&lt;/pre&gt;&lt;/noscript&gt;&lt;/div&gt;
&lt;p&gt;Well, I hope you guys found some of this useful! I&amp;#8217;ll see if I can&amp;#8217;t do a follow-up on how to do this in MonoDevelop.&lt;/p&gt;</description>
				<published>2011-02-02 00:00:00 +0100</published>
				<link>http://angryant.com/2011/02/02/assembling-and-assimilating/</link>
			</item>
			
		
			
			<item>
				<title>Path 2 intro screencast</title>
				<description>&lt;p&gt;As promised &amp;#8211; a quick screencast of how to set up and use the Path 2 beta:&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;&lt;a href=&quot;/resources/path/Path2.mov&quot;&gt;Path 2.0b1 quick intro&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description>
				<published>2011-01-29 00:00:00 +0100</published>
				<link>http://angryant.com/2011/01/29/path-2-intro-screencast/</link>
			</item>
			
		
			
			<item>
				<title>Path 2 beta release for GGJ</title>
				<description>&lt;p&gt;With the Global Game Jam underway, I figured I would do an early beta release of Path 2. While I&amp;#8217;m home with the flu &amp;#8211; not able to participate in the Nordic Game Jam myself, I might as well do a bit of documentation on this thing and see if anyone finds it useful.&lt;/p&gt;
&lt;p&gt;So documentation is on the way, but the Path2 package is available from the &lt;a href=&quot;/path/download&quot;&gt;download&lt;/a&gt; section right now &amp;#8211; as is the demo seeker script.&lt;/p&gt;
&lt;p&gt;Path 2.0b1 feature set:&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;Throttle-able, co-routine driven seeker jobs for maximum performance.&lt;/li&gt;
	&lt;li&gt;Super simple Navigator.targetPosition interface.&lt;/li&gt;
	&lt;li&gt;Additional. Navigator.RequestPath interface.&lt;/li&gt;
	&lt;li&gt;Very straight forward and powerful editor interface.&lt;/li&gt;
	&lt;li&gt;Waypoint auto-connect and auto-scale empowering network authoring.&lt;/li&gt;
	&lt;li&gt;Custom weights based on the Unity built-in tags system.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;No release schedule yet. Documentation as I can have it ready. Have fun!&lt;/p&gt;
&lt;p&gt;I&amp;#8217;m off to recording a screen cast of this.&lt;/p&gt;</description>
				<published>2011-01-29 00:00:00 +0100</published>
				<link>http://angryant.com/2011/01/29/path-2-beta-release-for-ggj/</link>
			</item>
			
		
			
			<item>
				<title>AIgameDev master class video now online</title>
				<description>&lt;p&gt;For those of you who didn&amp;#8217;t have a chance to dial in live, but would still like to view the master class I did for AIgameDev last year: The video recording is now available here:&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://aigamedev.com/premium/masterclass/unity-behave/&quot;&gt;http://aigamedev.com/premium/masterclass/unity-behave/&lt;/a&gt;&lt;/p&gt;</description>
				<published>2011-01-25 00:00:00 +0100</published>
				<link>http://angryant.com/2011/01/25/aigamedev-master-class-video-now-online-3/</link>
			</item>
			
		
			
			<item>
				<title>Expanding beta</title>
				<description>&lt;p&gt;Due to an increasing number of users, I&amp;#8217;ve decided to expand the Behave beta testing group.&lt;/p&gt;
&lt;p&gt;You will find more information on this and how to join in the &amp;#8220;Beta&amp;#8221; page of the &amp;#8220;Behave&amp;#8221; section on this site &amp;#8211; &lt;a href=&quot;http://angryant.com/behave/beta/&quot;&gt;http://angryant.com/behave/beta&lt;/a&gt;.&lt;/p&gt;</description>
				<published>2011-01-09 00:00:00 +0100</published>
				<link>http://angryant.com/2011/01/09/expanding-beta/</link>
			</item>
			
		
			
			<item>
				<title>Behave AIgameDev master class public stream</title>
				<description>&lt;p&gt;Hey guys &amp;#8211; as promised, the live stream is now just about ready to go. The clock reads about ten minutes to impact, so join up!&lt;/p&gt;
&lt;p&gt;The direct link is available in the following forum post:
&lt;a href=&quot;http://forum.unity3d.com/threads/68843-Behave-master-class-on-AIgameDev/&quot;&gt;http://forum.unity3d.com/threads/68843-Behave-master-class-on-AIgameDev&lt;/a&gt;.&lt;/p&gt;</description>
				<published>2010-11-28 00:00:00 +0100</published>
				<link>http://angryant.com/2010/11/28/behave-aigamedev-master-class-public-stream/</link>
			</item>
			
		
			
			<item>
				<title>Behave master class on open AIgameDev stream tomorrow</title>
				<description>&lt;p&gt;Hey guys. Just a quick reminder here. Tomorrow I am doing the AIgameDev masterclass on Behave (times below). Alex of AIgameDev has been so kind as to make the stream publicly available. That&amp;#8217;s right &amp;#8211; no membership or subscription needed. Notice though that access to the stored video will still require a paid subscription, so don&amp;#8217;t miss out! Drop by tomorrow.&lt;/p&gt;
&lt;p&gt;Keep tabs on this site, as I&amp;#8217;ll be linking to a forum post with the stream link when it&amp;#8217;s available.&lt;/p&gt;
&lt;p&gt;Masterclass time: 22:00 European time, 16:00 East Coast, 13:00 Pacific time, 21:00 U.K.&lt;/p&gt;</description>
				<published>2010-11-27 00:00:00 +0100</published>
				<link>http://angryant.com/2010/11/27/behave-master-class-on-open-aigamedev-stream-tomorrow/</link>
			</item>
			
		
			
			<item>
				<title>Interview with AIGameDev</title>
				<description>&lt;p&gt;November 28th I&amp;#8217;m doing a live interview with Alex Champandard of AIGameDev.com on the subject of Behave. We will be going in depth into how the tool is used, a bit of the back end and do a demo.&lt;/p&gt;
&lt;p&gt;Drop by. It&amp;#8217;ll be fun!&lt;/p&gt;
&lt;p&gt;Time: 22:00 European time, 16:00 East Coast, 13:00 Pacific time, 21:00 U.K.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://aigamedev.com/premium/event/session-behave-unity/&quot;&gt;http://aigamedev.com/premium/event/session-behave-unity/&lt;/a&gt;.&lt;/p&gt;</description>
				<published>2010-10-29 00:00:00 +0200</published>
				<link>http://angryant.com/2010/10/29/interview-with-aigamedev/</link>
			</item>
			
		
			
			<item>
				<title>New video: From tree to code</title>
				<description>&lt;p&gt;Hey guys!&lt;/p&gt;
&lt;p&gt;This morning I recorded a video as a guide on how to go from installing Behave to using a behaviour tree in a script. I hope you guys find it useful.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;/resources/behave/FromTreeToCode.mov&quot;&gt;From tree to code&lt;/a&gt;.&lt;/p&gt;</description>
				<published>2010-10-24 00:00:00 +0200</published>
				<link>http://angryant.com/2010/10/24/new-video-from-tree-to-code/</link>
			</item>
			
		
			
			<item>
				<title>Issue tracking on github Behave release project</title>
				<description>&lt;p&gt;Hey guys&lt;/p&gt;
&lt;p&gt;Per request, I&amp;#8217;ve now set up a means of reporting issues and feature requests. I decided to do this though the github issue tracking system. You&amp;#8217;ll be able to track and report any issues or feature requests at this &lt;span class=&quot;caps&quot;&gt;URL&lt;/span&gt;:&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://github.com/AngryAnt/Behave-release/issues/&quot;&gt;http://github.com/AngryAnt/Behave-release/issues&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Similarly, please use the Behave release thread on the Unity forums for questions and discussions on Behave:&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://forum.unity3d.com/threads/61849-AI-Behaviour-trees-in-Unity-Behave-1.1-released/&quot;&gt;http://forum.unity3d.com/threads/61849-AI-Behaviour-trees-in-Unity-Behave-1.1-released&lt;/a&gt;.&lt;/p&gt;</description>
				<published>2010-10-23 00:00:00 +0200</published>
				<link>http://angryant.com/2010/10/23/issue-tracking-on-github-behave-release-project/</link>
			</item>
			
		
			
			<item>
				<title>IT University Copenhagen Unity course completed</title>
				<description>&lt;p&gt;Hey guys!&lt;/p&gt;
&lt;p&gt;So that was the last of the five days of &amp;#8220;Exploring with Unity&amp;#8221; course at the Copenhagen IT University. Thanks for having us. It has been good fun.&lt;/p&gt;
&lt;p&gt;Sorry about the broken link to the files from Thursday. This is now fixed, and the files from today&amp;#8217;s lecture are available from this (verified) link:&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;&lt;a href=&quot;http://eej.dk/angryant/wp-content/themes/angryant/downloads/ITUCourse2010/Friday.zip&quot;&gt;Friday&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description>
				<published>2010-10-22 00:00:00 +0200</published>
				<link>http://angryant.com/2010/10/22/it-university-copenhagen-unity-course-completed/</link>
			</item>
			
		
			
			<item>
				<title>IT University Copenhagen Unity course files Thursday</title>
				<description>&lt;p&gt;Hey guys!&lt;/p&gt;
&lt;p&gt;Attached to this post, you&amp;#8217;ll find the projects and resources used on today&amp;#8217;s lecture:&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;&lt;a href=&quot;http://eej.dk/angryant/wp-content/themes/angryant/downloads/ITUCourse2010/Thursday.zip&quot;&gt;Thursday&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description>
				<published>2010-10-21 00:00:00 +0200</published>
				<link>http://angryant.com/2010/10/21/it-university-copenhagen-unity-course-files-thursday/</link>
			</item>
			
		
			
			<item>
				<title>CPH IT University Unity course files</title>
				<description>&lt;p&gt;Hey guys.&lt;/p&gt;
&lt;p&gt;For those of you not attending; Joe Robins and I are running a Unity course at the IT University of Copenhagen this week. Given the highly mixed crowd, the our lectures range from absolutely no Unity knowledge required to at least some understanding needed for full potential unlock.&lt;/p&gt;
&lt;p&gt;During these lectures, we create projects for demoing the focus of the lecture. These are either pre-prepared or built on stage and often get modified based on requests from the audience.&lt;/p&gt;
&lt;p&gt;So now that we are all on the same track:
Attached to this post you should find three zip files of the content we have gone through in the classes so far. This is their state post responding to questions, so some of the stuff demoed earlier on might differ slightly.&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;&lt;a href=&quot;http://eej.dk/angryant/wp-content/themes/angryant/downloads/ITUCourse2010/Monday.zip&quot;&gt;Monday&lt;/a&gt;&lt;/li&gt;
	&lt;li&gt;&lt;a href=&quot;http://eej.dk/angryant/wp-content/themes/angryant/downloads/ITUCourse2010/Tuesday.zip&quot;&gt;Tuesday&lt;/a&gt;&lt;/li&gt;
	&lt;li&gt;&lt;a href=&quot;http://eej.dk/angryant/wp-content/themes/angryant/downloads/ITUCourse2010/Wednesday.zip&quot;&gt;Wednesday&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description>
				<published>2010-10-20 00:00:00 +0200</published>
				<link>http://angryant.com/2010/10/20/cph-it-university-unity-course-files/</link>
			</item>
			
		
			
			<item>
				<title>Behave 1.2 released</title>
				<description>&lt;p&gt;That&amp;#8217;s right! I know it&amp;#8217;s only been &amp;#8230; uh &amp;#8230; well less time than I usually take to get it together and push out a new version. But since I was a bit on a roll with the release of Behave 1.1 not too long ago, and given that a last minute bug has snuck into that release, I decided to push on.&lt;/p&gt;
&lt;p&gt;So here we are &amp;#8211; new version out in a jiffy. What&amp;#8217;s new you say? This is what&amp;#8217;s new:&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;Fixed release building.&lt;/li&gt;
	&lt;li&gt;Added the priority selector, introducing the &lt;span class=&quot;caps&quot;&gt;API&lt;/span&gt; points:
	&lt;ul&gt;
		&lt;li&gt;int IAgent.SelectTopPriority (Tree sender, params int[] IDs);&lt;/li&gt;
		&lt;li&gt;enum BL[LibraryName].PriorityType { PriorityName, &amp;#8230;, Unknown };&lt;/li&gt;
	&lt;/ul&gt;&lt;/li&gt;
	&lt;li&gt;Added support for branch contexts, introducing the &lt;span class=&quot;caps&quot;&gt;API&lt;/span&gt; points:
	&lt;ul&gt;
		&lt;li&gt;enum BL[LibraryName].ContextType { ContextName, &amp;#8230;, Unknown };&lt;/li&gt;
		&lt;li&gt;int Tree.ActiveContext { get; }&lt;/li&gt;
	&lt;/ul&gt;&lt;/li&gt;
	&lt;li&gt;Changed IAgent interface:
	&lt;ul&gt;
		&lt;li&gt;Tick (bool init, Tree sender) &amp;#8594; Tick (Tree sender, bool init)&lt;/li&gt;
	&lt;/ul&gt;&lt;/li&gt;
	&lt;li&gt;Added &amp;#8220;Select asset&amp;#8221; button to the standard inspector.&lt;/li&gt;
	&lt;li&gt;Interface polish.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I&amp;#8217;ll make sure to update the documentation to reflect the new &lt;span class=&quot;caps&quot;&gt;API&lt;/span&gt; changes and yes, more is coming on that front.&lt;/p&gt;
&lt;p&gt;And yes I will be releasing a new demo project. I just wanted to make it something different, and nice for you guys, y&amp;#8217;know? So hang in there.&lt;/p&gt;</description>
				<published>2010-10-11 00:00:00 +0200</published>
				<link>http://angryant.com/2010/10/11/behave-1-2-released/</link>
			</item>
			
		
			
			<item>
				<title>Video: Behave - starting from scratch</title>
				<description>&lt;p&gt;I just finished uploading a new video for the Behave documentation section. It is a brief general introduction to the Behave authoring environment and shows you how to get up and running with Behave from a blank project.&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;&lt;a href=&quot;/behave/documentation/&quot;&gt;The documentation page&lt;/a&gt;.&lt;/li&gt;
	&lt;li&gt;&lt;a href=&quot;/resources/behave/StartingFromScratch.mov&quot;&gt;Direct link to the video&lt;/a&gt;.
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;</description>
				<published>2010-09-29 00:00:00 +0200</published>
				<link>http://angryant.com/2010/09/29/video-behave-starting-from-scratch/</link>
			</item>
			
		
			
			<item>
				<title>Behave runtime documentation updated</title>
				<description>&lt;p&gt;It is no secret that the Behave documentation has been in a quite bad state for a while. With this release I intend to correct that and as a starting point, I have moved the outdated documentation offline and replaced it with documentation of the Behave runtime. Rest assured that I will be adding documentation on the authoring environment as well.&lt;/p&gt;
&lt;p&gt;Go check it out: &lt;a href=&quot;/behave/documentation/&quot;&gt;http://angryant.com/behave/documentation&lt;/a&gt;.&lt;/p&gt;</description>
				<published>2010-09-29 00:00:00 +0200</published>
				<link>http://angryant.com/2010/09/29/behave-runtime-documentation-updated/</link>
			</item>
			
		
			
			<item>
				<title>Behave 1.1 released</title>
				<description>&lt;p&gt;Hello reader. It&amp;#8217;s been quite a while since my last conf&amp;#8230; post.&lt;/p&gt;
&lt;p&gt;Yea sorry about that. Busy, busy, but then again I suppose most had probably &lt;a href=&quot;http://unity3d.com/unity/&quot;&gt;figured that one out&lt;/a&gt;. However, I have had a bit of time here and there over the last few months to polish away on Behave and keep it compatible with Unity 3 as it developed.&lt;/p&gt;
&lt;p&gt;A lot of this keeping up to date work at times resulted in some good old fashion rewrites &amp;#8211; like the entire asset handling and parts of the compiler. This is probably not very interesting to you, but it is quite so to me as it has allowed me to restructure internally in ways that make the system as a whole more flexible and ready for change and additions.&lt;/p&gt;
&lt;p&gt;One of those additions which I did sneak in next to the polish and updating is a new debugger. The in-game debugger has been thrown out in favour of one living in your editor environment. &lt;span class=&quot;caps&quot;&gt;YAY&lt;/span&gt;! No really, yay. You will like this and not just because I say so. Ah and as much requested this one actually dives into sub-trees, making it actually quite useful compared to its predecessor.&lt;/p&gt;
&lt;p&gt;Oh and the compiler runs on Windows too now. And I also shaved off some cruft in the action/decorator handler syntax, making &lt;a href=&quot;http://arges-systems.com&quot;&gt;Ricardo&lt;/a&gt; extra happy.&lt;/p&gt;
&lt;p&gt;I will be putting up some short documentation for Behave 1.1 shortly, but if you still haven&amp;#8217;t decided to download yet, here is a short teaser on the new debugger: &lt;a href=&quot;http://angryant.com/Debugger.mov&quot;&gt;This text is a link to a movie file. Click it. It will be fun!&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Enough blabbering though. The package is available in the download section and the changelog is right here:&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;Made compatible with Unity 3.0 &amp;#8211; including ensuring that the 2.5-2.6.1 bug preventing compilation on Windows is fixed on the Unity side.&lt;/li&gt;
	&lt;li&gt;UI tweaks and polish.&lt;/li&gt;
	&lt;li&gt;Added the option to have return values of nodes be inverted.&lt;/li&gt;
	&lt;li&gt;Fixed compiler bug when facing sequence or selector with only one child node.&lt;/li&gt;
	&lt;li&gt;Renamed Library.Tree &amp;#8594; Library.InstantiateTree.&lt;/li&gt;
	&lt;li&gt;Added Tree.Tick () and Tree.Reset () methods using the IAgent instance given at instantiation of the tree.&lt;/li&gt;
	&lt;li&gt;Removed the abstract Library class.&lt;/li&gt;
	&lt;li&gt;Changed generated library class:
	&lt;ul&gt;
		&lt;li&gt;Trees &amp;#8594; TreeType.&lt;/li&gt;
		&lt;li&gt;Actions &amp;#8594; ActionType.&lt;/li&gt;
		&lt;li&gt;Decorators &amp;#8594; DecoratorType.&lt;/li&gt;
		&lt;li&gt;Tree InstantiateTree (int, IAgent) &amp;#8594; static Tree InstantiateTree (TreeType, IAgent)&lt;/li&gt;
		&lt;li&gt;int TreeID (Tree) &amp;#8594; static TreeType Type (Tree)&lt;/li&gt;
		&lt;li&gt;bool IsAction (int) &amp;#8594; static bool IsAction (int)&lt;/li&gt;
		&lt;li&gt;bool IsDecorator (int) &amp;#8594; static bool IsDecorator (int)&lt;/li&gt;
	&lt;/ul&gt;&lt;/li&gt;
	&lt;li&gt;Upped editor performance.&lt;/li&gt;
	&lt;li&gt;New asset structure change with automatic import of Behave 1.0 assets.&lt;/li&gt;
	&lt;li&gt;Changed action and decorator handlers. These are now the handlers mapped:
	&lt;ul&gt;
		&lt;li&gt;public BehaveResult Init[Name][Action/Decorator] (Tree sender, string stringParameter, float floatParameter, IAgent agent, object data);&lt;/li&gt;
		&lt;li&gt;public BehaveResult Tick[Name][Action/Decorator] (Tree sender, string stringParameter, float floatParameter, IAgent agent, object data);&lt;/li&gt;
		&lt;li&gt;public void Reset[Name][Action/Decorator] (Tree sender, string stringParameter, float floatParameter, IAgent agent, object data);&lt;/li&gt;
		&lt;li&gt;public BehaveResult Init[Name][Action/Decorator] (Tree sender);&lt;/li&gt;
		&lt;li&gt;public BehaveResult Tick[Name][Action/Decorator] (Tree sender);&lt;/li&gt;
		&lt;li&gt;public void Reset[Name][Action/Decorator] (Tree sender);&lt;/li&gt;
		&lt;li&gt;public BehaveResult [Name][Action/Decorator] {get; set;}&lt;/li&gt;
	&lt;/ul&gt;&lt;/li&gt;
	&lt;li&gt;Added support for collection duplication.&lt;/li&gt;
	&lt;li&gt;Moved debug rendering into the editor with its own dedicated debugger window, including actor listing.&lt;/li&gt;
	&lt;li&gt;Debugger now renders active sub-trees as well.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Oh and if you are upgrading a previous Behave install in a project, please see Readme.txt for details on snags you might hit and how to solve the whole thing in 4-5 steps.&lt;/p&gt;
&lt;p&gt;Ah and one more thing: Behave 1.1 removes the &amp;#8220;only for non-commercial work&amp;#8221; clause from the license.&lt;/p&gt;
&lt;p&gt;Have fun! And remember to tell me about all your awesome projects!&lt;/p&gt;</description>
				<published>2010-09-29 00:00:00 +0200</published>
				<link>http://angryant.com/2010/09/29/behave-1-1-released/</link>
			</item>
			
		
			
			<item>
				<title>FAFF cleanup: Sketch</title>
				<description>&lt;p&gt;As some of you might have read, at Unity we have a thing called &lt;a href=&quot;http://blogs.unity3d.com/2009/11/18/fridays-are-for-fun/&quot;&gt;&lt;span class=&quot;caps&quot;&gt;FAFF&lt;/span&gt;&lt;/a&gt; &amp;#8211; very much the same as Google and other IT businesses are doing. It generally lets you step out of the bit stream for a day and just, during work hours, go with whatever crazy idea(s) you&amp;#8217;ve been throwing around.&lt;/p&gt;
&lt;p&gt;Some of these ideas are pushed into the product later and others are just filed under &amp;#8220;something to play with when bored&amp;#8221; and &amp;#8220;now I can stop wondering about that&amp;#8221;. Sketch was a micro &lt;span class=&quot;caps&quot;&gt;FAFF&lt;/span&gt; project I just remembered I had filed under &amp;#8220;this was fun&amp;#8221; and then forgot all about. Since then I&amp;#8217;ve continued work on other projects and started new ones &amp;#8211; in all likelihood I&amp;#8217;ll not return to this project.&lt;/p&gt;
&lt;p&gt;So I figured I&amp;#8217;d push it to github and let you guys take it for a spin. If nothing else, it&amp;#8217;s a nice demo of what you can do with Unity editor scripting.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://eej.dk/angryant/wp-content/uploads/2010/03/Sketch.png&quot; title=&quot;Sketch&quot;&gt;&lt;img src=&quot;http://eej.dk/angryant/wp-content/uploads/2010/03/Sketch-300x202.png&quot; alt=&quot;&quot; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The idea of Sketch is to have simple tools inside the Unity editor to modify meshes in your assets. My goal with the project was never to turn Unity into a mesh authoring environment, but rather to give people an extra tool for rapid prototyping.&lt;/p&gt;
&lt;p&gt;So what&amp;#8217;s in there now? The simplest I could think of: Triangle selection and movement.&lt;/p&gt;
&lt;p&gt;Workflow:&lt;/p&gt;
&lt;ol&gt;
	&lt;li&gt;Go to the GameObject &amp;#8594; Create Other menu and click Sketch Cube.&lt;/li&gt;
	&lt;li&gt;With the cube selected, click a triangle and with the handle that appears, drag it around to modify the mesh.&lt;/li&gt;
	&lt;li&gt;&lt;span class=&quot;caps&quot;&gt;GOTO&lt;/span&gt; 1.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Alternatively, you could drag in your own mesh from the Assets folder (make sure that it generates a mesh collider in its import settings) and attach the Sketch script to it.&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;caps&quot;&gt;NOTICE&lt;/span&gt;: Sketch modifies the imported asset. This means that:&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;If you modify a some of the basic geometry meshes (such as GameObject &amp;#8594; Create Other &amp;#8594; Cube), the changes will apply to all cubes until editor relaunch.&lt;/li&gt;
	&lt;li&gt;If the geometry you&amp;#8217;re modifying is based on an imported 3D asset, reimporting it will mean you loose your changes.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Structure-wise, Sketch consists of two components: A MonoBehaviour (Sketch/Sketch.cs) and a custom inspector (Sketch/Editor/SketchEditor.cs). The purpose of the MonoBehaviour is merely to do some bookkeeping and provide utility functions (it will even destroy itself at runtime) while the custom inspector holds the logic for doing the modifications.&lt;/p&gt;
&lt;p&gt;Woah. That&amp;#8217;s a lot of talk. Here&amp;#8217;s the repository &amp;#8211; go nuts: &lt;a href=&quot;http://github.com/AngryAnt/Sketch/&quot;&gt;http://github.com/AngryAnt/Sketch&lt;/a&gt;.&lt;/p&gt;</description>
				<published>2010-03-19 00:00:00 +0100</published>
				<link>http://angryant.com/2010/03/19/faff-cleanup-sketch/</link>
			</item>
			
		
			
			<item>
				<title>Building a menu of delegates and enums</title>
				<description>&lt;p&gt;I like delegates. I also like enums. Furthermore, I happen to be part of a small group of people who actually enjoy the immediate mode &lt;span class=&quot;caps&quot;&gt;GUI&lt;/span&gt; system in Unity. And I want you to like it too :)&lt;/p&gt;
&lt;p&gt;So &amp;#8211; menus. After having observed quite a few very funky approaches, in the &lt;a href=&quot;http://www.unifycommunity.com/wiki/index.php?title=IRC&quot;&gt;&lt;span class=&quot;caps&quot;&gt;IRC&lt;/span&gt;&lt;/a&gt; channel, to building main menu functionality and giving advice in there, I decided to sow together those ideas into a short example.&lt;/p&gt;
&lt;p&gt;The main idea here is to be able to build and manage a menu system quickly and easily. This line adds a new submenu to the system &amp;#8211; designated MyMenuState and implemented in the OnMyMenuGUI method:
&lt;script src=&#39;https://gist.github.com/3806175.js?file=NewSubmenu.cs&#39;&gt;&lt;/script&gt;&lt;div&gt;&lt;noscript&gt;&lt;pre&gt;&lt;code&gt;m_Menus [MenuState.MyMenuState] = OnMyMenuGUI;&lt;/code&gt;&lt;/pre&gt;&lt;/noscript&gt;&lt;/div&gt;&lt;/p&gt;
&lt;p&gt;Notice that since we&amp;#8217;re using delegates, the &lt;span class=&quot;caps&quot;&gt;GUI&lt;/span&gt; method needn&amp;#8217;t be implemented in the same script and could even  live on an entirely different GameObject. Why is this so clever (besides enums and delegates being cool)? Because managing and switching between menus set up like this is insanely easy. This is the central &lt;span class=&quot;caps&quot;&gt;GUI&lt;/span&gt; method for the menu system:
&lt;script src=&#39;https://gist.github.com/3806175.js?file=OnGUI.cs&#39;&gt;&lt;/script&gt;&lt;div&gt;&lt;noscript&gt;&lt;pre&gt;&lt;code&gt;public void OnGUI ()
{
	m_Menus [m_CurrentState] ();
}&lt;/code&gt;&lt;/pre&gt;&lt;/noscript&gt;&lt;/div&gt;&lt;/p&gt;
&lt;p&gt;And this is &lt;span class=&quot;caps&quot;&gt;GUI&lt;/span&gt; code inside a menu &lt;span class=&quot;caps&quot;&gt;GUI&lt;/span&gt; method for switching to a different submenu:
&lt;script src=&#39;https://gist.github.com/3806175.js?file=SwitchMenu.cs&#39;&gt;&lt;/script&gt;&lt;div&gt;&lt;noscript&gt;&lt;pre&gt;&lt;code&gt;m_CurrentState = GUILayout.Button (&amp;amp;quot;Credits&amp;amp;quot;) ? MenuState.Credits : m_CurrentState;&lt;/code&gt;&lt;/pre&gt;&lt;/noscript&gt;&lt;/div&gt;&lt;/p&gt;
&lt;p&gt;So there. Enough talk. Have some example code:
&lt;script src=&#39;https://gist.github.com/3806175.js?file=Menu.cs&#39;&gt;&lt;/script&gt;&lt;div&gt;&lt;noscript&gt;&lt;pre&gt;&lt;code&gt;using UnityEngine;
using System.Collections;
using System.Collections.Generic;&lt;/p&gt;
&lt;p&gt;public class Menu : MonoBehaviour
{
	delegate void OnGUIImplementation();
	public enum MenuState {Main,Settings,Credits};
	public struct Settings
	{
		public bool m_ThisSetting, m_ThatSetting, m_TheOtherSetting;
	};
	static Vector2 m_StandardMenuSize = new Vector2 (200.0f, 300.0f);
	static string m_LogoURL = &amp;quot;http://download.unity3d.com/images/top-menu/mm_unity_icon.png&amp;quot;;
	static Texture2D m_Logo = null;&lt;/p&gt;
&lt;p&gt;private MenuState m_CurrentState = MenuState.Main;
	private Dictionary m_Menus;
	private Settings m_Settings;&lt;/p&gt;
&lt;p&gt;void Awake ()
	{
		m_Menus = new Dictionary ();
		m_Menus [MenuState.Main] = OnMainMenuGUI;
		m_Menus [MenuState.Settings] = OnSettingsGUI;
		m_Menus [MenuState.Credits] = OnCreditsGUI;
		StartCoroutine (GetLogo ());
	}&lt;/p&gt;
&lt;p&gt;IEnumerator GetLogo ()
	{
		&lt;span class=&quot;caps&quot;&gt;WWW&lt;/span&gt; www = new &lt;span class=&quot;caps&quot;&gt;WWW&lt;/span&gt; (m_LogoURL);&lt;/p&gt;
&lt;p&gt;yield return www;&lt;/p&gt;
&lt;p&gt;if (www.error == null)
		{
			m_Logo = www.texture;
		}
	}&lt;/p&gt;
&lt;p&gt;public void OnGUI ()
	{
		m_Menus [m_CurrentState] ();
	}&lt;/p&gt;
&lt;p&gt;static void BeginStandardMenu (string title)
	{
		GUILayout.BeginArea (new Rect ((Screen.width &amp;#8211; m_StandardMenuSize.x) * 0.5f, (Screen.height &amp;#8211; m_StandardMenuSize.y) * 0.5f, m_StandardMenuSize.x, m_StandardMenuSize.y));
			GUILayout.BeginVertical (&lt;span class=&quot;caps&quot;&gt;GUI&lt;/span&gt;.skin.GetStyle (&amp;quot;Box&amp;quot;));
				GUILayout.Label (title, &lt;span class=&quot;caps&quot;&gt;GUI&lt;/span&gt;.skin.GetStyle (&amp;quot;Box&amp;quot;));
	}&lt;/p&gt;
&lt;p&gt;static void EndStandardMenu ()
	{
		Color color;&lt;/p&gt;
&lt;p&gt;GUILayout.BeginHorizontal ();
					GUILayout.FlexibleSpace ();
						color = &lt;span class=&quot;caps&quot;&gt;GUI&lt;/span&gt;.color;
						&lt;span class=&quot;caps&quot;&gt;GUI&lt;/span&gt;.color = Color.grey;
						GUILayout.Label (&amp;quot;My game version 2.4X&amp;quot;);
						&lt;span class=&quot;caps&quot;&gt;GUI&lt;/span&gt;.color = color;
					GUILayout.FlexibleSpace ();
				GUILayout.EndHorizontal ();
			GUILayout.EndVertical ();
		GUILayout.EndArea ();
	}&lt;/p&gt;
&lt;p&gt;void OnMainMenuGUI ()
	{
		BeginStandardMenu (&amp;quot;Main menu&amp;quot;);
			if (m_Logo != null)
			{
				GUILayout.BeginHorizontal ();
					GUILayout.FlexibleSpace ();
						GUILayout.Label (m_Logo);
					GUILayout.FlexibleSpace ();
				GUILayout.EndHorizontal ();
			}
			if (GUILayout.Button (&amp;quot;New game&amp;quot;))
			{
				Application.LoadLevel (&amp;quot;Level one&amp;quot;);
			}
			m_CurrentState = GUILayout.Button (&amp;quot;Settings&amp;quot;) ? MenuState.Settings : m_CurrentState;
			m_CurrentState = GUILayout.Button (&amp;quot;Credits&amp;quot;) ? MenuState.Credits : m_CurrentState;
			GUILayout.FlexibleSpace ();
		EndStandardMenu ();
	}&lt;/p&gt;
&lt;p&gt;void OnSettingsGUI ()
	{
		BeginStandardMenu (&amp;quot;Settings&amp;quot;);
			m_Settings.m_ThisSetting = GUILayout.Toggle (m_Settings.m_ThisSetting, &amp;quot;This setting&amp;quot;);
			m_Settings.m_ThatSetting = GUILayout.Toggle (m_Settings.m_ThatSetting, &amp;quot;That setting&amp;quot;);
			m_Settings.m_TheOtherSetting = GUILayout.Toggle (m_Settings.m_TheOtherSetting, &amp;quot;The other setting&amp;quot;, &lt;span class=&quot;caps&quot;&gt;GUI&lt;/span&gt;.skin.GetStyle (&amp;quot;Button&amp;quot;));
			GUILayout.FlexibleSpace ();
			m_CurrentState = GUILayout.Button (&amp;quot;Main menu&amp;quot;) ? MenuState.Main : m_CurrentState;
		EndStandardMenu ();
	}&lt;/p&gt;
&lt;p&gt;void OnCreditsGUI ()
	{
		BeginStandardMenu (&amp;quot;Credits&amp;quot;);
			GUILayout.Label (&amp;quot;This game was created by some of the most awesomestest people on the planet. Having failed in their mission to Pluto, they started making games, which &amp;#8211; as you can see &amp;#8211; resulted in much joy and success!&amp;quot;);
				GUILayout.Space (20.0f);
				GUILayout.BeginHorizontal ();
					GUILayout.FlexibleSpace ();
						GUILayout.Label (&amp;quot;The awesomestest people inc.&amp;quot;);
				GUILayout.EndHorizontal ();&lt;/p&gt;
&lt;p&gt;GUILayout.FlexibleSpace ();
			m_CurrentState = GUILayout.Button (&amp;quot;Main menu&amp;quot;) ? MenuState.Main : m_CurrentState;
		EndStandardMenu ();
	}
}&lt;/code&gt;&lt;/pre&gt;&lt;/noscript&gt;&lt;/div&gt;&lt;/p&gt;
&lt;p&gt;Example project: &lt;a href=&quot;http://eej.dk/angryant/wp-content/uploads/2010/03/Menu.zip&quot;&gt;Menu.zip&lt;/a&gt; &amp;#8211; built with Unity 2.6.1&lt;/p&gt;</description>
				<published>2010-03-15 00:00:00 +0100</published>
				<link>http://angryant.com/2010/03/15/building-a-menu-of-delegates-and-enums/</link>
			</item>
			
		
			
			<item>
				<title>Pick me! Pick me!</title>
				<description>&lt;p&gt;Say you&amp;#8217;re developing an &lt;span class=&quot;caps&quot;&gt;RTS&lt;/span&gt; or maybe a connect-the-dots sort of game. What would be the easiest way to go about handling object selection? This is my suggested solution.&lt;/p&gt;
&lt;p&gt;In the given example, I&amp;#8217;m taking advantage of the object-mouse event handling that MonoBehaviours on GameObject with colliders on them give for free. You might be in a scenario where raycasting or otherwise resolving selection requests makes more sense, but the basic logic still applies. This example is merely intended to get your from start to goal as fast as possible.&lt;/p&gt;
&lt;p&gt;First off, we need a selection manager class (cleverly named SelectionManager in my example). This is where we store selection state and via static accessors, we can get and modify the current selection. Seeing as this class is both public and all accessors are static, you can put its source anywhere. In my example I&amp;#8217;ve simply put it right after the MonoBehaviour used for testing it.&lt;/p&gt;
&lt;p&gt;SelectionManager
&lt;script src=&#39;https://gist.github.com/3804386.js?file=SelectionManager.cs&#39;&gt;&lt;/script&gt;&lt;div&gt;&lt;noscript&gt;&lt;pre&gt;&lt;code&gt;using UnityEngine;&lt;/p&gt;
&lt;p&gt;public class SelectionManager
{
	private static GameObject s_ActiveSelection;&lt;/p&gt;
&lt;p&gt;public static GameObject ActiveSelection
	{
		get
		{
			return s_ActiveSelection;
		}
		set
		{
			s_ActiveSelection = value;
		}
	}&lt;/p&gt;
&lt;p&gt;public static void Select (GameObject gameObject, bool selectionValue)
	{
		if (selectionValue)
		{
			Select (gameObject);
		}
		else
		{
			Deselect (gameObject);
		}
	}&lt;/p&gt;
&lt;p&gt;public static void Select (GameObject gameObject)
	{
		ActiveSelection = gameObject;
	}&lt;/p&gt;
&lt;p&gt;public static void Deselect (GameObject gameObject)
	{
		if (ActiveSelection == gameObject)
		{
			ActiveSelection = null;
		}
	}&lt;/p&gt;
&lt;p&gt;public static bool IsSelected (GameObject gameObject)
	{
		return ActiveSelection == gameObject;
	}
}
&lt;/code&gt;&lt;/pre&gt;&lt;/noscript&gt;&lt;/div&gt;&lt;/p&gt;
&lt;p&gt;And the promised MonoBehaviour using the SelectionManager class:
&lt;script src=&#39;https://gist.github.com/3804386.js?file=SelectableObject.cs&#39;&gt;&lt;/script&gt;&lt;div&gt;&lt;noscript&gt;&lt;pre&gt;&lt;code&gt;using UnityEngine;&lt;/p&gt;
&lt;p&gt;public class SelectableObject : MonoBehaviour
{
	public Rect m_SelectionWindowRect = new Rect (10.0f, 10.0f, 300.0f, 100.0f);&lt;/p&gt;
&lt;p&gt;public void OnMouseDown ()
	{
		SelectionManager.Select (gameObject, !SelectionManager.IsSelected (gameObject));
	}&lt;/p&gt;
&lt;p&gt;public void OnDisable ()
	{
		SelectionManager.Deselect (gameObject);
	}&lt;/p&gt;
&lt;p&gt;public void Update ()
	{
		renderer.material.color = SelectionManager.IsSelected (gameObject) ? Color.green : Color.white;
	}&lt;/p&gt;
&lt;p&gt;public void OnGUI ()
	{
		if (SelectionManager.IsSelected (gameObject))
		{
			m_SelectionWindowRect = &lt;span class=&quot;caps&quot;&gt;GUI&lt;/span&gt;.Window (GetInstanceID (), m_SelectionWindowRect, SelectionWindow, gameObject.name);
		}
	}&lt;/p&gt;
&lt;p&gt;void SelectionWindow (int id)
	{
		GUILayout.Box (&amp;quot;I am the selection and my name is &amp;quot; + gameObject.name);
		&lt;span class=&quot;caps&quot;&gt;GUI&lt;/span&gt;.DragWindow ();
	}
}
&lt;/code&gt;&lt;/pre&gt;&lt;/noscript&gt;&lt;/div&gt;&lt;/p&gt;
&lt;p&gt;And that is all there is to it. By popular demand, I&amp;#8217;m now starting to provide pre-built projects with these tips and tricks posts. Download, unzip, open and play. Requires Unity 2.6.1:
&lt;a href=&#39;http://eej.dk/angryant/wp-content/uploads/2010/03/SelectableObject.zip&#39;&gt;SelectableObject&lt;/a&gt;&lt;/p&gt;</description>
				<published>2010-03-10 00:00:00 +0100</published>
				<link>http://angryant.com/2010/03/10/pick-me-pick-me/</link>
			</item>
			
		
			
			<item>
				<title>Optimising coroutine yielding in C#</title>
				<description>&lt;p&gt;When needing to yield a coroutine for a single frame in C#, most people &amp;#8211; including myself usually go about it this way:&lt;/p&gt;
&lt;script src=&#39;https://gist.github.com/3804418.js?file=Zero.cs&#39;&gt;&lt;/script&gt;&lt;div&gt;&lt;noscript&gt;&lt;pre&gt;&lt;code&gt;private IEnumerator DoFadeAlphaIn ()
{
	while (m_Alpha &amp;amp;lt; 1.0f)
	{
		m_Alpha += Time.deltaTime;
		yield return 0;
	}
	m_Alpha = 1.0f;
}&lt;/code&gt;&lt;/pre&gt;&lt;/noscript&gt;&lt;/div&gt;
&lt;p&gt;However, as Rodrigo recently brought to my attention, this approach ofcourse performs unneeded memory allocation, given that the zero needs boxing and unboxing before its passed to the coroutine system. Using null in stead saves you that work and allocation.&lt;/p&gt;
&lt;p&gt;This might not seem like a lot at first glance, but if you make this a habit every time you need to yield for a frame, I guarantee you that you&amp;#8217;ll see results in larger scenarios.&lt;/p&gt;
&lt;p&gt;The more optimal way of yielding for a single frame in C#. Minor difference, but allocation saved &amp;#8211; which is always awesome:&lt;/p&gt;
&lt;script src=&#39;https://gist.github.com/3804418.js?file=Null.cs&#39;&gt;&lt;/script&gt;&lt;div&gt;&lt;noscript&gt;&lt;pre&gt;&lt;code&gt;private IEnumerator DoFadeAlphaIn ()
{
	while (m_Alpha &amp;amp;lt; 1.0f)
	{
		m_Alpha += Time.deltaTime;
		yield return null;
	}
	m_Alpha = 1.0f;
}&lt;/code&gt;&lt;/pre&gt;&lt;/noscript&gt;&lt;/div&gt;
&lt;p&gt;An interesting test could be to, on a larger co-routine heavy project, do a project-wide find and replace on &amp;#8220;yield return 0;&amp;#8221; and &amp;#8220;yield return null;&amp;#8221; back and forth and measuring the performance difference with the profiler (for non-pro users, maybe the performance gain is even measurable using external monitoring tools).&lt;/p&gt;</description>
				<published>2010-01-14 00:00:00 +0100</published>
				<link>http://angryant.com/2010/01/14/optimising-coroutine-yielding-in-c/</link>
			</item>
			
		
			
			<item>
				<title>Downloading the hydra</title>
				<description>&lt;p&gt;So I&amp;#8217;ve seen some people asking how you would go about downloading executable code from an external location, reading it into memory and executing it in ones running application.&lt;/p&gt;
&lt;p&gt;Now some readers might go &amp;#8220;eh? why the heck would someone want to do that?&amp;#8221;. Well first off, &lt;b&gt;its cool&lt;/b&gt;&amp;#8482;, but seeing as that is rarely an argument which convinces decision makers, here&amp;#8217;s a few others:&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;Patching. The ability to modify the behaviour of your downloaded executable after distribution, without requiring re-download.&lt;/li&gt;
	&lt;li&gt;Highly dynamic online content. Say you&amp;#8217;re building a virtual world or something. You might want to have the ability to add more complex behaviours to downloaded content &amp;#8211; more than what a data-driven approach allows for.&lt;/li&gt;
	&lt;li&gt;Or how about expanding the capabilities of user generated content?&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;There. Those are my alibis and I&amp;#8217;m sticking to them.&lt;/p&gt;
&lt;p&gt;Now this example is quick and simple so as to not bloat the post too much. Regardless of your use, you&amp;#8217;ll likely be wanting to add in for instance some cache functionality for real-world use.&lt;/p&gt;
&lt;p&gt;Right. So this example contains three pieces of eight, uh, code:&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;The loader utility &amp;#8211; responsible for downloading and making available the remote code.&lt;/li&gt;
	&lt;li&gt;The assembly &amp;#8211; you know, the one we&amp;#8217;re downloading.&lt;/li&gt;
	&lt;li&gt;An example handler. For easy re-use, I&amp;#8217;ve designed this example to allow for easy re-use of the loader utility by externalising handling of the assemblies via messages. This example handler shows some techniques for accessing the data of loaded assemblies.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Using the example:&lt;/p&gt;
&lt;ol&gt;
	&lt;li&gt;Download and save /Assets/WWWAssemblyLoader.cs, /Assets/NewBehaviourScript.cs and /MyAssembly.cs.&lt;/li&gt;
	&lt;li&gt;Download and install the mono runtime (or the .net equivalent on Windnows &amp;#8211; not tested, but should work just fine).&lt;/li&gt;
	&lt;li&gt;Build the assembly from the terminal &amp;#8211; using the build command supplied at the end of this post.&lt;/li&gt;
	&lt;li&gt;Upload the assembly to some host (save the &lt;span class=&quot;caps&quot;&gt;URL&lt;/span&gt; for later).&lt;/li&gt;
	&lt;li&gt;Open up your Unity project.&lt;/li&gt;
	&lt;li&gt;Add the WWWAssemblyLoader and NewBehaviourScript scripts to a GameObject and set the &lt;span class=&quot;caps&quot;&gt;URL&lt;/span&gt; property of the first to that of your uploaded assembly.&lt;/li&gt;
	&lt;li&gt;Press play.&lt;/li&gt;
	&lt;li&gt;Profit!&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;And now the codes!&lt;/p&gt;
&lt;p&gt;&lt;b&gt;/Assets/WWWAssemblyLoader.cs&lt;/b&gt;
&lt;script src=&#39;https://gist.github.com/3806151.js?file=WWWAssemblyLoader.cs&#39;&gt;&lt;/script&gt;&lt;div&gt;&lt;noscript&gt;&lt;pre&gt;&lt;code&gt;using UnityEngine;
using System.Collections;
using System.Reflection;&lt;/p&gt;
&lt;p&gt;public class WWWAssemblyLoader : MonoBehaviour
{
	public string m_AssemblyURL;
	private string m_ErrorString = &amp;quot;&amp;quot;;
	private &lt;span class=&quot;caps&quot;&gt;WWW&lt;/span&gt; m_WWW;
	private bool m_Complete = true;&lt;/p&gt;
&lt;p&gt;public void Start ()
	{
		if (m_AssemblyURL != &amp;quot;&amp;quot;)
		{
			ReloadAssembly (m_AssemblyURL);
		}
	}&lt;/p&gt;
&lt;p&gt;public string AssemblyURL
	{
		get
		{
			return m_AssemblyURL;
		}
		set
		{
			if (m_AssemblyURL != value)
			{
				ReloadAssembly (value);
			}
		}
	}&lt;/p&gt;
&lt;p&gt;public float Progress
	{
		get
		{
			return m_Complete ? 1.0f : m_WWW.progress;
		}
	}&lt;/p&gt;
&lt;p&gt;public string Error
	{
		get
		{
			return m_ErrorString;
		}
	}&lt;/p&gt;
&lt;p&gt;public void ReloadAssembly (string url)
	{
		m_Complete = false;
		m_ErrorString = &amp;quot;&amp;quot;;
		m_AssemblyURL = url;
		m_WWW = new &lt;span class=&quot;caps&quot;&gt;WWW&lt;/span&gt; (m_AssemblyURL);
	}&lt;/p&gt;
&lt;p&gt;public void Update ()
	{
		if (!m_Complete)
		{
			if (m_WWW.error != null)
			{
				m_ErrorString = m_WWW.error;
				m_Complete = true;
				SendMessage (&amp;quot;OnAssemblyLoadFailed&amp;quot;, m_AssemblyURL);
			}
			else if (m_WWW.isDone)
			{
				Assembly assembly = LoadAssembly ();
				m_Complete = true;
				if (assembly != null)
				{
					Debug.Log (&amp;quot;Done&amp;quot;);
					SendMessage (&amp;quot;OnAssemblyLoaded&amp;quot;, new WWWAssembly (m_AssemblyURL, assembly));
				}
				else
				{
					Debug.Log (&amp;quot;Failed&amp;quot;);
					SendMessage (&amp;quot;OnAssemblyLoadFailed&amp;quot;, m_AssemblyURL);
				}
			}
		}
	}&lt;/p&gt;
&lt;p&gt;private Assembly LoadAssembly ()
	{
		try
		{
			return Assembly.Load (m_WWW.bytes);
		}
		catch (System.Exception e)
		{
			m_ErrorString = e.ToString ();
			return null;
		}
	}
}&lt;/p&gt;
&lt;p&gt;public class WWWAssembly
{
	private string m_URL;
	private Assembly m_Assembly;&lt;/p&gt;
&lt;p&gt;public string &lt;span class=&quot;caps&quot;&gt;URL&lt;/span&gt;
	{
		get
		{
			return m_URL;
		}
	}&lt;/p&gt;
&lt;p&gt;public Assembly Assembly
	{
		get
		{
			return m_Assembly;
		}
	}&lt;/p&gt;
&lt;p&gt;public WWWAssembly (string url, Assembly assembly)
	{
		m_URL = url;
		m_Assembly = assembly;
	}
}&lt;/code&gt;&lt;/pre&gt;&lt;/noscript&gt;&lt;/div&gt;&lt;/p&gt;
&lt;p&gt;&lt;b&gt;/Assets/NewBehaviourScript.cs&lt;/b&gt;
&lt;script src=&#39;https://gist.github.com/3806151.js?file=NewBehaviourScript.cs&#39;&gt;&lt;/script&gt;&lt;div&gt;&lt;noscript&gt;&lt;pre&gt;&lt;code&gt;using UnityEngine;
using System.Collections;
using System.Reflection;&lt;/p&gt;
&lt;p&gt;public class NewBehaviourScript : MonoBehaviour
{
	private string m_MessageString = &amp;quot;Waiting for assembly&amp;quot;;&lt;/p&gt;
&lt;p&gt;void OnAssemblyLoaded (WWWAssembly loadedAssembly)
	{
		m_MessageString = &amp;quot;Assembly &amp;quot; + loadedAssembly.&lt;span class=&quot;caps&quot;&gt;URL&lt;/span&gt; + &amp;quot;\n&amp;quot;;&lt;/p&gt;
&lt;p&gt;System.Type type = loadedAssembly.Assembly.GetType (&amp;quot;MyClass&amp;quot;);&lt;/p&gt;
&lt;p&gt;FieldInfo field = type.GetField (&amp;quot;myString&amp;quot;);
		m_MessageString += (field.GetValue (null) as string) + &amp;quot;\n&amp;quot;;&lt;/p&gt;
&lt;p&gt;object instance = loadedAssembly.Assembly.CreateInstance (&amp;quot;MyClass&amp;quot;);
		MethodInfo method = type.GetMethod (&amp;quot;LogMyString&amp;quot;);
		m_MessageString += &amp;quot;Return value: &amp;quot; + method.Invoke (instance, null).ToString ();
	}&lt;/p&gt;
&lt;p&gt;void OnAssemblyLoadFailed (string url)
	{
		m_MessageString = &amp;quot;Failed to load assembly at &amp;quot; + url;
	}&lt;/p&gt;
&lt;p&gt;void OnGUI ()
	{
		GUILayout.BeginArea (new Rect (0.0f, 0.0f, Screen.width, Screen.height));
			GUILayout.FlexibleSpace ();
			GUILayout.BeginHorizontal ();
				GUILayout.FlexibleSpace ();
				GUILayout.Box (m_MessageString);
				GUILayout.FlexibleSpace ();
			GUILayout.EndHorizontal ();
			GUILayout.FlexibleSpace ();
		GUILayout.EndArea ();
	}
}&lt;/code&gt;&lt;/pre&gt;&lt;/noscript&gt;&lt;/div&gt;&lt;/p&gt;
&lt;p&gt;&lt;b&gt;/MyAssembly.cs&lt;/b&gt;
&lt;script src=&#39;https://gist.github.com/3806151.js?file=MyAssembly.cs&#39;&gt;&lt;/script&gt;&lt;div&gt;&lt;noscript&gt;&lt;pre&gt;&lt;code&gt;using UnityEngine;&lt;/p&gt;
&lt;p&gt;public class MyClass
{
	public static string myString = &amp;quot;This is my string from my class in my assembly&amp;quot;;&lt;/p&gt;
&lt;p&gt;public int LogMyString ()
	{
		Debug.Log (myString);
		return 2 + 2;
	}
}&lt;/code&gt;&lt;/pre&gt;&lt;/noscript&gt;&lt;/div&gt;&lt;/p&gt;
&lt;p&gt;&lt;b&gt;The assembly compile terminal command&lt;/b&gt;
&lt;script src=&#39;https://gist.github.com/3806151.js?file=Build.sh&#39;&gt;&lt;/script&gt;&lt;div&gt;&lt;noscript&gt;&lt;pre&gt;&lt;code&gt;mcs -target:library -out:MyAssembly.dll -r:/Applications/Unity/Unity.app/Contents/Frameworks/UnityEngine.dll  MyAssembly.cs&lt;/code&gt;&lt;/pre&gt;&lt;/noscript&gt;&lt;/div&gt;&lt;/p&gt;</description>
				<published>2010-01-05 00:00:00 +0100</published>
				<link>http://angryant.com/2010/01/05/downloading-the-hydra/</link>
			</item>
			
		
			
			<item>
				<title>New license of Path: GPL</title>
				<description>&lt;p&gt;Since I started at Unity, I haven&amp;#8217;t really had the time to do much updating (read: none) of my private projects. In sheer size, Path is the largest of those, so a while ago I realised that maintaining that project is simply not feasible.&lt;/p&gt;
&lt;p&gt;By adding the &lt;span class=&quot;caps&quot;&gt;GPL&lt;/span&gt; license option to the existing two license options (the show-my-logo license displayed on &lt;a href=&quot;/path/downloads/&quot;&gt;download from angryant.com&lt;/a&gt; and the option for a custom negotiated one), users are able to test and modify the source of Path directly &amp;#8211; before deciding on one of the other licenses.&lt;/p&gt;
&lt;p&gt;Also, although very messy (yes &amp;#8211; very), the source could also serve as a good learning resource for Unity editor scripting.&lt;/p&gt;
&lt;p&gt;The project repository is available on &lt;a href=&quot;http://github.com/AngryAnt/Path-GPL&quot;&gt;github&lt;/a&gt; .&lt;/p&gt;</description>
				<published>2009-11-15 00:00:00 +0100</published>
				<link>http://angryant.com/2009/11/15/new-license-of-path-gpl/</link>
			</item>
			
		
			
			<item>
				<title>CopyInspector</title>
				<description>&lt;p&gt;Yea I know. It&amp;#8217;s been a while. I do have two very good excuses though: 2.6 and Unite &amp;#8216;09. If you enjoyed those then zip it and read on. If not, I&amp;#8217;m really out of ammo and sorry for the delay.&lt;/p&gt;
&lt;p&gt;At Unite, I attended the talk by John Grden of infrared5 on the special (free) Unity for flash users day. During this session he complained about wanting to be able to copy his runtime transform changes inside the &lt;span class=&quot;caps&quot;&gt;IDE&lt;/span&gt; (he was copying by way of paper notes it seemed). I decided to take up the challenge when he continued with &amp;#8220;&amp;#8230; but someone is probably going to show me how to do that after this&amp;#8221; and after his talk I handed him a custom inspector editor script for solving that specific problem.&lt;/p&gt;
&lt;p&gt;Later at the conference I had some time to kill and did a rewrite to expand the script to be general for any component type. I didn&amp;#8217;t have the time to hand John that version, but I suppose I&amp;#8217;ll just email him a link to this post.&lt;/p&gt;
&lt;p&gt;So anyway &amp;#8211; lets talk implementation:&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;Add CopyInspector.cs to Assets/Editor.&lt;/li&gt;
	&lt;li&gt;Add CopyTransformInspector.cs to Assets/Editor.&lt;/li&gt;
	&lt;li&gt;For each other component to be made copy/paste-able:
	&lt;ul&gt;
		&lt;li&gt;Add CopyYourComponentTypeInspector.cs to Assets/Editor.&lt;/li&gt;
		&lt;li&gt;Rename it appropriately.&lt;/li&gt;
		&lt;li&gt;Rename the class to match the file name.&lt;/li&gt;
		&lt;li&gt;Change YourComponentType in &amp;#8220;[CustomEditor (typeof (YourComponentType))]&amp;#8221; to the type of component you wish to affect.&lt;/li&gt;
	&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&quot;http://eej.dk/angryant/wp-content/uploads/2009/11/CopyTransformInspector.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;p&gt;You&amp;#8217;ll notice that CopyTransformInspector has some additional code to it. This is due to the fact that this inspector is rendered non-standard and the code provided just replicates that.&lt;/p&gt;
&lt;p&gt;Not really sure why syntax highlighting is not kicking in&amp;#8230; Will have a look at that later.&lt;/p&gt;
&lt;p&gt;Codes!&lt;/p&gt;
&lt;p&gt;CopyInspector.cs
&lt;script src=&#39;https://gist.github.com/3806123.js?file=CopyInspector.cs&#39;&gt;&lt;/script&gt;&lt;div&gt;&lt;noscript&gt;&lt;pre&gt;&lt;code&gt;using UnityEngine;
using UnityEditor;
using System.Collections;
using System.Collections.Generic;
using System.Reflection;&lt;/p&gt;
&lt;p&gt;public class CopyInspector : Editor
{
	static System.Type m_OriginalType;
	static Dictionary object&amp;gt; m_Values;&lt;/p&gt;
&lt;p&gt;private List  GetProperties (Component component)
	{
		List &amp;lt;string&amp;gt; ignoredProperties;
		List  properties;&lt;/p&gt;
&lt;p&gt;properties = new List  ();
		ignoredProperties = new List &amp;lt;string&amp;gt; ();
		foreach (PropertyInfo propertyInfo in typeof (Component).GetProperties ())
		{
			ignoredProperties.Add (propertyInfo.Name);
		}&lt;/p&gt;
&lt;p&gt;foreach (PropertyInfo propertyInfo in component.GetType ().GetProperties ())
		{
			if (ignoredProperties.Contains (propertyInfo.Name))
			{
				continue;
			}
			properties.Add (propertyInfo);
		}&lt;/p&gt;
&lt;p&gt;return properties;
	}&lt;/p&gt;
&lt;p&gt;public override void OnInspectorGUI ()
	{
		DrawDefaultInspector ();
		OnCopyInspectorGUI ();
	}&lt;/p&gt;
&lt;p&gt;public void OnCopyInspectorGUI ()
	{
		bool enabled;
		List  properties;
		Component component;&lt;/p&gt;
&lt;p&gt;component = target as Component;&lt;/p&gt;
&lt;p&gt;if (component == null)
		{
			return;
		}&lt;/p&gt;
&lt;p&gt;GUILayout.Space (10.0f);&lt;/p&gt;
&lt;p&gt;Color backgroundColor = &lt;span class=&quot;caps&quot;&gt;GUI&lt;/span&gt;.backgroundColor;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;caps&quot;&gt;GUI&lt;/span&gt;.backgroundColor = new Color (0.8f, 0.8f, 0.8f);&lt;/p&gt;
&lt;p&gt;GUILayout.BeginVertical (&amp;quot;Toolbar&amp;quot;);&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;caps&quot;&gt;GUI&lt;/span&gt;.backgroundColor = backgroundColor;&lt;/p&gt;
&lt;p&gt;GUILayout.BeginHorizontal ();&lt;/p&gt;
&lt;p&gt;GUILayout.Space (10.0f);&lt;/p&gt;
&lt;p&gt;GUILayout.Label (&amp;quot;Copied: &amp;quot; + (m_OriginalType != null ? m_OriginalType.Name : &amp;quot;Nothing&amp;quot;), &amp;quot;MiniLabel&amp;quot;);&lt;/p&gt;
&lt;p&gt;GUILayout.FlexibleSpace ();&lt;/p&gt;
&lt;p&gt;if (GUILayout.Button (new GUIContent (&amp;quot;Copy&amp;quot;, &amp;quot;Copy component values&amp;quot;), &amp;quot;MiniLabel&amp;quot;))
				{
					m_OriginalType = target.GetType ();&lt;/p&gt;
&lt;p&gt;properties = GetProperties (component);&lt;/p&gt;
&lt;p&gt;m_Values = new Dictionary object&amp;gt; ();
					foreach (PropertyInfo property in properties)
					{
						m_Values [property] = property.GetValue (component, null);
					}
				}&lt;/p&gt;
&lt;p&gt;enabled = &lt;span class=&quot;caps&quot;&gt;GUI&lt;/span&gt;.enabled;
				&lt;span class=&quot;caps&quot;&gt;GUI&lt;/span&gt;.enabled = target.GetType () == m_OriginalType;&lt;/p&gt;
&lt;p&gt;GUILayout.Space (10.0f);&lt;/p&gt;
&lt;p&gt;if (GUILayout.Button (new GUIContent (&amp;quot;Paste&amp;quot;, &amp;quot;Paste component values&amp;quot;), &amp;quot;MiniLabel&amp;quot;))
				{
					properties = GetProperties (component);
					foreach (PropertyInfo property in properties)
					{
						if (!property.CanWrite)
						{
							continue;
						}&lt;/p&gt;
&lt;p&gt;property.SetValue (component, m_Values [property], null);
					}
				}&lt;/p&gt;
&lt;p&gt;GUILayout.Space (10.0f);&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;caps&quot;&gt;GUI&lt;/span&gt;.enabled = enabled;&lt;/p&gt;
&lt;p&gt;GUILayout.EndHorizontal ();&lt;/p&gt;
&lt;p&gt;GUILayout.EndVertical ();&lt;/p&gt;
&lt;p&gt;GUILayout.Space (-2.0f);
	}
}&lt;/code&gt;&lt;/pre&gt;&lt;/noscript&gt;&lt;/div&gt;&lt;/p&gt;
&lt;p&gt;CopyTransformInspector.cs
&lt;script src=&#39;https://gist.github.com/3806123.js?file=CopyTransformInspector.cs&#39;&gt;&lt;/script&gt;&lt;div&gt;&lt;noscript&gt;&lt;pre&gt;&lt;code&gt;using UnityEngine;
using UnityEditor;
using System.Collections;&lt;/p&gt;
&lt;p&gt;[CustomEditor (typeof (Transform))]
public class CopyTransformInspector : CopyInspector
{
	public override void OnInspectorGUI ()
	{
		Transform transform;
		Vector3 localPosition, localScale;
		Quaternion localRotation;&lt;/p&gt;
&lt;p&gt;transform = target as Transform;&lt;/p&gt;
&lt;p&gt;localPosition = EditorGUILayout.Vector3Field (&amp;quot;Position&amp;quot;, transform.localPosition);
		localRotation = Quaternion.Euler (EditorGUILayout.Vector3Field (&amp;quot;Rotation&amp;quot;, transform.localRotation.eulerAngles));
		localScale = EditorGUILayout.Vector3Field (&amp;quot;Scale&amp;quot;, transform.localScale);&lt;/p&gt;
&lt;p&gt;if (&lt;span class=&quot;caps&quot;&gt;GUI&lt;/span&gt;.changed)
		{
			transform.localPosition = localPosition;
			transform.localRotation = localRotation;
			transform.localScale = localScale;
		}&lt;/p&gt;
&lt;p&gt;OnCopyInspectorGUI ();
	}
}&lt;/code&gt;&lt;/pre&gt;&lt;/noscript&gt;&lt;/div&gt;&lt;/p&gt;
&lt;p&gt;CopyYourComponentTypeInspector.cs
&lt;script src=&#39;https://gist.github.com/3806123.js?file=CopyYourComponentTypeInspector.cs&#39;&gt;&lt;/script&gt;&lt;div&gt;&lt;noscript&gt;&lt;pre&gt;&lt;code&gt;using UnityEngine;
using UnityEditor;
using System.Collections;&lt;/p&gt;
&lt;p&gt;[CustomEditor (typeof (YourComponentType))]
public class CopyYourComponentTypeInspector : CopyInspector{}&lt;/code&gt;&lt;/pre&gt;&lt;/noscript&gt;&lt;/div&gt;&lt;/p&gt;</description>
				<published>2009-11-04 00:00:00 +0100</published>
				<link>http://angryant.com/2009/11/04/copyinspector/</link>
			</item>
			
		
			
			<item>
				<title>Magnetic</title>
				<description>&lt;p&gt;You know how Little Big Planet, Kingdom Hearts and similar have various pickups move towards your character when you get up close? Yea I also find that&amp;#8217;s a nice bit of polish.&lt;/p&gt;
&lt;p&gt;One way of getting that up and running in Unity is via the code below. Setup:&lt;/p&gt;
&lt;ol&gt;
	&lt;li&gt;Add all objects you want to get attracted to the player to a special layer.&lt;/li&gt;
	&lt;li&gt;Attach the script below to your player.&lt;/li&gt;
	&lt;li&gt;Set the layer mask on the component to include the layer from step one.&lt;/li&gt;
	&lt;li&gt;Tweak, play, repeat.&lt;/li&gt;
&lt;/ol&gt;
&lt;script src=&#39;https://gist.github.com/3804429.js?file=&#39;&gt;&lt;/script&gt;&lt;div&gt;&lt;noscript&gt;&lt;pre&gt;&lt;code&gt;using UnityEngine;
using System.Collections;

public class Magnetic : MonoBehaviour
{
	public LayerMask m_MagneticLayers;
	public Vector3 m_Position;
	public float m_Radius;
	public float m_Force;

	void FixedUpdate ()
	{
		Collider[] colliders;
		Rigidbody rigidbody;

		colliders = Physics.OverlapSphere (transform.position + m_Position, m_Radius, m_MagneticLayers);
		foreach (Collider collider in colliders)
		{
			rigidbody = (Rigidbody) collider.gameObject.GetComponent (typeof (Rigidbody));
			if (rigidbody == null)
			{
				continue;
			}
			rigidbody.AddExplosionForce (m_Force * -1, transform.position + m_Position, m_Radius);
		}
	}

	void OnDrawGizmosSelected ()
	{
		Gizmos.color = Color.red;
		Gizmos.DrawWireSphere (transform.position + m_Position, m_Radius);
	}
}&lt;/code&gt;&lt;/pre&gt;&lt;/noscript&gt;&lt;/div&gt;</description>
				<published>2009-10-04 00:00:00 +0200</published>
				<link>http://angryant.com/2009/10/04/magnetic/</link>
			</item>
			
		
			
			<item>
				<title>GUI drag-drop</title>
				<description>&lt;p&gt;A lot of people have been asking for tips on how to implement drag-drop functionality in Unity &lt;span class=&quot;caps&quot;&gt;GUI&lt;/span&gt; scripting, so I decided to put together a reusable script for the purpose.&lt;/p&gt;
&lt;p&gt;Basically the solution requires that your data class derives from GUIDraggableObject and at some point in its OnGUI method call Drag( Rect ) &amp;#8211; just like &lt;span class=&quot;caps&quot;&gt;GUI&lt;/span&gt;.Window handles dragging.&lt;/p&gt;
&lt;p&gt;Right. Codez. First off the GUIDraggableObject.cs file:&lt;/p&gt;
&lt;script src=&#39;https://gist.github.com/3804740.js?file=GUIDraggableObject.cs&#39;&gt;&lt;/script&gt;&lt;div&gt;&lt;noscript&gt;&lt;pre&gt;&lt;code&gt;using UnityEngine;
using System.Collections;

public class GUIDraggableObject
{
	protected Vector2 m_Position;
	private Vector2 m_DragStart;
	private bool m_Dragging;

	public GUIDraggableObject (Vector2 position)
	{
		m_Position = position;
	}

	public bool Dragging
	{
		get
		{
			return m_Dragging;
		}
	}

	public Vector2 Position
	{
		get
		{
			return m_Position;
		}

		set
		{
			m_Position = value;
		}
	}

	public void Drag (Rect draggingRect)
	{
		if (Event.current.type == EventType.MouseUp)
		{
			m_Dragging = false;
		}
		else if (Event.current.type == EventType.MouseDown &amp;amp;amp;&amp;amp;amp; draggingRect.Contains (Event.current.mousePosition))
		{
			m_Dragging = true;
			m_DragStart = Event.current.mousePosition - m_Position;
			Event.current.Use();
		}

		if (m_Dragging)
		{
			m_Position = Event.current.mousePosition - m_DragStart;
		}
	}
}&lt;/code&gt;&lt;/pre&gt;&lt;/noscript&gt;&lt;/div&gt;
&lt;p&gt;An example data class inheriting from GUIDraggableObject &amp;#8211; DataObject.cs:&lt;/p&gt;
&lt;script src=&#39;https://gist.github.com/3804740.js?file=DataObject.cs&#39;&gt;&lt;/script&gt;&lt;div&gt;&lt;noscript&gt;&lt;pre&gt;&lt;code&gt;using UnityEngine;
using System.Collections;

public class DataObject : GUIDraggableObject
// This class just has the capability of being dragged in GUI - it could be any type of generic data class
{
	private string m_Name;
	private int m_Value;

	public DataObject (string name, int value, Vector2 position) : base (position)
	{
		m_Name = name;
		m_Value = value;
	}

	public void OnGUI ()
	{
		Rect drawRect = new Rect (m_Position.x, m_Position.y, 100.0f, 100.0f), dragRect;

		GUILayout.BeginArea (drawRect, GUI.skin.GetStyle (&amp;amp;quot;Box&amp;amp;quot;));
			GUILayout.Label (m_Name, GUI.skin.GetStyle (&amp;amp;quot;Box&amp;amp;quot;), GUILayout.ExpandWidth (true));

			dragRect = GUILayoutUtility.GetLastRect ();
			dragRect = new Rect (dragRect.x + m_Position.x, dragRect.y + m_Position.y, dragRect.width, dragRect.height);

			if (Dragging)
			{
				GUILayout.Label (&amp;amp;quot;Wooo...&amp;amp;quot;);
			}
			else if (GUILayout.Button (&amp;amp;quot;Yes!&amp;amp;quot;))
			{
				Debug.Log (&amp;amp;quot;Yes. It is &amp;amp;quot; + m_Value + &amp;amp;quot;!&amp;amp;quot;);
			}
		GUILayout.EndArea ();

		Drag (dragRect);
	}
}&lt;/code&gt;&lt;/pre&gt;&lt;/noscript&gt;&lt;/div&gt;
&lt;p&gt;And finally, this script demonstrates how you could have your data manager class use Unity &lt;span class=&quot;caps&quot;&gt;GUI&lt;/span&gt; for data visualisation with drag-drop enabled &amp;#8211; MyMonoBehaviour.cs:&lt;/p&gt;
&lt;script src=&#39;https://gist.github.com/3804740.js?file=MyMonoBehaviour.cs&#39;&gt;&lt;/script&gt;&lt;div&gt;&lt;noscript&gt;&lt;pre&gt;&lt;code&gt;using UnityEngine;
using System.Collections;
using System.Collections.Generic;

public class MyMonoBehaviour : MonoBehaviour
{
	private List&amp;amp;lt; DataObject &amp;amp;gt; m_Data = new List&amp;amp;lt; DataObject &amp;amp;gt; ();
	private Rect dropTargetRect = new Rect (10.0f, 10.0f, 30.0f, 30.0f);

	void Awake ()
	{
		m_Data.Add (new DataObject (&amp;amp;quot;One&amp;amp;quot;, 1, new Vector2 (20.0f * Random.Range (1.0f, 10.0f), 20.0f * Random.Range (1.0f, 10.0f))));
		m_Data.Add (new DataObject (&amp;amp;quot;Two&amp;amp;quot;, 2, new Vector2 (20.0f * Random.Range (1.0f, 10.0f), 20.0f * Random.Range (1.0f, 10.0f))));
		m_Data.Add (new DataObject (&amp;amp;quot;Three&amp;amp;quot;, 3, new Vector2 (20.0f * Random.Range (1.0f, 10.0f), 20.0f * Random.Range (1.0f, 10.0f))));
		m_Data.Add (new DataObject (&amp;amp;quot;Four&amp;amp;quot;, 4, new Vector2 (20.0f * Random.Range (1.0f, 10.0f), 20.0f * Random.Range (1.0f, 10.0f))));
		m_Data.Add (new DataObject (&amp;amp;quot;Five&amp;amp;quot;, 5, new Vector2 (20.0f * Random.Range (1.0f, 10.0f), 20.0f * Random.Range (1.0f, 10.0f))));
	}

	public void OnGUI ()
	{
		DataObject toFront, dropDead;
		Color color;

		GUI.Box(dropTargetRect, &amp;amp;quot;Die&amp;amp;quot;);

		toFront = dropDead = null;
		foreach (DataObject data in m_Data)
		{
			color = GUI.color;

			if (data.Dragging)
			{
				GUI.color = dropTargetRect.Contains (Event.current.mousePosition) ? Color.red : color;
			}

			data.OnGUI ();

			GUI.color = color;

			if (data.Dragging)
			{
				if (m_Data.IndexOf (data) != m_Data.Count - 1)
				{
					toFront = data;
				}
			}
		}

		if (toFront != null)
		// Move an object to front if needed
		{
			m_Data.Remove (toFront);
			m_Data.Add (toFront);
		}
	}
}&lt;/code&gt;&lt;/pre&gt;&lt;/noscript&gt;&lt;/div&gt;
&lt;p&gt;Ah yea and an example of how you could do the same in an editor window &amp;#8211; MyEditorWindow.cs:&lt;/p&gt;
&lt;script src=&#39;https://gist.github.com/3804740.js?file=MyEditorWindow.cs&#39;&gt;&lt;/script&gt;&lt;div&gt;&lt;noscript&gt;&lt;pre&gt;&lt;code&gt;using UnityEngine;
using UnityEditor;
using System.Collections;
using System.Collections.Generic;

public class MyEditorWindow : EditorWindow
{
	private List&amp;amp;lt; DataObject &amp;amp;gt; m_Data = new List&amp;amp;lt; DataObject &amp;amp;gt; ();
	private bool doRepaint = false;
	private Rect dropTargetRect = new Rect (10.0f, 10.0f, 30.0f, 30.0f);

	public MyEditorWindow ()
	{
		m_Data.Add (new DataObject (&amp;amp;quot;One&amp;amp;quot;, 1, new Vector2 (20.0f * Random.Range (1.0f, 10.0f), 20.0f * Random.Range (1.0f, 10.0f))));
		m_Data.Add (new DataObject (&amp;amp;quot;Two&amp;amp;quot;, 2, new Vector2 (20.0f * Random.Range (1.0f, 10.0f), 20.0f * Random.Range (1.0f, 10.0f))));
		m_Data.Add (new DataObject (&amp;amp;quot;Three&amp;amp;quot;, 3, new Vector2 (20.0f * Random.Range (1.0f, 10.0f), 20.0f * Random.Range (1.0f, 10.0f))));
		m_Data.Add (new DataObject (&amp;amp;quot;Four&amp;amp;quot;, 4, new Vector2 (20.0f * Random.Range (1.0f, 10.0f), 20.0f * Random.Range (1.0f, 10.0f))));
		m_Data.Add (new DataObject (&amp;amp;quot;Five&amp;amp;quot;, 5, new Vector2 (20.0f * Random.Range (1.0f, 10.0f), 20.0f * Random.Range (1.0f, 10.0f))));
	}

	[MenuItem (&amp;amp;quot;Window/MyEditorWindow&amp;amp;quot;)]
	public static void Launch ()
	{
		GetWindow (typeof (MyEditorWindow)).Show ();
	}

	public void Update ()
	{
		if (doRepaint)
		{
			Repaint ();
		}
	}

	public void OnGUI ()
	{
		DataObject toFront, dropDead;
		bool previousState, flipRepaint;
		Color color;

		GUI.Box(dropTargetRect, &amp;amp;quot;Die&amp;amp;quot;);

		toFront = dropDead = null;
		doRepaint = false;
		flipRepaint = false;
		foreach (DataObject data in m_Data)
		{
			previousState = data.Dragging;

			color = GUI.color;

			if (previousState)
			{
				GUI.color = dropTargetRect.Contains (Event.current.mousePosition) ? Color.red : color;
			}

			data.OnGUI ();

			GUI.color = color;

			if (data.Dragging)
			{
				doRepaint = true;

				if (m_Data.IndexOf (data) != m_Data.Count - 1)
				{
					toFront = data;
				}
			}
			else if (previousState)
			{
				flipRepaint = true;

				if (dropTargetRect.Contains (Event.current.mousePosition))
				{
					dropDead = data;
				}
			}
		}

		if (toFront != null)
		// Move an object to front if needed
		{
			m_Data.Remove (toFront);
			m_Data.Add (toFront);
		}

		if (dropDead != null)
		// Destroy an object if needed
		{
			m_Data.Remove (dropDead);
		}

		if (flipRepaint)
		// If some object just stopped being dragged, we should repaing for the state change
		{
			Repaint ();
		}
	}
}&lt;/code&gt;&lt;/pre&gt;&lt;/noscript&gt;&lt;/div&gt;</description>
				<published>2009-09-18 00:00:00 +0200</published>
				<link>http://angryant.com/2009/09/18/gui-drag-drop/</link>
			</item>
			
		
			
			<item>
				<title>Logging an entire GameObject</title>
				<description>&lt;p&gt;More stuff from the shadowy corners of my hard-drive. Don&amp;#8217;t remember the context, but someone needed to log every single piece of information available on a particular GameObject. I suppose this could be useful for end-user &amp;#8220;This GameObject Just Went Completely &lt;span class=&quot;caps&quot;&gt;FUBAR&lt;/span&gt;&amp;#8221;&amp;#8482; scenarios.&lt;/p&gt;
&lt;p&gt;Anyway &amp;#8211; it has reflection in it which by definition makes it cool.&lt;/p&gt;
&lt;p&gt;Le codez:
&lt;script src=&#39;https://gist.github.com/3804730.js?file=&#39;&gt;&lt;/script&gt;&lt;div&gt;&lt;noscript&gt;&lt;pre&gt;&lt;code&gt;using UnityEngine;
using System.Reflection;&lt;/p&gt;
&lt;p&gt;public class Utilities
{
	/* &amp;#8230; */&lt;/p&gt;
&lt;p&gt;static void LogGameObject( GameObject gameObject, bool children )
	{
		Component[] components = gameObject.GetComponents( typeof( Component ) );
		FieldInfo[] fields;
		PropertyInfo[] properties;&lt;/p&gt;
&lt;p&gt;Debug.Log( gameObject.name + &amp;quot;:&amp;quot; );&lt;/p&gt;
&lt;p&gt;foreach( Component component in components )
		{
			Debug.Log( &amp;quot; &amp;#8211; &amp;quot; + component.GetType().Name + &amp;quot;:&amp;quot; );
			fields = component.GetType().GetFields();
			foreach( FieldInfo field in fields )
			{
				Debug.Log( &amp;quot; .&amp;quot; + field.Name + &amp;quot; = &amp;quot; + field.GetValue( component ) );
			}&lt;/p&gt;
&lt;p&gt;properties = component.GetType().GetProperties();
			foreach( PropertyInfo property in properties )
			{
				Debug.Log( &amp;quot; .&amp;quot; + property.Name + &amp;quot; = &amp;quot; + property.GetGetMethod().Invoke( component, null ) );
			}
		}&lt;/p&gt;
&lt;p&gt;if( children )
		{
			foreach( Transform transform in gameObject.transform )
			{
				Debug.Log( &amp;quot;-&amp;gt;&amp;quot; );
				LogGameObject( transform.gameObject, children );
			}
		}
	}&lt;/p&gt;
&lt;p&gt;static void LogGameObject( GameObject gameObject )
	{
		LogGameObject( gameObject, false );
	}&lt;/p&gt;
&lt;p&gt;/* &amp;#8230; */
}&lt;/code&gt;&lt;/pre&gt;&lt;/noscript&gt;&lt;/div&gt;&lt;/p&gt;</description>
				<published>2009-09-17 00:00:00 +0200</published>
				<link>http://angryant.com/2009/09/17/logging-an-entire-gameobject/</link>
			</item>
			
		
			
			<item>
				<title>I bet you can't type an A!</title>
				<description>&lt;p&gt;Keys got special meaning and shouldn&amp;#8217;t be fed into parts of the &lt;span class=&quot;caps&quot;&gt;GUI&lt;/span&gt;? This handy little snippet takes care of that job:&lt;/p&gt;
&lt;script src=&#39;https://gist.github.com/3804718.js?file=&#39;&gt;&lt;/script&gt;&lt;div&gt;&lt;noscript&gt;&lt;pre&gt;&lt;code&gt;private string text = &amp;amp;quot;I bet you can&amp;amp;#39;t type an A!&amp;amp;quot;;



static void DisableKeys( KeyCode[] keys )
{
	if( !Event.current.isKey )
	{
		return;
	}

	foreach( KeyCode key in keys )
	{
		if( Event.current.keyCode == key )
		{
			Event.current.Use();
		}
	}
}



static void DisableKey( KeyCode key )
{
	DisableKeys( new KeyCode[]{ key } );
}



void OnGUI()
{
	DisableKey( KeyCode.A );
	text = GUILayout.TextArea( text );
}&lt;/code&gt;&lt;/pre&gt;&lt;/noscript&gt;&lt;/div&gt;</description>
				<published>2009-09-07 00:00:00 +0200</published>
				<link>http://angryant.com/2009/09/07/i-bet-you-cant-type-an-a/</link>
			</item>
			
		
			
			<item>
				<title>Where did that component go?</title>
				<description>&lt;p&gt;In larger Unity projects, components sometimes &amp;#8220;get lost&amp;#8221; &amp;#8211; you refactor something and there&amp;#8217;s an audio source still attached somewhere in your hierarchy and you simply cannot remember where.&lt;/p&gt;
&lt;p&gt;You&amp;#8217;re not the first one. A while ago I created a simple editor script to combat this issue as a response to a similar frustrated post on the Unity forums. Earlier this week I stumbled on the script again, picked it up and dusted it off a bit and decided to give it another chance to shine in some spotlight.&lt;/p&gt;
&lt;p&gt;Use:&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;Save the script as &lt;i&gt;ComponentLister.cs&lt;/i&gt;.&lt;/li&gt;
	&lt;li&gt;Place it in /Assets/Editor in your project.&lt;/li&gt;
	&lt;li&gt;Launch the window from the Component menu &amp;#8211; should be the last item titled &amp;#8220;Component lister&amp;#8221;.&lt;/li&gt;
	&lt;li&gt;Click &amp;#8220;Refresh&amp;#8221; to list all components in your scene and the GameObjects to which they are attached.&lt;/li&gt;
	&lt;li&gt;To investigate, click a GameObject name in the list and it will be set as the active selection in the hierarchy.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Codes:
&lt;script src=&#39;https://gist.github.com/3804708.js?file=&#39;&gt;&lt;/script&gt;&lt;div&gt;&lt;noscript&gt;&lt;pre&gt;&lt;code&gt;using UnityEngine;
using UnityEditor;
using System.Collections;&lt;/p&gt;
&lt;p&gt;public class ComponentLister : EditorWindow
{
	private Hashtable sets = new Hashtable();
	private Vector2 scrollPosition;&lt;/p&gt;
&lt;p&gt;[ MenuItem( &amp;quot;Component/Component lister&amp;quot; ) ]
	public static void Launch()
	{
		EditorWindow window = GetWindow( typeof( ComponentLister ) );
		window.Show();
	}&lt;/p&gt;
&lt;p&gt;public void UpdateList()
	{
		Object[] objects;&lt;/p&gt;
&lt;p&gt;sets.Clear();&lt;/p&gt;
&lt;p&gt;objects = FindObjectsOfType( typeof( Component ) );
		foreach( Component component in objects )
		{
			if( !sets.ContainsKey( component.GetType() ) )
			{
				sets[ component.GetType() ] = new ArrayList();
			}&lt;/p&gt;
&lt;p&gt;( ( ArrayList )sets[ component.GetType() ] ).Add( component.gameObject );
		}
	}&lt;/p&gt;
&lt;p&gt;public void OnGUI()
	{
		GUILayout.BeginHorizontal( &lt;span class=&quot;caps&quot;&gt;GUI&lt;/span&gt;.skin.GetStyle( &amp;quot;Box&amp;quot; ) );
			GUILayout.Label( &amp;quot;Components in scene:&amp;quot; );
			GUILayout.FlexibleSpace();&lt;/p&gt;
&lt;p&gt;if( GUILayout.Button( &amp;quot;Refresh&amp;quot; ) )
			{
				UpdateList();
			}
		GUILayout.EndHorizontal();&lt;/p&gt;
&lt;p&gt;scrollPosition = GUILayout.BeginScrollView(scrollPosition);&lt;/p&gt;
&lt;p&gt;foreach( System.Type type in sets.Keys )
			{
				GUILayout.Label( type.Name + &amp;quot;:&amp;quot; );
				foreach( GameObject gameObject in ( ArrayList )sets[ type ] )
				{
					if( GUILayout.Button( gameObject.name ) )
					{
						Selection.activeObject = gameObject;
					}
				}
			}&lt;/p&gt;
&lt;p&gt;GUILayout.EndScrollView();
	}
}&lt;/code&gt;&lt;/pre&gt;&lt;/noscript&gt;&lt;/div&gt;&lt;/p&gt;</description>
				<published>2009-08-31 00:00:00 +0200</published>
				<link>http://angryant.com/2009/08/31/where-did-that-component-go/</link>
			</item>
			
		
			
			<item>
				<title>UnitySteer</title>
				<description>&lt;p&gt;Ok so I&amp;#8217;ve been quite busy lately and so I haven&amp;#8217;t been updating the site as much as I should. In the beginning of July, UnitySteer was released. Ricardo Mendez of &lt;a href=&quot;http://arges-systems.com&quot;&gt;Arges Systems&lt;/a&gt; did the majority of the work and I did some early coding and design on the project.&lt;/p&gt;
&lt;p&gt;UnitySteer is a collection of steering behaviours &amp;#8211; enabling complex movement behaviour by combining the default behaviour set or creating new custom ones. The project is based on OpenSteerDotNet which is a .net port of OpenSteer. During the implementation of the Unity interface, however, a lot of the existing code base was either rewritten or discarded completely, so code based on the previous OpenSteer versions is not directly compatible.&lt;/p&gt;
&lt;p&gt;For more information, check out &lt;a href=&quot;http://www.arges-systems.com/articles/35/unitysteer-steering-components-for-unity&quot;&gt;Ricardo&amp;#8217;s blog post&lt;/a&gt; and the &lt;a href=&quot;http://github.com/ricardojmendez/UnitySteer/tree/master&quot;&gt;library&lt;/a&gt; and &lt;a href=&quot;http://github.com/ricardojmendez/UnitySteerExamples/tree/master&quot;&gt;examples&lt;/a&gt; repositories.&lt;/p&gt;
&lt;p&gt;UnitySteer is open source, released under the &lt;a href=&quot;http://www.opensource.org/licenses/mit-license.php&quot;&gt;&lt;span class=&quot;caps&quot;&gt;MIT&lt;/span&gt; license&lt;/a&gt; .&lt;/p&gt;</description>
				<published>2009-08-19 00:00:00 +0200</published>
				<link>http://angryant.com/2009/08/19/unitysteer/</link>
			</item>
			
		
			
			<item>
				<title>New and improved: Behave 1.0 released</title>
				<description>&lt;p&gt;After lots of late night tinkering, Behave 1.0 is finally out. This version fixes all known issues with unity 2.5, brings in lessons learned from Path 1.0 meaning a smashing new interface plus lots of new additions.&lt;/p&gt;
&lt;p&gt;The new tree editor contains interface improvements allowing for much faster tree building: A brand new component bar, sub-tree movement, integration with the standard unity inspector and more.&lt;/p&gt;
&lt;p&gt;In this version, the Behave runtime have also received an update. More runtime data is more easily available from the tree and library classes and methods implemented in your agent scripts are now mapped directly (by name) to action and decorator invokes.&lt;/p&gt;
&lt;p&gt;This site will be updated as soon as possible with all the changes and additions and the documentation will be brought up to speed.&lt;/p&gt;
&lt;p&gt;So what are you waiting for? Head on over to the downloads section and get your copy today!&lt;/p&gt;</description>
				<published>2009-05-18 00:00:00 +0200</published>
				<link>http://angryant.com/2009/05/18/new-and-improved-behave-10-released/</link>
			</item>
			
		
			
			<item>
				<title>Behave 0.3b and unity 2.5</title>
				<description>&lt;p&gt;Apart from the hotfix, the following steps need to be followed when using Behave 0.3b in unity 2.5:&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;When building an asset, make sure to use the shortcut for it and not the menu.&lt;/li&gt;
	&lt;li&gt;Behave.dll needs to be in a subfolder of your Assets folder named &amp;#8220;Assets&amp;#8221;. That is, for instance, &amp;#8220;MyProject/Assets/Assets/Behave.dll&amp;#8221;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I&amp;#8217;m currently working on a new version of Behave which will resolve these and other issues apart from adding new features.&lt;/p&gt;</description>
				<published>2009-04-08 00:00:00 +0200</published>
				<link>http://angryant.com/2009/04/08/behave-03b-and-unity-25/</link>
			</item>
			
		
			
			<item>
				<title>Behave 0.3b hotfix</title>
				<description>&lt;p&gt;Changes in the unity 2.5 editor &lt;span class=&quot;caps&quot;&gt;API&lt;/span&gt; has resulted in some bad issues in Behave 0.3b &amp;#8211; a hotfix to solve the most critical ones &amp;#8211; making the Behave editor interface usable again is available in the Behave downloads section.&lt;/p&gt;
&lt;p&gt;I&amp;#8217;ll be working on a more extensive rewrite. Stay tuned.&lt;/p&gt;</description>
				<published>2009-03-20 00:00:00 +0100</published>
				<link>http://angryant.com/2009/03/20/behave-03b-hotfix/</link>
			</item>
			
		
			
			<item>
				<title>Path tutorial video available</title>
				<description>&lt;p&gt;I just finished the first Path tutorial video. &lt;a href=&quot;/resources/path/TheBasics.mov&quot;&gt;Give it a look&lt;/a&gt;.&lt;/p&gt;</description>
				<published>2009-03-19 00:00:00 +0100</published>
				<link>http://angryant.com/2009/03/19/path-tutorial-video-available/</link>
			</item>
			
		
			
			<item>
				<title>Path 1.0 launched!</title>
				<description>&lt;p&gt;Earlier today unity 2.5 launched so here we go! Path 1.0 and a pretty new website is now online. Victory!&lt;/p&gt;</description>
				<published>2009-03-18 00:00:00 +0100</published>
				<link>http://angryant.com/2009/03/18/path-10-launched/</link>
			</item>
			
		
			
			<item>
				<title>Continued community tutorials</title>
				<description>&lt;p&gt;Arges from the unity community has been keeping busy. His latest tutorial goes more in-depth with Behave and unity, providing an interesting and useful example to work with.&lt;/p&gt;
&lt;p&gt;Have a read at &lt;a href=&quot;http://www.arges-systems.com/articles/14/behavior-trees-branching-paths-with-selectors&quot;&gt;http://www.arges-systems.com/articles/14/behavior-trees-branching-paths-with-selectors&lt;/a&gt; .&lt;/p&gt;</description>
				<published>2008-12-17 00:00:00 +0100</published>
				<link>http://angryant.com/2008/12/17/community-tutorial-2/</link>
			</item>
			
		
			
			<item>
				<title>Community tutorial</title>
				<description>&lt;p&gt;Arges from the unity community just made a tutorial on Behave available. Check it out at &lt;a href=&quot;http://www.arges-systems.com/articles/2/behavior-trees-in-unity-with-behave&quot;&gt;http://www.arges-systems.com/articles/2/behavior-trees-in-unity-with-behave&lt;/a&gt; .&lt;/p&gt;</description>
				<published>2008-11-30 00:00:00 +0100</published>
				<link>http://angryant.com/2008/11/30/community-tutorial/</link>
			</item>
			
		
			
			<item>
				<title>New tutorial</title>
				<description>&lt;p&gt;Just added a second tutorial &amp;#8220;Taking advantage of &lt;span class=&quot;caps&quot;&gt;OOP&lt;/span&gt; in agents&amp;#8221;. It is now available in the Tutorials section of the Documentation page.&lt;/p&gt;</description>
				<published>2008-11-28 00:00:00 +0100</published>
				<link>http://angryant.com/2008/11/28/new-tutorial/</link>
			</item>
			
		
			
			<item>
				<title>First tutorial available</title>
				<description>&lt;p&gt;Check it out in the Tutorials section of the Documentation page.&lt;/p&gt;</description>
				<published>2008-11-04 00:00:00 +0100</published>
				<link>http://angryant.com/2008/11/04/first-tutorial-available/</link>
			</item>
			
		
			
			<item>
				<title>Behave 0.3b</title>
				<description>&lt;p&gt;Fixes and additions:&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;Various tweaks to the editor UI&lt;/li&gt;
	&lt;li&gt;Optimised the compiler&lt;/li&gt;
	&lt;li&gt;Fixed the following editor bugs from the bug list:
	&lt;ul&gt;
		&lt;li&gt;When the editor scrips are recompiled and when the user enters and exits play mode, running editors will loose references, causing undetermined behaviour&lt;/li&gt;
		&lt;li&gt;When a compile fails, the Behave compiler is locked and unusable &amp;#8211; requiring a unity relaunch&lt;/li&gt;
	&lt;/ul&gt;&lt;/li&gt;
	&lt;li&gt;Implemented the following wishlist items:
	&lt;ul&gt;
		&lt;li&gt;Behaviour tree decorators&lt;/li&gt;
		&lt;li&gt;Stand-alone edition of the Behave editor&lt;/li&gt;
		&lt;li&gt;Behaviour tree debugging features&lt;/li&gt;
	&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;</description>
				<published>2008-11-02 00:00:00 +0100</published>
				<link>http://angryant.com/2008/11/02/behave-03b/</link>
			</item>
			
		
			
			<item>
				<title>unite '08 open-mic session</title>
				<description>&lt;p&gt;At this years unite, David and Tom (of unity3D) persuaded me to do an open mic session a day into the conference. I&amp;#8217;ve been informed that this session was captured on video, so as soon as it is available to me, I&amp;#8217;ll make it available here. I had one day of preparation for this while attending the conference, so I have no idea of its usefulness, but I guess it&amp;#8217;s better than nothing. Stay tuned.&lt;/p&gt;</description>
				<published>2008-10-25 00:00:00 +0200</published>
				<link>http://angryant.com/2008/10/25/unite-08-open-mic-session/</link>
			</item>
			
		
			
			<item>
				<title>Behave 0.2b</title>
				<description>&lt;p&gt;Fixes and additions:&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;Made the demo project a whole lot more interesting&lt;/li&gt;
	&lt;li&gt;Implemented the editor wish list item: Ability to move trees between collections&lt;/li&gt;
	&lt;li&gt;Various tweaks to the editor UI&lt;/li&gt;
	&lt;li&gt;Fixed a ton of bugs in the compiler&lt;/li&gt;
	&lt;li&gt;Fixed the following editor bugs from the bug list:
	&lt;ul&gt;
		&lt;li&gt;Not able to delete collections from library&lt;/li&gt;
		&lt;li&gt;Not able to delete trees from library&lt;/li&gt;
		&lt;li&gt;Not able to rename collections from library&lt;/li&gt;
		&lt;li&gt;Not able to rename trees from library&lt;/li&gt;
		&lt;li&gt;Missing &amp;#8220;tree has been changed, save changes?&amp;#8221; dialog&lt;/li&gt;
	&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;</description>
				<published>2008-09-24 00:00:00 +0200</published>
				<link>http://angryant.com/2008/09/24/behave-02b/</link>
			</item>
			
		
			
			<item>
				<title>Behave 0.1b</title>
				<description>&lt;p&gt;Fixes and additions:&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;Some documentation is available&lt;/li&gt;
	&lt;li&gt;Compiler is now creating sensible output&lt;/li&gt;
	&lt;li&gt;A simple test tree and script using it is provided with the demo&lt;/li&gt;
	&lt;li&gt;Documentation is linked directly from the unity help menu&lt;/li&gt;
	&lt;li&gt;Less spamming of the log with debug information&lt;/li&gt;
&lt;/ul&gt;</description>
				<published>2008-09-09 00:00:00 +0200</published>
				<link>http://angryant.com/2008/09/09/behave-01b/</link>
			</item>
			
		
			
			<item>
				<title>Behave pre-release</title>
				<description>&lt;p&gt;The purpose of this pre-release is to let the curious try the waters. It is shiny, but don&amp;#8217;t build a project around it just yet.&lt;/p&gt;
&lt;p&gt;Currently the editor is functional, assets can be loaded and saved, the compiler runs and results can be tested. However some minor features are not yet available in the editor, compile results are faulty to say the least and very little testing has been done. Run it at your own risk as usual.&lt;/p&gt;
&lt;p&gt;Finally the license will be revised. Currently I just duplicated the license from the Path project in order to get this boat floating asap. Documentation will be available shortly.&lt;/p&gt;
&lt;p&gt;Specs:&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;Available for indie as well as pro&lt;/li&gt;
	&lt;li&gt;Can run in webplayers as well as stand-alone&lt;/li&gt;
	&lt;li&gt;Requires no additional installations&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Features:&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;Implements behaviour trees&lt;/li&gt;
	&lt;li&gt;Re-use common behaviour by reference&lt;/li&gt;
	&lt;li&gt;Drag and drop editor interface inside the unity editor&lt;/li&gt;
	&lt;li&gt;Simple connection to character actions via C# interface&lt;/li&gt;
	&lt;li&gt;Designed trees are built to .net assembly code for maximum performance&lt;/li&gt;
&lt;/ul&gt;</description>
				<published>2008-09-08 00:00:00 +0200</published>
				<link>http://angryant.com/2008/09/08/behave-pre-release/</link>
			</item>
			
		
			
			<item>
				<title>Path beta 0.3b</title>
				<description>&lt;p&gt;Fixed some more bugs and improved on the path seeking algorithm which is now not limited to a single orientation of an entire mesh. For instance a PathFinder will now be able to walk up the walls, across the ceiling and back onto the floor if you so desire.&lt;/p&gt;</description>
				<published>2008-04-15 00:00:00 +0200</published>
				<link>http://angryant.com/2008/04/15/path-beta-03b/</link>
			</item>
			
		
			
			<item>
				<title>Path beta 0.2b</title>
				<description>&lt;p&gt;In this version several bugfixes have been implemented and additional debugging information has been made available. See online documentation for more information on bug reporting.&lt;/p&gt;</description>
				<published>2008-04-12 00:00:00 +0200</published>
				<link>http://angryant.com/2008/04/12/path-beta-02b/</link>
			</item>
			
		
			
			<item>
				<title>Path beta 0.1b</title>
				<description>&lt;p&gt;In this version, the interface of the Path library has gone through some radical changes and should be much easier to use and adapt to special needs.&lt;/p&gt;
&lt;p&gt;The demo project now also includes a unit controller for units using the unity character controller interface which also demos how animation could be used in Path projects.&lt;/p&gt;
&lt;p&gt;Also a range of bugs have been corrected (and no doubt new ones introduces so please toss all the feedback you can come by at me). Last but not the least Path is now almost feature complete which means feature requests will be considered at this point.&lt;/p&gt;
&lt;p&gt;Dig in!&lt;/p&gt;</description>
				<published>2008-04-05 00:00:00 +0200</published>
				<link>http://angryant.com/2008/04/05/path-beta-01b/</link>
			</item>
			
		
			
			<item>
				<title>Path pre-release</title>
				<description>&lt;p&gt;This version of the Path project implements the A* algorithm on a user-provided NavMesh. It includes support for multiple inter-connected NavMeshes in one scene and provides an easy to use interface for requesting and handling calculated pathes.&lt;/p&gt;
&lt;p&gt;Updates and feedback takes place on the unity forums: Pathfinding in unity.&lt;/p&gt;</description>
				<published>2008-03-30 00:00:00 +0100</published>
				<link>http://angryant.com/2008/03/30/path-pre-release/</link>
			</item>
			
		
	</channel>
</rss>
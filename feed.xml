<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
	<channel>
		<title>AngryAnt.com/feed</title>
		<description>Random scribblings at random intervals</description>
		<link>http://angryant.com</link>
		
			<item>
				<title>Unity Protocol Buffers</title>
				<description>&lt;p&gt;Time for another &amp;#8220;ah, crap &amp;#8211; better put &lt;strong&gt;something&lt;/strong&gt; up here before heading to &lt;span class=&quot;caps&quot;&gt;GDC&lt;/span&gt;&amp;#8221;-post. And since I did some re-tinkering with the integration of &lt;a href=&quot;https://developers.google.com/protocol-buffers/&quot;&gt;protobuf&lt;/a&gt; in Behave late last year, some sharing on that topic seemed in order.&lt;/p&gt;
&lt;p&gt;So yes, stuff is happening with Behave &amp;#8211; no abandonment has taken place. On the contrary I have been working on several, long-running, feature branches. I&amp;#8217;ll get around to merging some of those in and doing another release. More on that soonish.&lt;/p&gt;
&lt;p&gt;Anywho, last I checked, &lt;a href=&quot;https://github.com/mgravell/protobuf-net&quot;&gt;protobuf-net&lt;/a&gt; was still a more complete solution than the younger &lt;a href=&quot;https://github.com/google/protobuf/tree/master/csharp&quot;&gt;protobuf for C#&lt;/a&gt; one, so I still stick with protobuf-net and can therefore only talk about that here. However it looks like the latter is seeing more rapid development, so I&amp;#8217;ll probably review my choice when next I need to tinker with the integration.&lt;/p&gt;
&lt;p&gt;More interestingly, some of the initial people behind protobuf have since gone and built the new and shiny &lt;a href=&quot;https://capnproto.org&quot;&gt;Cap&amp;#8217;n Proto&lt;/a&gt;. This looks to be even more powerful than its predecessor, but at time of writing it is still not as mature or implementation-rich as protobuf. Critically for the context of this post, there is no C# implementation yet. Cool stuff, though &amp;#8211; worth keeping an eye on.&lt;/p&gt;
&lt;h2&gt;Overview&lt;/h2&gt;
&lt;p&gt;So what is the Protocol Buffers project? Succinctly, it is a compact binary serialisation format with very fast cross-platform and -language implementations. Super useful when you need to quickly move some data between memory and some other location &amp;#8211; a file / a network peer / whatever.&lt;/p&gt;
&lt;p&gt;It was first designed, implemented, and maintained by Google for communications between network peers on their internal network. Since then, it has been implemented in a number of different languages &amp;#8211; including the &lt;a href=&quot;https://github.com/mgravell/protobuf-net&quot;&gt;protobuf-net&lt;/a&gt; implementation, built and maintained by &lt;a href=&quot;https://github.com/mgravell&quot;&gt;Marc Gravell&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Serialisation use in Behave has gone through a couple of distinct phases:&lt;/p&gt;
&lt;ol&gt;
	&lt;li&gt;.net binary serialiser for asset.&lt;/li&gt;
	&lt;li&gt;protobuf-net for asset.&lt;/li&gt;
	&lt;li&gt;protobuf-net for asset and remote debugger protocol.&lt;/li&gt;
	&lt;li&gt;&lt;span class=&quot;caps&quot;&gt;JSON&lt;/span&gt; for asset, protobuf-net for remote debugger protocol.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Additionally I&amp;#8217;ve used protobuf-net for runtime saving or build pipelines on various client projects.&lt;/p&gt;
&lt;p&gt;Aside from speed and compression, protobuf-net vs. the .net binary serialiser was also an escape of the frustrating lack of support for versioning or even simple structural refactors of serialised types. The switch to &lt;span class=&quot;caps&quot;&gt;JSON&lt;/span&gt; for the .behave asset files of-course came when I decided that merge-ability could be a fun thing to support.&lt;/p&gt;
&lt;p&gt;On top of this general migration, I also went through a couple of different protobuf-net integrations &amp;#8211; as my use cases and requirements changed. It just so happens that this gave me full coverage of the three approaches supported by protobuf-net, so no need for extra research before writing this post. Win!&lt;/p&gt;
&lt;h2&gt;Integration&lt;/h2&gt;
&lt;p&gt;For serialisation to work, you need a a serialiser and a schema. Protobuf-net offers a couple of ways for you to provide those:&lt;/p&gt;
&lt;ol&gt;
	&lt;li&gt;[Attribute] markup with runtime generated serialiser.&lt;/li&gt;
	&lt;li&gt;[Attribute] markup with pre-generated serialiser.&lt;/li&gt;
	&lt;li&gt;.proto file description with pre-generated serialiser.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;I did this list in order of simplicity, which also happens to be the order in which I switched through them in the integration with Behave.&lt;/p&gt;
&lt;p&gt;The first option is very .net esque and protobuf-net is indeed compatible both with its own serialisation attributes and the more general-purpose .net serialisation attributes. However since your interest here is in a Unity context, I&amp;#8217;m sure that you have already spotted the problem with this approach.&lt;/p&gt;
&lt;p&gt;Given that my initial use for protobuf-net was just for asset serialisation (which is editor-time only), I had no problem with the serialisation solution relying on &lt;span class=&quot;caps&quot;&gt;JIT&lt;/span&gt; compilation in order to construct the serialiser at runtime. However as soon as I expanded my use case to include the runtime debugger, relying on &lt;span class=&quot;caps&quot;&gt;JIT&lt;/span&gt; would mean not supporting the debugger on &lt;span class=&quot;caps&quot;&gt;AOT&lt;/span&gt; platforms like iOS and consoles. Further, as Unity continues transitioning to their IL2CPP solution, you&amp;#8217;re looking at a future where most will want to do &lt;span class=&quot;caps&quot;&gt;AOT&lt;/span&gt; on all platforms.&lt;/p&gt;
&lt;p&gt;So when introducing the remote debugger (previous debugger implementation was just 100% in-editor), I started to pre-generate the serialiser. This entails feeding your compiled assembly with [Attribute] markup to the protobuf-net precompile tool, which in turn generates an assembly with the serialiser type. For an example of how I used to do that, here&amp;#8217;s a &lt;a href=&quot;https://gist.github.com/AngryAnt/7223d692ec9d2fd12053e5b04f57296a&quot;&gt;snippet of perl&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;Extraction&lt;/h2&gt;
&lt;p&gt;Everything works! Win, right? Well&amp;#8230; as I was expanding debugger support to non-C# targets and doing a general code cleanup, I got increasingly annoyed by having serialisation implementation detail in my general data type code. So I started looking at how protobuf-net supports the standard protobuf .proto format for schema definition.&lt;/p&gt;
&lt;p&gt;As things stand, it takes a bit of work &amp;#8211; specifically &lt;a href=&quot;https://github.com/mgravell/protobuf-net/pull/163&quot;&gt;this work&lt;/a&gt; &amp;#8211; to get going, but once there it is solid. In stead of using the precompile tool, you need to build and run the protogen tool from the protobuf-net repository. If you&amp;#8217;re on Windows, things may just work straight out of the gate, but you may want to see what is in my patch anyway.&lt;/p&gt;
&lt;p&gt;So how does this work? Well, the input is no longer [attribute] marked assemblies, but in stead a .proto definition file. You can find great detail on that in the general &lt;a href=&quot;https://developers.google.com/protocol-buffers/&quot;&gt;protobuf&lt;/a&gt; documentation, but you may want to consult the &lt;a href=&quot;https://github.com/mgravell/protobuf-net&quot;&gt;protobuf-net&lt;/a&gt; docs for implementation specifics/limits. Also, the output is not an assembly, but simply a C# file.&lt;/p&gt;
&lt;p&gt;Keep in mind that protogen relies on the protoc tool from the general Google protobuf tools. I fetched this from homebrew as the &amp;#8220;protobuf&amp;#8221; package.&lt;/p&gt;
&lt;p&gt;Again I have a &lt;a href=&quot;https://gist.github.com/AngryAnt/16c548412cdf1dba30140e8cdd97dc64&quot;&gt;snippet of perl&lt;/a&gt; to illustrate use &amp;#8211; as well as an &lt;a href=&quot;https://gist.github.com/AngryAnt/f053be0c4c66fafde17d679c2d09a9c9&quot;&gt;example .proto file&lt;/a&gt;. In this case the Behave debugger protocol definition.&lt;/p&gt;
&lt;p&gt;Using this approach, I now have a nicely separated codebase and no duplication of schema definition between the C# debugger runtime and others. One trick remains though&amp;#8230;&lt;/p&gt;
&lt;h2&gt;Object pooling&lt;/h2&gt;
&lt;p&gt;A mildly active Behave debugger session involves a lot of messages. I have very little interest in blowing up the garbage collector by constantly instantiating new messages and leaving them to get collected. So how do we integrate an object pool setup with the generated protobuf-net serialiser?&lt;/p&gt;
&lt;p&gt;While not exactly as pretty as I would like, my answer is making use of the partialness of the generated types &amp;#8211; in order to add &lt;a href=&quot;https://gist.github.com/AngryAnt/1ed005b443202f6dcebc9649d59ae2d2&quot;&gt;a static pool and -constructor&lt;/a&gt; to hook it up.&lt;/p&gt;
&lt;p&gt;And that&amp;#8217;s pretty much what I&amp;#8217;ve got. If I missed something or you have related questions, feel free to ping me and I&amp;#8217;ll try to update this post when I can.&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;&lt;a href=&quot;https://developers.google.com/protocol-buffers/&quot;&gt;protobuf&lt;/a&gt;&lt;/li&gt;
	&lt;li&gt;&lt;a href=&quot;https://github.com/mgravell/protobuf-net&quot;&gt;protobuf-net&lt;/a&gt;&lt;/li&gt;
	&lt;li&gt;&lt;a href=&quot;https://github.com/google/protobuf/tree/master/csharp&quot;&gt;protobuf for C#&lt;/a&gt;&lt;/li&gt;
	&lt;li&gt;&lt;a href=&quot;https://capnproto.org&quot;&gt;Cap&amp;#8217;n Proto&lt;/a&gt;&lt;/li&gt;
	&lt;li&gt;&lt;a href=&quot;https://github.com/mgravell&quot;&gt;Marc Gravell&lt;/a&gt;&lt;/li&gt;
	&lt;li&gt;&lt;a href=&quot;https://gist.github.com/AngryAnt/7223d692ec9d2fd12053e5b04f57296a&quot;&gt;Precompiler perl&lt;/a&gt;&lt;/li&gt;
	&lt;li&gt;&lt;a href=&quot;https://github.com/mgravell/protobuf-net/pull/163&quot;&gt;protogen patch&lt;/a&gt;&lt;/li&gt;
	&lt;li&gt;&lt;a href=&quot;https://gist.github.com/AngryAnt/16c548412cdf1dba30140e8cdd97dc64&quot;&gt;protogen perl&lt;/a&gt;&lt;/li&gt;
	&lt;li&gt;&lt;a href=&quot;https://gist.github.com/AngryAnt/f053be0c4c66fafde17d679c2d09a9c9&quot;&gt;Protocol.proto&lt;/a&gt;&lt;/li&gt;
	&lt;li&gt;&lt;a href=&quot;https://gist.github.com/AngryAnt/1ed005b443202f6dcebc9649d59ae2d2&quot;&gt;Object pool integration&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;








</description>
				<published>2017-02-17 00:00:00 +0100</published>
				<link>http://angryant.com/2017/02/17/Unity-Protocol-Buffers/</link>
			</item>
		
			<item>
				<title>Behave 2.7</title>
				<description>&lt;p&gt;The serialisation update is here! Ok maybe that is not the most exciting change for everyone, but I for one am quite happy about having finally shipped it. Aside from making life a lot simpler for anyone vaguely interested in collaborating on Behave libraries across version control systems, this lays the groundwork for a good number of runtime changes I have been wanting to do for a while.&lt;/p&gt;
&lt;h2&gt;Contents&lt;/h2&gt;
&lt;p&gt;Aside from just fixing up serialisation, this release focuses on improving editor usability with a good selection of tweaks and features. Some choice examples:&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;Behaviour tree minimap navigation.&lt;/li&gt;
	&lt;li&gt;Subtle indicator of tree origin direction when it is out of canvas view.&lt;/li&gt;
	&lt;li&gt;&amp;#8220;Larger fonts&amp;#8221; toggle for better visibility.&lt;/li&gt;
	&lt;li&gt;Hiding of component- and sidebar, plus a bunch of other canvas navigation tweaks.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Onward&lt;/h2&gt;
&lt;p&gt;After clearing this serialisation system obstruction out of the way, the road is now open for a host of planned features. Most of these are aimed at improving runtime flexibility, by increasing the available options for the tools you are already familiar with.&lt;/p&gt;
&lt;p&gt;If you happen to be at this years &lt;span class=&quot;caps&quot;&gt;GDC&lt;/span&gt; in a little months time, perhaps we could meet and exchange ideas on this?&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;&lt;a href=&quot;http://u3d.as/5hA&quot;&gt;Behave 2 for Unity on the asset store&lt;/a&gt;.&lt;/li&gt;
	&lt;li&gt;&lt;a href=&quot;/behave/&quot;&gt;Project information&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;
Changelist:


2.7:
 - New library serialisation.
     - Backwards compatible with all 2.x variants.
     - All other formats are deprecated: text, binary, export/asset.
         - Exports are auto-upgraded, but please make sure to follow editor instructions when opening asset-type libraries.
         - Run your upgrades now. Future versions of Behave will not support deprecated serialisation.
     - Support for pre-2.0 decorators finally dropped.
     - Faster and less frequent serialisation.
     - Designed for optimal inter action with version control systems.
     - Custom inspector for Behave libraries is dropped in Unity 4.
         - Aside from the visuals, this just means that the Behave window now only can be launched by double-clicking the library or via the Window menu.
 - Behaviour tree minimap navigation - activate via alt+space.
 - Float/Clamp toggle for turning off canvas clamping when setting up large new tree structures.
 - Subtle indicator of tree origin direction when it is out of canvas view.
 - &quot;Warn on non-mandatory actions and contexts&quot; compiler toggle to support team communications.
 - &quot;Larger fonts&quot; toggle for better visibility.
 - Hiding of component- &amp;amp; sidebar.
 - Similar to reference components, components (and connections) referencing records can now also be double-clicked to navigate there.
 - Compiler adapted to new Unity distribution structure on OS X with Unity 5.4.
 - Home screen update.
 - Improved editor performance - particularly on larger libraries.
 - Better error handling for establishing debugger connections.
 - Tidying up and calming antivirus software by using Unity project Temp folder in stead of global temp.


2.6.4:
 - Fixed protobuf compatibility with Unity Windows.NET build targets.


2.6.3:
 - Fixed compiler execution on certain versions of OS X.
 - Minus one popup in the Windows compilation process.


2.6.2:
 - Fixed Windows compiler issue.


2.6.1:
 - Addressed Unity 5.1 compiler configuration compatibility issue.


2.6:
 - Removed backwards compatibility with Behave 1.x assets. That should be sufficient grace.
 - Removed a number of utility types from publicly accessible namespace - should be a lot less cluttered now.
 - Changed Tree.TickWrapping to now take exception handling behaviour parameter as an enum in stead of a boolean.
 - Changed Tree.LastTickTime to return DateTime ticks rather than a UnityEngine.Time.time value.
 - Fixed corner case where Unity could lock up while stripping Behave.
 - Fixed setting of Tree.LastTicked and Tree.ActiveID. Both will always reset to ActionType.Unknown, never -1.
 - Fixed compiler being able to handle Unity being installed on a path containing spaces.
 - Improved compiler error messages.
 - Added intellisense documentation to the runtime API.
 - Added int[] Tree.SupportedActions.
 - Added Tree.Owner for better handling of agent reassigning in pooling scenarios and similar.
 - Added ICollection. GetAsInt (int) and GetAsBool (int).
 - Action handler classes.
     - Added IActionClass and Tree.SetForwards (int, IActionClass) for init/tick/reset handling to a specific class instance.
     - Added Tree.ReflectForwards (GameObject) setting forwards for MonoBehaviours implementing IActionClass.
 - Editor polish.
     - &quot;Now Behave library being edited&quot; label now comes with a shortcut &quot;Create&quot; button.
     - More informative load messages in the home screen, including progress bars.
     - With Unity 5 dropping the engine feature delta, in-editor video viewing is now available on non-pro licenses as well.


2.5.4:
 - Address Unity 5 compatibility issue with the home screen.


2.5.3:
 - Fix issue with home screen not closing.


2.5.2:
 - Play nice on Unity free again.


2.5.1:
 - More rigid network code for setting up the debugger.
 - Upgraded protobuf-net distribution to r668, Unity, full.
 - Drowned out debug logging accidentally included in 2.5.0.


2.5:
 - Optional text serialisation.
     - Switch between text and binary serialisation in library settings.
     - Full and partial exports to text or binary file.
     - NOTE: Libraries opened in this version of Behave will be upgraded and are afterwards not backwards compatible.
 - Compiler upgrade.
     - Added lots of little CPU and memory optimisations.
     - Added tree analysis leading to larger memory saves on references when possible.
     - Improved handling of circular references.
     - Improved error reporting.
     - Changed name validation.
         - Underscores are no longer allowed in names - in order to avoid name clashes with pathed assets.
         - Fixed previously allowing leading numbers in names.
 - Runtime API.
     - Added library.ReflectForwards (ICollection, object).
     - Added library.SupportedRecords (ICollection).
     - Added blueprint.SupportedTrees.
     - Added Library.DidInstantiate (ICollection / Tree).
     - Changed generated enums to be valued continuously.
     - Changed get calls for unhandled records to now return -1.
 - Editor polish.
     - Improved debugger view.
         - Improved control bar layout.
         - Improved rendering of active referenced trees.
         - Fixes to follow-focus.
         - Debug view no longer re-crops to current visible tree area, preventing the previous behaviour of the view jumping around even without follow-focus enabled.
         - Improved sidebar listing of available- and connected runtimes.
         - Improved handling of disconnecting runtimes.
         - Improved tracking of available runtimes. No more need for refreshing.
         - Improved UI for adding debugger overrides.
         - Added &quot;Add overrides enabled&quot; setting (on by default).
     - Library vertical scrollbar replaced by standalone scroll buttons top / bottom when relevant - reducing visual noise.
     - Smaller tweaks and fixes.
 - Improved internal test coverage.


2.4.2:
 - Fixed some issues related to handling priority selectors in the recently update debugger.


2.4.1:
 - Fix corner case when restructuring library assets.


2.4:
 - Introducing “records”.
     - Float fields stored in “collections” - essentially ‘smart tables’.
     - Blackboard fields.
     - Utility curves.
     - Utility graphs.
     - Behaviour Tree integration.
          - “Tester” component.
          - “Writer” component.
          - Record mode for Priority Selector component.
 - Editor behavioural change: Deleting a tree no longer deletes reference nodes targeting that tree from other trees. Their target is merely cleared.
 - Editor behavioural change: The Reference node is only available in the component bar if the library contains more than one tree. Same behaviour for Tester and Writer with records.
 - Behavioural change: Invert flag is now properly applied by the Priority Selector.
 - Debugger connection stability improvement.
 - Connection disabling has been removed. This confusing feature caused more harm than good.
 - Video player now displays video title and description.


2.3.5:
 - Fix home screen video player.


2.3.4:
 - Better error messages in case of insufficient file access privileges (OHAI Perforce).
 - Added simple version check to the home screen.
 - New icons for Priority Selector and &quot;form new tree&quot;.
 - Smaller, embedded, JSON library.
 - Fix annoying behaviour with tree renaming where text fields would keep last entry.
 - Fix similar behaviour with component text fields on tree selection change.
 - Unity 5 compatibility fixes (tested on beta 2).


2.3.3:
 - Fix focus handling issue with auto-complete.
 - Parametrisation is now correctly applied for reset handler calls.


2.3.2:
 - Fix sidebar item duplication and deletion only functional during rename.


2.3.1:
 - Fix GUI error being logged on tree selection.
 - Proper handling of currently edited library asset being deleted.


2.3:
 - Added support for instant repeaters.
 - Added support for mandatory contexts.
 - Added optional target parameter to Tree.ResetForwards.
 - Added Tree.TickWrapping method.
 - Added debugger auto-launch settings to library build options.
 - Added home screen - shown on launch or via the Help menu, full of resources.
 - Behavioural change: Decorators no longer forward the instant flag of their child node.
 - Behaviour of decorators receiving a Running signal from their control connection is now defined.
 - Dependencies now shipped as separate (replaceable) files for minimal project impact.
 - Editor polish.
     - Added support for running multiple editor debugging instances on one machine.
     - Added focus-follow for debugger and canvas.
     - Added both scrollwheel/pad and drag-to-scroll support to all canvas views.
     - Drag connection to occupied input slot to replace.
     - Directly drag-drop trees from the sidebar onto the canvas as reference nodes.
     - Instant flag doesn't show on nodes connected to parents ignoring the flag.
     - &quot;Last edited library&quot; now tracked per project.
     - Last selected tree is now also restored between sessions and playmode transitions.
     - A bunch of minor adjustments and improvements.
     - Performance + memory + disk space optimisations.
     - Minor bugfixes.
 - New documentation layout and enhancements (already released as available).
 - Reshuffling of code to make way for exciting new things down the road.


2.2.2:
 - Addressed protobuf issue causing Parallel component completion setting to not get stored correctly.


2.2.1:
 - Fixed issue causing parallel components to fail compilation.


2.2:
 - Behavioural change: Support for multiple different action handler signatures is discontinued effective immediately.
    - Generated agent blueprint as well as accepted reflected signatures are now only:
        - public BehaveResult [Tick/Init][Name]Action (Tree sender);
        - public void Reset[Name]Action (Tree sender);
 - Added Tree class accessors - all valid only during an active init/tick/reset handler call:
    - string ActiveStringParameter
    - float ActiveFloatParameter
    - IAgent ActiveAgent
    - object ActiveData
 - Rather than waiting for the Unity bugfix, the built-in compiler API is now bypassed in favour of direct compiler binary execution.
    - An additional system-level mono SDK install is no longer needed to work around this Unity bug.
 - Tree.SetForward now returns boolean success value rather than logging error when passed unused action.
 - Full-library export now also available from the library settings in stead of menu-only access.
 - Even more UI polish: Better word-wrap, more contrasts for emphasis, instant flag hidden in unaffected scenarios and much more.
 - &quot;Form new tree&quot; nicely moves the new subtree up around the root socket rather than retaining the old position.
 - Default frame-rate of DebugUpdater now set to 20 fps rather than every frame. Gun safety and all that.
 - Massive codegen size save for larger libraries - from optimisation of tree-agent introspection codegen. Compile-time win.
 - More rigid parameter evaluation (remove needless occasional extra codegen).
 - Fixed copy and duplication procedures incorrectly not copying parameter values.
 - Force Unity to write serialised data before compiling.


2.1.1:
 - Fixed issue with tree paramterisation breaking debugger visualisation.


2.1:
 - Added autocomplete on action names, string parameters and component contexts.
 - Added mandatory actions (present in library regardless of use in trees).
 - Added partial library export and library merging / import-to-library.
 - Added Behave stripping - leave behind only a very lean Behave runtime, for redistribution or super slim deploy.
 - Added parameterised trees - get even more re-use out of your trees by overriding context and variables per reference.
 - Behavioural change: Tree.Reset will now delay resetting tree variables until after complete component reset.
 - Behavioural change: Tree.Tick will no longer automatically reset the tree upon completion. This plays very well with:
 - Added Tree.TickContinuously (int iterationCap = 1024) - ticks tree till completion or iteration cap is reached.
 - Added BehaveResult Tree.Result (bool value) utility function to side with Tree.Invert (BehaveResult value).
 - Added int Debugging.Local.ConnectionCount property - facilitating debug behaviour dependent on Behave debugger presence.
 - Moved default install path from Assets/Behave to Assets/Plugins/Behave.
    - WARNING: See Readme.txt upgrade guide.
 - Fixed decorator control node removal resulting in detached control connection.
 - Fixed decorator incorrectly not forwarding the instant status of its child node.
 - Fixed scenario where agent classes would get reflected for handlers even if blueprint derived.
 - Fixed unexpected corner cases of bad library configuration failing compiles (now causing warnings or simply being ignored).
 - Fixed Behave window breaking down when exiting play mode after having been active there.
 - Fixes to context getting incorrectly reset in some scenarios.
 - Fixed copy / paste functionality missing in some text fields.
 - Lots of UI polish and minor fixes.


2.0:
 - New editor.
    - Unified all controls into one window.
    - Completely customised look - compatible with both Unity light and dark skin.
    - Keyboard authoring interface in addition to drag &amp;amp; drop.
 - Debugger upgrade.
    - Remote debugging.
    - Tick and reset.
    - &quot;Unplug&quot; for debugger-only control.
    - Breakpoints.
    - Action overrides - override the return values of specified actions.
 - Decorator rewrite.
    - Deprecated old decorator.
       - Still compiles, but cannot be added.
    - Decorators are now control-type components.
       - No specific decorator handlers on agents.
       - Control is achieved via third connection socket.
    - Two initial decorator types: Repeater and Interrupter.
 - Asset restructuring.
 	- No more collections - for nesting, use paths in tree names.
 	- New serialization format - see Readme.txt for upgrade instructions.
    - Collections are gone. Use Unix-style path names for tree organisation.
 - IAgent.Tick (Tree, bool) changed to IAgent.Tick (Tree)
	- Init calls can now only be handled explicitly
 - Full coverage online documentation and other community resources.
 - Countless fixes and polish items.

1.5:
 - Added Tree.TickActive - indicating if a tree is currently executing a tick or if it has completed evaluation.
 - In-tick tree reset requests now result in a reset at the end of tree evaluation rather than an immediate one.
 - Removed the legacy compatibility assembly (for compatibility with pre-1.2 assets) from the default distribution.
 - Fixed &quot;X must be instantiated using the ScriptableObject.CreateInstance method instead of new X&quot; warnings.

1.4:
 - Fixed decorator incorrectly initializing on every returning tick when tick handler returned Running.
 - Fixed debugger view dependency on active tree editor - causing reported null reference exception.
 - Fixed missing scrollbars on browser window.
 - Reduced logging noise from debug builds.
 - Agent blueprints can now be MonoBehaviour based.
 - Clarified wording on &quot;library not loaded&quot;.
 - Now handling reset a bit cleverer - potential performance boost.
 - Changed the default success criteria of Parallel components from SuccessOrFailure to Success.
 - Added &quot;instant&quot; flag to components. Components marked instant will affect sequences and selectors when moving between child nodes. When a child node marked &quot;instant&quot; completes, rather than waiting for the next tree tick to tick the following child node, the sequence or selector does it immediately.
 - The compiler progress bar returns.
 - Editing a Behave asset now focuses the asset browser last instead of the tree editor.
 - Behave can now be installed in any subfolder of Assets - provided its internal folder structure remains intact.
 - Compilation speed improvements.
 - Enabled references across collection borders.
 - Added Tree.DataSize - returning the number of bytes used by a tree instance. This is also displayed in the debugger window.

1.3:
 - Fixed priority selector init flag resetting.
 - Fixed reference handling on tree renaming and deletion.
 - Fixed references still pointing at old collection post collection duplication.
 - Fixed compilation of actions and decorators with non-integral float parameters.
 - Fixed GUI list behaviours.
 - Fixed passing context back and forth between referenced trees and referrer.
 - Fixed reordering connections not causing save state to be set.
 - Various GUI tweaks.
 - Runtime optimisations.
 - Enabled scrolling of the tree list in the debugger window.
 - Exposed Tree.ReflectForwards.
 - Added Tree.ResetForwards.
 - Added agent blueprints - connecting to agent handlers through virtual methods rather than reflected handlers.
 - Made connections selectable in the tree editor via the connection nub.
 - Moved connection managing from the inspector to the tree editor, where it is more visible and handy.
 - Added support for disabling connections - for faster, less destructive debugging.
 - Double-click reference component to jump to referenced tree.
 - Changed &quot;Cannot update unregistered tree&quot; handling from an exception to an error message. Still need more info.
 - Now showing string and float parameters in the tree editor if either is set.

1.2:
 - Fixed release building.
 - Added the priority selector, introducing the API points:
    - int IAgent.SelectTopPriority (Tree sender, params int[] IDs);
    - enum BL[LibraryName].PriorityType { PriorityName, ..., Unknown };
 - Added support for branch contexts, introducing the API points:
    - enum BL[LibraryName].ContextType { ContextName, ..., Unknown };
    - int Tree.ActiveContext { get; }
 - Changed IAgent interface:
    - Tick (bool init, Tree sender) -&amp;gt; Tick (Tree sender, bool init)
 - Added &quot;Select asset&quot; button to the standard inspector.
 - Interface polish.

1.1:
 - Made compatible with Unity 3.0 - including ensuring that the 2.5-2.6.1 bug preventing compilation on Windows is fixed on the Unity side.
 - UI tweaks and polish.
 - Added the option to have return values of nodes be inverted.
 - Fixed compiler bug when facing sequence or selector with only one child node.
 - Renamed Library.Tree -&amp;gt; Library.InstantiateTree.
 - Added Tree.Tick () and Tree.Reset () methods using the IAgent instance given at instantiation of the tree.
 - Removed the abstract Library class.
 - Changed generated library class:
    - Trees -&amp;gt; TreeType.
    - Actions -&amp;gt; ActionType.
    - Decorators -&amp;gt; DecoratorType.
    - Tree InstantiateTree (int, IAgent) -&amp;gt; static Tree InstantiateTree (TreeType, IAgent)
    - int TreeID (Tree) -&amp;gt; static TreeType Type (Tree)
    - bool IsAction (int) -&amp;gt; static bool IsAction (int)
    - bool IsDecorator (int) -&amp;gt; static bool IsDecorator (int)
 - Upped editor performance.
 - New asset structure change with automatic import of Behave 1.0 assets.
 - Changed action and decorator handlers. These are now the handlers mapped:
    - public BehaveResult Init[Name][Action/Decorator] (Tree sender, string stringParameter, float floatParameter, IAgent agent, object data);
    - public BehaveResult Tick[Name][Action/Decorator] (Tree sender, string stringParameter, float floatParameter, IAgent agent, object data);
    - public void Reset[Name][Action/Decorator] (Tree sender, string stringParameter, float floatParameter, IAgent agent, object data);
    - public BehaveResult Init[Name][Action/Decorator] (Tree sender);
    - public BehaveResult Tick[Name][Action/Decorator] (Tree sender);
    - public void Reset[Name][Action/Decorator] (Tree sender);
    - public BehaveResult [Name][Action/Decorator] {get; set;}
 - Added support for collection duplication.
 - Moved debug rendering into the editor with its own dedicated debugger window, including actor listing.
 - Debugger now renders active sub-trees as well.

1.0:
 - Lots o fixes for Unity 2.5 compatibility.
 - Closer editor integration with new UI.
    - Component bar.
    - Node inspection.
 - Runtime tree debugging.
 - Direct mapping of action and delegate handlers via reflection.
 - Kitty demo.

0.3b:
 - Various tweaks to the editor UI.
 - Optimised the compiler.
 - Fixed the following editor bugs from the bug list:
    - When the editor scrips are recompiled and when the user enters and exits play mode, running editors will loose references, causing undetermined behaviour.
    - When a compile fails, the Behave compiler is locked and unusable – requiring a unity relaunch.
 - Implemented the following wishlist items:
    - Behaviour tree decorators.
    - Stand-alone edition of the Behave editor.
    - Behaviour tree debugging features.

0.2b:
 - Made the demo project a whole lot more interesting.
 - Implemented the editor wish list item: Ability to move trees between collections.
 - Various tweaks to the editor UI.
 - Fixed a ton of bugs in the compiler.
 - Fixed the following editor bugs from the bug list:
    - Not able to delete collections from library.
    - Not able to delete trees from library.
    - Not able to rename collections from library.
    - Not able to rename trees from library.
    - Missing &quot;tree has been changed, save changes?&quot; dialog.

0.1b:
 - Some documentation is available.
 - Compiler is now creating sensible output.
 - A simple test tree and script using it is provided with the demo.
 - Documentation is linked directly from the unity help menu.
 - Less spamming of the log with debug information.

Pre-release:
 - Magic happened. Behave was born.
&lt;/pre&gt;</description>
				<published>2016-02-13 00:00:00 +0100</published>
				<link>http://angryant.com/2016/02/13/Behave-2-7/</link>
			</item>
		
			<item>
				<title>Learn</title>
				<description>&lt;p&gt;I&amp;#8217;m just about to wrap up a weeks vacation before it&amp;#8217;s back on the horse again &amp;#8211; as I leave for the &lt;a href=&quot;http://nucl.ai&quot;&gt;nucl.ai&lt;/a&gt; conference Sunday morning. If you&amp;#8217;re going, maybe I&amp;#8217;ll see you there? If not, you should go check out the &lt;a href=&quot;http://aigamedev.com/broadcasts/nuclai15-stream/&quot;&gt;live stream&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;Basis&lt;/h2&gt;
&lt;p&gt;Anyway, so in my vacation I built a little project when I could find a bit of time here and there. It was inspired by work on a client project earlier in the year, where we looked at wiring up a neural network for analysis of a noisy sensor.&lt;/p&gt;
&lt;p&gt;The problem at the time was that although I could find a few C# NN libraries here and there, they were either not really a good fit or had a not-so-open open-source license like &lt;span class=&quot;caps&quot;&gt;GPL&lt;/span&gt; (good thing I don&amp;#8217;t have comments enabled here, eh?).&lt;/p&gt;
&lt;p&gt;Anyway, that felt a bit silly, so I figured that I&amp;#8217;d at least get the ball rolling on a somewhat sane, &lt;span class=&quot;caps&quot;&gt;MIT&lt;/span&gt; licensed, alternative. Either that or just have some fun with it until someone would point me at the obvious alternative solution, which I had overlooked in my earlier search.&lt;/p&gt;
&lt;h2&gt;Project&lt;/h2&gt;
&lt;p&gt;In its initial shape, the library just lets you construct a layered network, randomize its weigths, train it with a straight forward implementation of back-propagation with adjustable learning rate and momentum, and of-course run it.&lt;/p&gt;
&lt;p&gt;There is no serialisation interface yet, I&amp;#8217;ll probably want to do a simplification pass over it, and I have a few edge case tests I&amp;#8217;d like to run. However all of that is noted on the project &lt;span class=&quot;caps&quot;&gt;TODO&lt;/span&gt; and shouldn&amp;#8217;t amount to all that much work &amp;#8211; in case you fancy taking a stab at it.&lt;/p&gt;
&lt;p&gt;I did set up a little Unity project for testing though (the library itself does not depend on anything in Unity). It has a few debug views, a test scenario of the &lt;span class=&quot;caps&quot;&gt;XOR&lt;/span&gt; case, and a curve visualisation of training error. Look, I uploaded several pretty pictures:&lt;/p&gt;
&lt;p&gt;&lt;iframe src=&quot;https://player.vimeo.com/video/133789555&quot; width=&quot;500&quot; height=&quot;281&quot; frameborder=&quot;0&quot; webkitallowfullscreen mozallowfullscreen allowfullscreen&gt;&lt;/iframe&gt;&lt;/p&gt;
&lt;h2&gt;Access&lt;/h2&gt;
&lt;p&gt;Feel like giving it a go? As mentioned, the license is &lt;span class=&quot;caps&quot;&gt;MIT&lt;/span&gt;, so you can really do whatever with it. However should you want to contribute, pull requests are most welcome. I don&amp;#8217;t know how much time I can spare on this next to contracts and Behave, but at least it was a fun thing to work-on-while-not-working.&lt;/p&gt;
&lt;p&gt;Whatever the case, this is where you can find the repositories:&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;&lt;a href=&quot;https://github.com/AngryAnt/Learn&quot;&gt;Learn&lt;/a&gt;&lt;/li&gt;
	&lt;li&gt;&lt;a href=&quot;https://github.com/AngryAnt/LearnUnityTest&quot;&gt;Unity test project&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;


</description>
				<published>2015-07-17 00:00:00 +0200</published>
				<link>http://angryant.com/2015/07/17/Learn/</link>
			</item>
		
			<item>
				<title>Behave 2.6</title>
				<description>&lt;p&gt;Still plenty of open feature branches on Behave, but now is the time for the next drop. With a little over a week till Unite Europe and shortly thereafter nucl.ai (formerly GameAIconf), I&amp;#8217;m also heading into a bit of a plenty-to-do period. Perhaps we&amp;#8217;ll meet at the conference and have a chat about it?&lt;/p&gt;
&lt;h2&gt;Contents&lt;/h2&gt;
&lt;p&gt;With only minor editor tweaks, the 2.6 release of Behave focuses primarily on &lt;span class=&quot;caps&quot;&gt;API&lt;/span&gt; changes and added capabilities. The more exciting of these is probably the addition of action classes, allowing you to implement actions not just as singular event handlers on agent classes, but as standalone classes &amp;#8211; or in the case of Unity, as components.&lt;/p&gt;
&lt;p&gt;The reference documentation has been updated with a &amp;#8220;Composition&amp;#8221; section describing the setup in more detail.&lt;/p&gt;
&lt;p&gt;Do note that in this release, Behave is no longer backwards compatible with Behave 1.x assets.&lt;/p&gt;
&lt;h2&gt;Onwards&lt;/h2&gt;
&lt;p&gt;Unfortunately some planned features are taking a bit longer as they depend on a serialisation system refactor, requiring an extended period of focus. The groundwork for this has been effectuated and given time, should shoulder an effective change leading to interesting new capabilities.&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;&lt;a href=&quot;http://u3d.as/5hA&quot;&gt;Behave 2 for Unity on the asset store&lt;/a&gt;.&lt;/li&gt;
	&lt;li&gt;&lt;a href=&quot;/behave/&quot;&gt;Project information&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;
Changelist:


2.6:
 - Removed backwards compatibility with Behave 1.x assets. That should be sufficient grace.
 - Removed a number of utility types from publicly accessible namespace - should be a lot less cluttered now.
 - Changed Tree.TickWrapping to now take exception handling behaviour parameter as an enum in stead of a boolean.
 - Changed Tree.LastTickTime to return DateTime ticks rather than a UnityEngine.Time.time value.
 - Fixed corner case where Unity could lock up while stripping Behave.
 - Fixed setting of Tree.LastTicked and Tree.ActiveID. Both will always reset to ActionType.Unknown, never -1.
 - Fixed compiler being able to handle Unity being installed on a path containing spaces.
 - Improved compiler error messages.
 - Added intellisense documentation to the runtime API.
 - Added int[] Tree.SupportedActions.
 - Added Tree.Owner for better handling of agent reassigning in pooling scenarios and similar.
 - Added ICollection. GetAsInt (int) and GetAsBool (int).
 - Action handler classes.
     - Added IActionClass and Tree.SetForwards (int, IActionClass) for init/tick/reset handling to a specific class instance.
     - Added Tree.ReflectForwards (GameObject) setting forwards for MonoBehaviours implementing IActionClass.
 - Editor polish.
     - &quot;Now Behave library being edited&quot; label now comes with a shortcut &quot;Create&quot; button.
     - More informative load messages in the home screen, including progress bars.
     - With Unity 5 dropping the engine feature delta, in-editor video viewing is now available on non-pro licenses as well.


2.5.4:
 - Address Unity 5 compatibility issue with the home screen.


2.5.3:
 - Fix issue with home screen not closing.


2.5.2:
 - Play nice on Unity free again.


2.5.1:
 - More rigid network code for setting up the debugger.
 - Upgraded protobuf-net distribution to r668, Unity, full.
 - Drowned out debug logging accidentally included in 2.5.0.


2.5:
 - Optional text serialisation.
     - Switch between text and binary serialisation in library settings.
     - Full and partial exports to text or binary file.
     - NOTE: Libraries opened in this version of Behave will be upgraded and are afterwards not backwards compatible.
 - Compiler upgrade.
     - Added lots of little CPU and memory optimisations.
     - Added tree analysis leading to larger memory saves on references when possible.
     - Improved handling of circular references.
     - Improved error reporting.
     - Changed name validation.
         - Underscores are no longer allowed in names - in order to avoid name clashes with pathed assets.
         - Fixed previously allowing leading numbers in names.
 - Runtime API.
     - Added library.ReflectForwards (ICollection, object).
     - Added library.SupportedRecords (ICollection).
     - Added blueprint.SupportedTrees.
     - Added Library.DidInstantiate (ICollection / Tree).
     - Changed generated enums to be valued continuously.
     - Changed get calls for unhandled records to now return -1.
 - Editor polish.
     - Improved debugger view.
         - Improved control bar layout.
         - Improved rendering of active referenced trees.
         - Fixes to follow-focus.
         - Debug view no longer re-crops to current visible tree area, preventing the previous behaviour of the view jumping around even without follow-focus enabled.
         - Improved sidebar listing of available- and connected runtimes.
         - Improved handling of disconnecting runtimes.
         - Improved tracking of available runtimes. No more need for refreshing.
         - Improved UI for adding debugger overrides.
         - Added &quot;Add overrides enabled&quot; setting (on by default).
     - Library vertical scrollbar replaced by standalone scroll buttons top / bottom when relevant - reducing visual noise.
     - Smaller tweaks and fixes.
 - Improved internal test coverage.


2.4.2:
 - Fixed some issues related to handling priority selectors in the recently update debugger.


2.4.1:
 - Fix corner case when restructuring library assets.


2.4:
 - Introducing “records”.
     - Float fields stored in “collections” - essentially ‘smart tables’.
     - Blackboard fields.
     - Utility curves.
     - Utility graphs.
     - Behaviour Tree integration.
          - “Tester” component.
          - “Writer” component.
          - Record mode for Priority Selector component.
 - Editor behavioural change: Deleting a tree no longer deletes reference nodes targeting that tree from other trees. Their target is merely cleared.
 - Editor behavioural change: The Reference node is only available in the component bar if the library contains more than one tree. Same behaviour for Tester and Writer with records.
 - Behavioural change: Invert flag is now properly applied by the Priority Selector.
 - Debugger connection stability improvement.
 - Connection disabling has been removed. This confusing feature caused more harm than good.
 - Video player now displays video title and description.


2.3.5:
 - Fix home screen video player.


2.3.4:
 - Better error messages in case of insufficient file access privileges (OHAI Perforce).
 - Added simple version check to the home screen.
 - New icons for Priority Selector and &quot;form new tree&quot;.
 - Smaller, embedded, JSON library.
 - Fix annoying behaviour with tree renaming where text fields would keep last entry.
 - Fix similar behaviour with component text fields on tree selection change.
 - Unity 5 compatibility fixes (tested on beta 2).


2.3.3:
 - Fix focus handling issue with auto-complete.
 - Parametrisation is now correctly applied for reset handler calls.


2.3.2:
 - Fix sidebar item duplication and deletion only functional during rename.


2.3.1:
 - Fix GUI error being logged on tree selection.
 - Proper handling of currently edited library asset being deleted.


2.3:
 - Added support for instant repeaters.
 - Added support for mandatory contexts.
 - Added optional target parameter to Tree.ResetForwards.
 - Added Tree.TickWrapping method.
 - Added debugger auto-launch settings to library build options.
 - Added home screen - shown on launch or via the Help menu, full of resources.
 - Behavioural change: Decorators no longer forward the instant flag of their child node.
 - Behaviour of decorators receiving a Running signal from their control connection is now defined.
 - Dependencies now shipped as separate (replaceable) files for minimal project impact.
 - Editor polish.
     - Added support for running multiple editor debugging instances on one machine.
     - Added focus-follow for debugger and canvas.
     - Added both scrollwheel/pad and drag-to-scroll support to all canvas views.
     - Drag connection to occupied input slot to replace.
     - Directly drag-drop trees from the sidebar onto the canvas as reference nodes.
     - Instant flag doesn't show on nodes connected to parents ignoring the flag.
     - &quot;Last edited library&quot; now tracked per project.
     - Last selected tree is now also restored between sessions and playmode transitions.
     - A bunch of minor adjustments and improvements.
     - Performance + memory + disk space optimisations.
     - Minor bugfixes.
 - New documentation layout and enhancements (already released as available).
 - Reshuffling of code to make way for exciting new things down the road.


2.2.2:
 - Addressed protobuf issue causing Parallel component completion setting to not get stored correctly.


2.2.1:
 - Fixed issue causing parallel components to fail compilation.


2.2:
 - Behavioural change: Support for multiple different action handler signatures is discontinued effective immediately.
    - Generated agent blueprint as well as accepted reflected signatures are now only:
        - public BehaveResult [Tick/Init][Name]Action (Tree sender);
        - public void Reset[Name]Action (Tree sender);
 - Added Tree class accessors - all valid only during an active init/tick/reset handler call:
    - string ActiveStringParameter
    - float ActiveFloatParameter
    - IAgent ActiveAgent
    - object ActiveData
 - Rather than waiting for the Unity bugfix, the built-in compiler API is now bypassed in favour of direct compiler binary execution.
    - An additional system-level mono SDK install is no longer needed to work around this Unity bug.
 - Tree.SetForward now returns boolean success value rather than logging error when passed unused action.
 - Full-library export now also available from the library settings in stead of menu-only access.
 - Even more UI polish: Better word-wrap, more contrasts for emphasis, instant flag hidden in unaffected scenarios and much more.
 - &quot;Form new tree&quot; nicely moves the new subtree up around the root socket rather than retaining the old position.
 - Default frame-rate of DebugUpdater now set to 20 fps rather than every frame. Gun safety and all that.
 - Massive codegen size save for larger libraries - from optimisation of tree-agent introspection codegen. Compile-time win.
 - More rigid parameter evaluation (remove needless occasional extra codegen).
 - Fixed copy and duplication procedures incorrectly not copying parameter values.
 - Force Unity to write serialised data before compiling.


2.1.1:
 - Fixed issue with tree paramterisation breaking debugger visualisation.


2.1:
 - Added autocomplete on action names, string parameters and component contexts.
 - Added mandatory actions (present in library regardless of use in trees).
 - Added partial library export and library merging / import-to-library.
 - Added Behave stripping - leave behind only a very lean Behave runtime, for redistribution or super slim deploy.
 - Added parameterised trees - get even more re-use out of your trees by overriding context and variables per reference.
 - Behavioural change: Tree.Reset will now delay resetting tree variables until after complete component reset.
 - Behavioural change: Tree.Tick will no longer automatically reset the tree upon completion. This plays very well with:
 - Added Tree.TickContinuously (int iterationCap = 1024) - ticks tree till completion or iteration cap is reached.
 - Added BehaveResult Tree.Result (bool value) utility function to side with Tree.Invert (BehaveResult value).
 - Added int Debugging.Local.ConnectionCount property - facilitating debug behaviour dependent on Behave debugger presence.
 - Moved default install path from Assets/Behave to Assets/Plugins/Behave.
    - WARNING: See Readme.txt upgrade guide.
 - Fixed decorator control node removal resulting in detached control connection.
 - Fixed decorator incorrectly not forwarding the instant status of its child node.
 - Fixed scenario where agent classes would get reflected for handlers even if blueprint derived.
 - Fixed unexpected corner cases of bad library configuration failing compiles (now causing warnings or simply being ignored).
 - Fixed Behave window breaking down when exiting play mode after having been active there.
 - Fixes to context getting incorrectly reset in some scenarios.
 - Fixed copy / paste functionality missing in some text fields.
 - Lots of UI polish and minor fixes.


2.0:
 - New editor.
    - Unified all controls into one window.
    - Completely customised look - compatible with both Unity light and dark skin.
    - Keyboard authoring interface in addition to drag &amp;amp; drop.
 - Debugger upgrade.
    - Remote debugging.
    - Tick and reset.
    - &quot;Unplug&quot; for debugger-only control.
    - Breakpoints.
    - Action overrides - override the return values of specified actions.
 - Decorator rewrite.
    - Deprecated old decorator.
       - Still compiles, but cannot be added.
    - Decorators are now control-type components.
       - No specific decorator handlers on agents.
       - Control is achieved via third connection socket.
    - Two initial decorator types: Repeater and Interrupter.
 - Asset restructuring.
 	- No more collections - for nesting, use paths in tree names.
 	- New serialization format - see Readme.txt for upgrade instructions.
    - Collections are gone. Use Unix-style path names for tree organisation.
 - IAgent.Tick (Tree, bool) changed to IAgent.Tick (Tree)
	- Init calls can now only be handled explicitly
 - Full coverage online documentation and other community resources.
 - Countless fixes and polish items.

1.5:
 - Added Tree.TickActive - indicating if a tree is currently executing a tick or if it has completed evaluation.
 - In-tick tree reset requests now result in a reset at the end of tree evaluation rather than an immediate one.
 - Removed the legacy compatibility assembly (for compatibility with pre-1.2 assets) from the default distribution.
 - Fixed &quot;X must be instantiated using the ScriptableObject.CreateInstance method instead of new X&quot; warnings.

1.4:
 - Fixed decorator incorrectly initializing on every returning tick when tick handler returned Running.
 - Fixed debugger view dependency on active tree editor - causing reported null reference exception.
 - Fixed missing scrollbars on browser window.
 - Reduced logging noise from debug builds.
 - Agent blueprints can now be MonoBehaviour based.
 - Clarified wording on &quot;library not loaded&quot;.
 - Now handling reset a bit cleverer - potential performance boost.
 - Changed the default success criteria of Parallel components from SuccessOrFailure to Success.
 - Added &quot;instant&quot; flag to components. Components marked instant will affect sequences and selectors when moving between child nodes. When a child node marked &quot;instant&quot; completes, rather than waiting for the next tree tick to tick the following child node, the sequence or selector does it immediately.
 - The compiler progress bar returns.
 - Editing a Behave asset now focuses the asset browser last instead of the tree editor.
 - Behave can now be installed in any subfolder of Assets - provided its internal folder structure remains intact.
 - Compilation speed improvements.
 - Enabled references across collection borders.
 - Added Tree.DataSize - returning the number of bytes used by a tree instance. This is also displayed in the debugger window.

1.3:
 - Fixed priority selector init flag resetting.
 - Fixed reference handling on tree renaming and deletion.
 - Fixed references still pointing at old collection post collection duplication.
 - Fixed compilation of actions and decorators with non-integral float parameters.
 - Fixed GUI list behaviours.
 - Fixed passing context back and forth between referenced trees and referrer.
 - Fixed reordering connections not causing save state to be set.
 - Various GUI tweaks.
 - Runtime optimisations.
 - Enabled scrolling of the tree list in the debugger window.
 - Exposed Tree.ReflectForwards.
 - Added Tree.ResetForwards.
 - Added agent blueprints - connecting to agent handlers through virtual methods rather than reflected handlers.
 - Made connections selectable in the tree editor via the connection nub.
 - Moved connection managing from the inspector to the tree editor, where it is more visible and handy.
 - Added support for disabling connections - for faster, less destructive debugging.
 - Double-click reference component to jump to referenced tree.
 - Changed &quot;Cannot update unregistered tree&quot; handling from an exception to an error message. Still need more info.
 - Now showing string and float parameters in the tree editor if either is set.

1.2:
 - Fixed release building.
 - Added the priority selector, introducing the API points:
    - int IAgent.SelectTopPriority (Tree sender, params int[] IDs);
    - enum BL[LibraryName].PriorityType { PriorityName, ..., Unknown };
 - Added support for branch contexts, introducing the API points:
    - enum BL[LibraryName].ContextType { ContextName, ..., Unknown };
    - int Tree.ActiveContext { get; }
 - Changed IAgent interface:
    - Tick (bool init, Tree sender) -&amp;gt; Tick (Tree sender, bool init)
 - Added &quot;Select asset&quot; button to the standard inspector.
 - Interface polish.

1.1:
 - Made compatible with Unity 3.0 - including ensuring that the 2.5-2.6.1 bug preventing compilation on Windows is fixed on the Unity side.
 - UI tweaks and polish.
 - Added the option to have return values of nodes be inverted.
 - Fixed compiler bug when facing sequence or selector with only one child node.
 - Renamed Library.Tree -&amp;gt; Library.InstantiateTree.
 - Added Tree.Tick () and Tree.Reset () methods using the IAgent instance given at instantiation of the tree.
 - Removed the abstract Library class.
 - Changed generated library class:
    - Trees -&amp;gt; TreeType.
    - Actions -&amp;gt; ActionType.
    - Decorators -&amp;gt; DecoratorType.
    - Tree InstantiateTree (int, IAgent) -&amp;gt; static Tree InstantiateTree (TreeType, IAgent)
    - int TreeID (Tree) -&amp;gt; static TreeType Type (Tree)
    - bool IsAction (int) -&amp;gt; static bool IsAction (int)
    - bool IsDecorator (int) -&amp;gt; static bool IsDecorator (int)
 - Upped editor performance.
 - New asset structure change with automatic import of Behave 1.0 assets.
 - Changed action and decorator handlers. These are now the handlers mapped:
    - public BehaveResult Init[Name][Action/Decorator] (Tree sender, string stringParameter, float floatParameter, IAgent agent, object data);
    - public BehaveResult Tick[Name][Action/Decorator] (Tree sender, string stringParameter, float floatParameter, IAgent agent, object data);
    - public void Reset[Name][Action/Decorator] (Tree sender, string stringParameter, float floatParameter, IAgent agent, object data);
    - public BehaveResult Init[Name][Action/Decorator] (Tree sender);
    - public BehaveResult Tick[Name][Action/Decorator] (Tree sender);
    - public void Reset[Name][Action/Decorator] (Tree sender);
    - public BehaveResult [Name][Action/Decorator] {get; set;}
 - Added support for collection duplication.
 - Moved debug rendering into the editor with its own dedicated debugger window, including actor listing.
 - Debugger now renders active sub-trees as well.

1.0:
 - Lots o fixes for Unity 2.5 compatibility.
 - Closer editor integration with new UI.
    - Component bar.
    - Node inspection.
 - Runtime tree debugging.
 - Direct mapping of action and delegate handlers via reflection.
 - Kitty demo.

0.3b:
 - Various tweaks to the editor UI.
 - Optimised the compiler.
 - Fixed the following editor bugs from the bug list:
    - When the editor scrips are recompiled and when the user enters and exits play mode, running editors will loose references, causing undetermined behaviour.
    - When a compile fails, the Behave compiler is locked and unusable – requiring a unity relaunch.
 - Implemented the following wishlist items:
    - Behaviour tree decorators.
    - Stand-alone edition of the Behave editor.
    - Behaviour tree debugging features.

0.2b:
 - Made the demo project a whole lot more interesting.
 - Implemented the editor wish list item: Ability to move trees between collections.
 - Various tweaks to the editor UI.
 - Fixed a ton of bugs in the compiler.
 - Fixed the following editor bugs from the bug list:
    - Not able to delete collections from library.
    - Not able to delete trees from library.
    - Not able to rename collections from library.
    - Not able to rename trees from library.
    - Missing &quot;tree has been changed, save changes?&quot; dialog.

0.1b:
 - Some documentation is available.
 - Compiler is now creating sensible output.
 - A simple test tree and script using it is provided with the demo.
 - Documentation is linked directly from the unity help menu.
 - Less spamming of the log with debug information.

Pre-release:
 - Magic happened. Behave was born.
&lt;/pre&gt;</description>
				<published>2015-06-13 00:00:00 +0200</published>
				<link>http://angryant.com/2015/06/13/Behave-2-6/</link>
			</item>
		
			<item>
				<title>Trusted Gear</title>
				<description>&lt;p&gt;Yay! &lt;span class=&quot;caps&quot;&gt;GDC&lt;/span&gt; is next week! Will I see you there?&lt;/p&gt;
&lt;p&gt;Ahem. Straying a bit from my usual theme here of writing about whatever little snippet or gadget I&amp;#8217;ve come up with, for this post I will in stead share some detail on recent changes to my tool-chain of choice, which I&amp;#8217;m quite happy about.&lt;/p&gt;
&lt;p&gt;Every craftsman has his or her opinion on tooling, but just about everyone share the desire to tune their toolbox. Even if your opinion / taste / whatever does not align with mine, I hope that you find something useful in here.&lt;/p&gt;
&lt;p&gt;If you really had your sights on getting some funky code snippet out of this post, here&amp;#8217;s an unholy perl module for firing off native prompt dialogs on OS X and Windows:&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;&lt;a href=&quot;https://gist.github.com/AngryAnt/9732081d1c76dd3de9d3&quot;&gt;Unholy perl&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;And with that out of the way, let&amp;#8217;s get something else sorted: This post will likely come off as an ad for a bunch of different software. Other than mentioning it here, I do not intend to do anything about that.&lt;/p&gt;
&lt;p&gt;Note that I primarily work on OS X and some of the tools mentioned in this post are only available on that platform. You might still find at least inspiration in those areas though &amp;#8211; likely very nice Windows and Linux alternatives exist. I did not look.&lt;/p&gt;
&lt;p&gt;However if you are not on OS X, but on a tight schedule, just skip all sections other than the &amp;#8220;Typing&amp;#8221; section (which is probably where you&amp;#8217;ll find the best stuff anyway).&lt;/p&gt;
&lt;h2&gt;Tracking&lt;/h2&gt;
&lt;p&gt;Everyone has a system for remembering projects and TODOs. If you in stead keep it all in your head, I am glad that you&amp;#8217;re not a very busy person &amp;#8211; if you are busy, I would worry.&lt;/p&gt;
&lt;p&gt;Over time I have tried many different systems for keeping track of it all &amp;#8211; having had it as a focus of mine ever since severe physical stress symptoms reminded me that my methods were entirely inadequate.&lt;/p&gt;
&lt;p&gt;One tool that I kept coming back to and which I have recently re-focused on is &lt;a href=&quot;http://www.omnigroup.com/omnifocus/&quot;&gt;OmniFocus&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;While OmniFocus is by no means perfect (I have my fair share of open suggestion posts with the developers), it does provide me with the best feature combination I have seen in this type of tool. Important to me are:&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;No restrictions or requirements on nesting/indentation depth of items.
	&lt;ul&gt;
		&lt;li&gt;The system has the notion of &amp;#8220;tasks&amp;#8221; existing in &amp;#8220;projects&amp;#8221;, but aside from this I can use folder nesting of projects and nesting of tasks as much as I like &amp;#8211; assigning whatever meaning I want to that.&lt;/li&gt;
	&lt;/ul&gt;&lt;/li&gt;
	&lt;li&gt;Everything is synchronised painlessly between fully-featured clients on my laptop, my phone, and my tablet. And it remains accessible when offline.&lt;/li&gt;
	&lt;li&gt;Easy, fast, unintrusive task entry.
	&lt;ul&gt;
		&lt;li&gt;The mobile clients have an always accessible &amp;#8220;add to inbox&amp;#8221; button and the OS X client a global task-entry shortcut.&lt;/li&gt;
		&lt;li&gt;The shortcut fires up a little window over whatever you are currently working, allowing you to quickly type in what you need to remember to do, hitting enter when you&amp;#8217;re done. Optionally you can add more task details before hitting enter and continuing with whatever you were doing.
		&lt;ul&gt;
			&lt;li&gt;This is absolutely perfect when you remember a &lt;span class=&quot;caps&quot;&gt;TODO&lt;/span&gt; unrelated to your current task or someone comes by your desk with a request.&lt;/li&gt;
			&lt;li&gt;My shortcut for task entry is ctrl+alt+space. I do not recall if this is the default.&lt;/li&gt;
		&lt;/ul&gt;&lt;/li&gt;
		&lt;li&gt;The OS X client also comes with a &amp;#8220;service&amp;#8221; integration, allowing you to easily create new tasks from other applications &amp;#8211; like one based on a file or a snippet of text or perhaps an email.&lt;/li&gt;
	&lt;/ul&gt;&lt;/li&gt;
	&lt;li&gt;Optional additional classification and data collection.
	&lt;ul&gt;
		&lt;li&gt;Putting tasks in projects is your absolutely minimum flow. Even that I suppose is optional, as you could simply put all your tasks in your inbox. On top of this, you can scale it as little or as much as makes sense for your particular case. I use everything from no additionals to everything &amp;#8211; all dependent on the nature of the task.
		&lt;ul&gt;
			&lt;li&gt;Aside from putting tasks in optional projects in optional folders, each task can also have an associated context. Different tasks in the same project can have different contexts and contexts can have additional information associated with them &amp;#8211; like a location.&lt;/li&gt;
			&lt;li&gt;Assigning a due date to a task will put it in your Forecast view &amp;#8211; allowing you to easily view what needs to get done today. This view can also show a quick overview of todays calendar and you can get notifications as the due time of a task is reached.&lt;/li&gt;
			&lt;li&gt;Each task can have an associated attachment. Anything from a snippet of text to a file / an email / whatever.&lt;/li&gt;
		&lt;/ul&gt;&lt;/li&gt;
	&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&quot;/resources/posts/2015-02-26-Trusted-Gear/OmniFocus.png&quot; style=&quot;clear:both;float:none;&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;p&gt;I use OmniFocus for all project and task tracking. However I do not try to replace my calendar with it. Scheduled events still go in my calendar (I just use iCal) and I also use my calendar to keep track of what I do with my time when on a contract.&lt;/p&gt;
&lt;p&gt;This allows me to easily summarize for client reports when needed and I have a little Automator workflow calculate the total number of hours spent contracting this week &amp;#8211; allowing me to easily balance the hours.&lt;/p&gt;
&lt;h2&gt;Typing&lt;/h2&gt;
&lt;p&gt;Once I am done dreaming up ideas and tasks, like so many others, the majority of my time is spent as a typist &amp;#8211; translating those tasks into computer-friendly gibberish of one kind or another. Most of the time I find myself typing C#.&lt;/p&gt;
&lt;p&gt;For quite a while I would bounce around between different editors for this task.&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;VisualStudio with resharper for maximum efficiency &amp;#8211; at the cost of either rebooting into Windows or running around in the strange parallel universe of virtualisation.&lt;/li&gt;
	&lt;li&gt;MonoDevelop for an approximation of the tools provided by VisualStudio, feeling not quite native anywhere, but very beta.&lt;/li&gt;
	&lt;li&gt;&lt;a href=&quot;http://www.sublimetext.com&quot;&gt;Sublime Text&lt;/a&gt; for beautiful, responsive, unintrusive text rendering, with a wonderland of user-configurable keyboard shortcuts and extensions. And absolutely nothing in terms of VS- and MD-like project-wide assistance.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Then a while ago I added a bookmark to the &amp;#8220;check this out&amp;#8221; pile, for a project called &lt;a href=&quot;http://www.omnisharp.net&quot;&gt;OmniSharp&lt;/a&gt;. The promise was simple:&lt;/p&gt;
&lt;ol&gt;
	&lt;li&gt;Get full Intellisense-like completion and resharper-like code analysis.&lt;/li&gt;
	&lt;li&gt;Use it in your text editor of choice.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Ha! Madness.&lt;/p&gt;
&lt;p&gt;That was probably at least a half year ago &amp;#8211; until I finally found some time to put aside my scepticism for a bit and try to set it up with Sublime.&lt;/p&gt;
&lt;p&gt;You know what? It works!&lt;/p&gt;
&lt;p&gt;This is what I currently use of the OmniSharp + Sublime Text feature set:&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;Compile check on save &amp;#8211; with errors, warnings, and resharper-like code suggestions.
	&lt;ul&gt;
		&lt;li&gt;Some suggestions I do not agree with and luckily, as with resharper, configuration lets you easily filter those out. Unity also suppresses some warnings when compiling, so I elected to filter those out as well.&lt;/li&gt;
	&lt;/ul&gt;&lt;/li&gt;
	&lt;li&gt;File auto-format when triggered by shortcut.&lt;/li&gt;
	&lt;li&gt;Intellisense-like auto-complete &amp;#8211; file, project and library-wide.&lt;/li&gt;
	&lt;li&gt;Jump to definition / list reference points.&lt;/li&gt;
	&lt;li&gt;Rename.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I am probably forgetting something, but suffice to say, I no longer feel the need to switch away from Sublime Text to boost efficiency on an unfamiliar codebase.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;/resources/posts/2015-02-26-Trusted-Gear/Sublime.png&quot;&gt;&lt;img src=&quot;/resources/posts/2015-02-26-Trusted-Gear/Sublime-Thumb.png&quot; alt=&quot;&quot; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;With regards to shortcuts and configuration, there are a bunch of little tweaks you can set up for Sublime, so of-course I have done exactly that. The good part is that Sublime preferences are all &lt;span class=&quot;caps&quot;&gt;JSON&lt;/span&gt; formatted text files, so they are easily shared in a gist:&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;&lt;a href=&quot;https://gist.github.com/AngryAnt/aab9ff86c2595410d165&quot;&gt;Preferences in a gist&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;For text editing, that produces a lovely fullscreen view like the one on the right (click for full size). Tasty, right?&lt;/p&gt;
&lt;h2&gt;Searching&lt;/h2&gt;
&lt;p&gt;After lolcat searches and menacingly typing at people who are wrong, I probably spend the majority of my browser time doing reference manual lookups. Extensions like &lt;a href=&quot;http://safarikeywordsearch.aurlien.net&quot;&gt;Safari Keyword Search&lt;/a&gt; in combination with embedded search engines or Google site search have somewhat streamlined this task, but it never really worked solidly and of-course required that I be online while working.&lt;/p&gt;
&lt;p&gt;Enter &lt;a href=&quot;http://kapeli.com/dash&quot;&gt;Dash&lt;/a&gt;. I can&amp;#8217;t remember who brought it up on twitter, but that&amp;#8217;s where I came across it and bookmarked it for later study. The idea is quite simple: It provides an offline search engine for docsets of your choosing &amp;#8211; much like man pages.&lt;/p&gt;
&lt;p&gt;You get to specify which docsets to download, associate a search key with each docset (IE &amp;#8220;cpp:&amp;#8221; and &amp;#8220;.net:&amp;#8221;), and specify a global shortcut for launching the search window &amp;#8211; as you would Spotlight on OS X. But wait: There&amp;#8217;s more!&lt;/p&gt;
&lt;p&gt;Downloadable docsets include topic-specific downloads of wiki-fied Stackoverflow questions and answers. And since you can associate multiple docsets with the same search key, these are easily accessed when you search.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/resources/posts/2015-02-26-Trusted-Gear/Dash.png&quot; style=&quot;clear:both;float:none;&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;p&gt;On top of all of this, Dash also comes with an iPad and iPhone client and integration for a bunch of different editors, environments and other tools &amp;#8211; including Sublime Text.&lt;/p&gt;
&lt;p&gt;You can find my Dash integration settings in the Sublime settings linked above. For global launch shortcut I chose ctrl+shift+space &amp;#8211; I do not recall if this is the default.&lt;/p&gt;
&lt;h2&gt;Navigation&lt;/h2&gt;
&lt;p&gt;If you, like me, grow a tad too accustomed to the default Sublime Text shortcut of alt+cmd+left/right for tab switching, I would recommend giving it a go as a global shortcut across applications. Configuring System Preferences &amp;#8211; Keyboard as shown below did the trick for me. I primarily use it in Terminal and Safari.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/resources/posts/2015-02-26-Trusted-Gear/Global-Tabs.png&quot; style=&quot;clear:both;float:none;&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;p&gt;And that is about all I have for now. I hope that this is useful to you and do let me know if something in here is off or if you&amp;#8217;re more curious about something. If you are at &lt;span class=&quot;caps&quot;&gt;GDC&lt;/span&gt; in San Francisco next week, you could even do it in person.&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;&lt;a href=&quot;http://www.omnigroup.com/omnifocus/&quot;&gt;OmniFocus&lt;/a&gt;&lt;/li&gt;
	&lt;li&gt;&lt;a href=&quot;http://www.sublimetext.com&quot;&gt;Sublime Text&lt;/a&gt;&lt;/li&gt;
	&lt;li&gt;&lt;a href=&quot;http://www.omnisharp.net&quot;&gt;OmniSharp&lt;/a&gt;&lt;/li&gt;
	&lt;li&gt;&lt;a href=&quot;https://gist.github.com/AngryAnt/aab9ff86c2595410d165&quot;&gt;Sublime Text and OmniSharp preferences&lt;/a&gt;&lt;/li&gt;
	&lt;li&gt;&lt;a href=&quot;http://kapeli.com/dash&quot;&gt;Dash&lt;/a&gt;&lt;/li&gt;
	&lt;li&gt;&lt;a href=&quot;https://github.com/farcaller/DashDoc&quot;&gt;DashDoc &amp;#8211; Dash Sublime integration&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;






</description>
				<published>2015-02-26 00:00:00 +0100</published>
				<link>http://angryant.com/2015/02/26/Trusted-Gear/</link>
			</item>
		
			<item>
				<title>Mad Mash Versioning</title>
				<description>&lt;p&gt;Through 2014, I had every once in a while heard people casually mention that they were versioning their projects in a combination of git and &lt;span class=&quot;caps&quot;&gt;SVN&lt;/span&gt;. I didn&amp;#8217;t really take the time to ask for details on it, but it was one of those things, stuck in the back of my mind.&lt;/p&gt;
&lt;p&gt;Filed under &amp;#8220;delightfully mad hacks&amp;#8221;, I finally found some time to look into it over Christmas &amp;#8211; as I was dodging various boring tasks in &lt;a href=&quot;/2015/01/01/Behave-2-5/&quot;&gt;finalising Behave 2.5&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;The Excuse&lt;/h2&gt;
&lt;p&gt;Git is lovely for its decentralisation, easy branching and a bunch of other stuff. However where it is not so delightful is in its handling of binary files.&lt;/p&gt;
&lt;p&gt;One alternative &lt;span class=&quot;caps&quot;&gt;VCS&lt;/span&gt; which is pretty good at handling binary files is &lt;span class=&quot;caps&quot;&gt;SVN&lt;/span&gt;. So by putting binary project files in &lt;span class=&quot;caps&quot;&gt;SVN&lt;/span&gt; and text files in git, you should be able to get the best of both worlds, right?&lt;/p&gt;
&lt;p&gt;That is the idea anyway.&lt;/p&gt;
&lt;h2&gt;The Hack&lt;/h2&gt;
&lt;p&gt;Regardless of whether it is a good idea or not, it is an interesting hack. Immediately, it seems like a terrible idea with way too high a potential of user error from its silly workflow overhead. So &lt;strong&gt;that&lt;/strong&gt; is where we&amp;#8217;ll attack.&lt;/p&gt;
&lt;p&gt;The goal is then to have the user place binary files in one folder and text files in other folders &amp;#8211; all under the same core project folder. And then simply commit, update and branch as normally, in the knowledge that everyones local drives will not explode with tons of versioned binary data.&lt;/p&gt;
&lt;p&gt;Our primary concern is keeping &lt;span class=&quot;caps&quot;&gt;SVN&lt;/span&gt; and git in sync &amp;#8211; with the proper commits connected. No-one likes &lt;span class=&quot;caps&quot;&gt;SVN&lt;/span&gt;, so we&amp;#8217;ll hide that away and put git in the driver seat.&lt;/p&gt;
&lt;p&gt;Luckily, git operations are also fairly easily customised on a per-repository basis, which is perfect for this case.&lt;/p&gt;
&lt;p&gt;The idea will then be to have git operations keep track of the &lt;span class=&quot;caps&quot;&gt;SVN&lt;/span&gt; working copy, making sure that everything there is committed before a dependent git revision is committed, at which point a versioned text file with the corresponding &lt;span class=&quot;caps&quot;&gt;SVN&lt;/span&gt; version number, should be added to the commit.&lt;/p&gt;
&lt;p&gt;This way, &lt;span class=&quot;caps&quot;&gt;SVN&lt;/span&gt; becomes a dictionary of collected binary files, into which git adds new versions when committing and fetches copies when updating &amp;#8211; using &lt;span class=&quot;caps&quot;&gt;SVN&lt;/span&gt; version numbers as key.&lt;/p&gt;
&lt;h2&gt;Git Hooks&lt;/h2&gt;
&lt;p&gt;Our entry point in automating this stuff with git is in the so called &amp;#8220;git hook&amp;#8221;. These are scripts located at &amp;#8220;.git/hooks/&amp;#8221; for any git repository. Per default, this folder is populated with a few demo scripts, each containing an example of what to do in response to that particular git event.&lt;/p&gt;
&lt;p&gt;For this hack, the two points of interest are:&lt;/p&gt;
&lt;ol&gt;
	&lt;li&gt;The commit process &amp;#8211; cancelling the commit if the &lt;span class=&quot;caps&quot;&gt;SVN&lt;/span&gt; working copy is not clean, otherwise getting its current version and adding it to a text file in that same commit.&lt;/li&gt;
	&lt;li&gt;The checkout process &amp;#8211; updating the &lt;span class=&quot;caps&quot;&gt;SVN&lt;/span&gt; working copy to the version specified in the text file, every time a git checkout has completed.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;This means that the files we are interested in are:&lt;/p&gt;
&lt;ol&gt;
	&lt;li&gt;(Git clone path)/.git/hooks/pre-commit&lt;/li&gt;
	&lt;li&gt;(Git clone path)/.git/hooks/post-checkout&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Note that these files are not by default versioned with the rest of your git repository, though I do recommend doing so anyway. For this hack, I chose to address this via a setup script which needs to be run once after first cloning the repository &amp;#8211; as well as after performing any updates to the versioned hook scripts (which I&amp;#8217;d estimate happening just about never).&lt;/p&gt;
&lt;h2&gt;Solution&lt;/h2&gt;
&lt;p&gt;My weapon of choice for this sort of hackery is Perl. If you would rather use something else, that is fine too &amp;#8211; as long as your shell can run it, you should be fine.&lt;/p&gt;
&lt;p&gt;Since we&amp;#8217;re in glorious hack land, I chose to take it further over the top by expanding the text file with the &lt;span class=&quot;caps&quot;&gt;SVN&lt;/span&gt; version to be a full &lt;span class=&quot;caps&quot;&gt;JSON&lt;/span&gt;-formatted configuration file, with the option of overriding parts with per-user local configuration.&lt;/p&gt;
&lt;p&gt;The project structure is as follows:&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;.gitignore &amp;#8211; containing ignores for the local user config as well as the &lt;span class=&quot;caps&quot;&gt;SVN&lt;/span&gt; folder.&lt;/li&gt;
	&lt;li&gt;&lt;span class=&quot;caps&quot;&gt;VCS&lt;/span&gt;/ &amp;#8211; this is where the core perl scripts are kept, as well as configuration.&lt;/li&gt;
	&lt;li&gt;Setup.pl &amp;#8211; the run-once script for copying the hooks in etc.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;In the linked Git repository, the example configuration has also been set up for a Unity project &amp;#8211; with the &lt;span class=&quot;caps&quot;&gt;SVN&lt;/span&gt; working copy placed in Assets/&lt;span class=&quot;caps&quot;&gt;SVN&lt;/span&gt;. Though aside from this, nothing here is specific to any technology aside from Git and &lt;span class=&quot;caps&quot;&gt;SVN&lt;/span&gt;.&lt;/p&gt;
&lt;p&gt;Additional over-the-top-ness:&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;Place a &lt;span class=&quot;caps&quot;&gt;JSON&lt;/span&gt; formatted file at &lt;span class=&quot;caps&quot;&gt;VCS&lt;/span&gt;/LocalUserConfiguration.txt to override select values from what is set in the versioned configuration file.&lt;/li&gt;
	&lt;li&gt;Setup.pl will check for a working copy at the specified &lt;span class=&quot;caps&quot;&gt;SVN&lt;/span&gt; path and run a checkout from the specified repository if none is found. So this is really a one-stop-shop kinda thing.&lt;/li&gt;
	&lt;li&gt;&amp;#8220;autoCommit&amp;#8221; and &amp;#8220;autoAdd&amp;#8221; options for mad driver-less running.
	&lt;ul&gt;
		&lt;li&gt;&amp;#8220;autoCommit&amp;#8221; will, if enabled, see the commit script run &lt;span class=&quot;caps&quot;&gt;SVN&lt;/span&gt; commit to push any local &lt;span class=&quot;caps&quot;&gt;SVN&lt;/span&gt; changes as part of the git commit process.&lt;/li&gt;
		&lt;li&gt;&amp;#8220;autoAdd&amp;#8221; is for off-your-rocker &amp;#8220;Look, ma! No hands!&amp;#8221; setups, where any unversioned files found in the &lt;span class=&quot;caps&quot;&gt;SVN&lt;/span&gt; folder are automatically added to &lt;span class=&quot;caps&quot;&gt;SVN&lt;/span&gt; as part of the git commit process.&lt;/li&gt;
	&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Why no &amp;#8220;ignore unversioned&amp;#8221; flag? In the example configuration, the &lt;span class=&quot;caps&quot;&gt;SVN&lt;/span&gt; folder is put inside a Unity Assets folder. This means that contained files are imported as part of the project and project files outside of &lt;span class=&quot;caps&quot;&gt;SVN&lt;/span&gt; can depend on them.&lt;/p&gt;
&lt;p&gt;If you have no problem risking gun-to-foot related injuries with commits missing dependencies, that&amp;#8217;s just fine. However I will not assist you in the loading of said gun.&lt;/p&gt;
&lt;p&gt;I hope that you find this stuff interesting as well &amp;#8211; if not useful. You can find everything at the other end of the below github link and I would be very interested in any feedback and discussion (preferably over &lt;a href=&quot;https://twitter.com/angryant&quot;&gt;twitter&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;Are you employing a similar combined &lt;span class=&quot;caps&quot;&gt;VCS&lt;/span&gt; setup? Are you in fact one of those who mentioned using the git+SVN combination in particular? Do you have a suggested alternative to this madness?&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;&lt;a href=&quot;https://github.com/AngryAnt/MadMashVersioning&quot;&gt;The below github link&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description>
				<published>2015-01-02 00:00:00 +0100</published>
				<link>http://angryant.com/2015/01/02/Mad-Mash-Versioning/</link>
			</item>
		
			<item>
				<title>Behave 2.5</title>
				<description>&lt;p&gt;Welcome to 2015!&lt;/p&gt;
&lt;p&gt;I hope that you have had a great new years eve and will have a productive year. To assist with that, I would like to present you with version 2.5 of Behave.&lt;/p&gt;
&lt;h2&gt;Contents&lt;/h2&gt;
&lt;p&gt;Aside from lots of editor polish, particularly around the remote debugger, this version brings interesting compiler optimisations and optional text serialisation of Behave libraries.&lt;/p&gt;
&lt;p&gt;Do note that this upgrades the serialisation version of any Behave libraries touched by 2.5. As with any software upgrade, I advise you to keep a backup or earlier revision of your libraries available before upgrading to 2.5.&lt;/p&gt;
&lt;p&gt;Interestingly, the optimisation work on the compiler also brought with it some internal restructuring. This new structure facilitates even further optimisation work down the road.&lt;/p&gt;
&lt;p&gt;Given the existing zero-allocation, low &lt;span class=&quot;caps&quot;&gt;CPU&lt;/span&gt;, low memory footprint nature of the Behave runtime, it is likely that these optimisations will mean little to a lot of users. Should you, however, be running massive amounts of autonomous agents with Behave, you will likely get some actual bang for the buck here.&lt;/p&gt;
&lt;p&gt;Also in this release are several changes and additions to the runtime, the details of which you will find in the full changelist below.&lt;/p&gt;
&lt;h2&gt;Onwards&lt;/h2&gt;
&lt;p&gt;Lots of interesting stuff in the pipeline, with the ground work for much of it already in place. Stay tuned.&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;&lt;a href=&quot;http://u3d.as/5hA&quot;&gt;Behave 2 for Unity on the asset store&lt;/a&gt;.&lt;/li&gt;
	&lt;li&gt;&lt;a href=&quot;/behave/&quot;&gt;Project information&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;
Changelist:


2.5:
 - Optional text serialisation.
     - Switch between text and binary serialisation in library settings.
     - Full and partial exports to text or binary file.
     - NOTE: Libraries opened in this version of Behave will be upgraded and are afterwards not backwards compatible.
 - Compiler upgrade.
     - Added lots of little CPU and memory optimisations.
     - Added tree analysis leading to larger memory saves on references when possible.
     - Improved handling of circular references.
     - Improved error reporting.
     - Changed name validation.
         - Underscores are no longer allowed in names - in order to avoid name clashes with pathed assets.
         - Fixed previously allowing leading numbers in names.
 - Runtime API.
     - Added library.ReflectForwards (ICollection, object).
     - Added library.SupportedRecords (ICollection).
     - Added blueprint.SupportedTrees.
     - Added Library.DidInstantiate (ICollection / Tree).
     - Changed generated enums to be valued continuously.
     - Changed get calls for unhandled records to now return -1.
 - Editor polish.
     - Improved debugger view.
         - Improved control bar layout.
         - Improved rendering of active referenced trees.
         - Fixes to follow-focus.
         - Debug view no longer re-crops to current visible tree area, preventing the previous behaviour of the view jumping around even without follow-focus enabled.
         - Improved sidebar listing of available- and connected runtimes.
         - Improved handling of disconnecting runtimes.
         - Improved tracking of available runtimes. No more need for refreshing.
         - Improved UI for adding debugger overrides.
         - Added &quot;Add overrides enabled&quot; setting (on by default).
     - Library vertical scrollbar replaced by standalone scroll buttons top / bottom when relevant - reducing visual noise.
     - Smaller tweaks and fixes.
 - Improved internal test coverage.


2.4.2:
 - Fixed some issues related to handling priority selectors in the recently update debugger.


2.4.1:
 - Fix corner case when restructuring library assets.


2.4:
 - Introducing “records”.
     - Float fields stored in “collections” - essentially ‘smart tables’.
     - Blackboard fields.
     - Utility curves.
     - Utility graphs.
     - Behaviour Tree integration.
          - “Tester” component.
          - “Writer” component.
          - Record mode for Priority Selector component.
 - Editor behavioural change: Deleting a tree no longer deletes reference nodes targeting that tree from other trees. Their target is merely cleared.
 - Editor behavioural change: The Reference node is only available in the component bar if the library contains more than one tree. Same behaviour for Tester and Writer with records.
 - Behavioural change: Invert flag is now properly applied by the Priority Selector.
 - Debugger connection stability improvement.
 - Connection disabling has been removed. This confusing feature caused more harm than good.
 - Video player now displays video title and description.


2.3.5:
 - Fix home screen video player.


2.3.4:
 - Better error messages in case of insufficient file access privileges (OHAI Perforce).
 - Added simple version check to the home screen.
 - New icons for Priority Selector and &quot;form new tree&quot;.
 - Smaller, embedded, JSON library.
 - Fix annoying behaviour with tree renaming where text fields would keep last entry.
 - Fix similar behaviour with component text fields on tree selection change.
 - Unity 5 compatibility fixes (tested on beta 2).


2.3.3:
 - Fix focus handling issue with auto-complete.
 - Parametrisation is now correctly applied for reset handler calls.


2.3.2:
 - Fix sidebar item duplication and deletion only functional during rename.


2.3.1:
 - Fix GUI error being logged on tree selection.
 - Proper handling of currently edited library asset being deleted.


2.3:
 - Added support for instant repeaters.
 - Added support for mandatory contexts.
 - Added optional target parameter to Tree.ResetForwards.
 - Added Tree.TickWrapping method.
 - Added debugger auto-launch settings to library build options.
 - Added home screen - shown on launch or via the Help menu, full of resources.
 - Behavioural change: Decorators no longer forward the instant flag of their child node.
 - Behaviour of decorators receiving a Running signal from their control connection is now defined.
 - Dependencies now shipped as separate (replaceable) files for minimal project impact.
 - Editor polish.
     - Added support for running multiple editor debugging instances on one machine.
     - Added focus-follow for debugger and canvas.
     - Added both scrollwheel/pad and drag-to-scroll support to all canvas views.
     - Drag connection to occupied input slot to replace.
     - Directly drag-drop trees from the sidebar onto the canvas as reference nodes.
     - Instant flag doesn't show on nodes connected to parents ignoring the flag.
     - &quot;Last edited library&quot; now tracked per project.
     - Last selected tree is now also restored between sessions and playmode transitions.
     - A bunch of minor adjustments and improvements.
     - Performance + memory + disk space optimisations.
     - Minor bugfixes.
 - New documentation layout and enhancements (already released as available).
 - Reshuffling of code to make way for exciting new things down the road.


2.2.2:
 - Addressed protobuf issue causing Parallel component completion setting to not get stored correctly.


2.2.1:
 - Fixed issue causing parallel components to fail compilation.


2.2:
 - Behavioural change: Support for multiple different action handler signatures is discontinued effective immediately.
    - Generated agent blueprint as well as accepted reflected signatures are now only:
        - public BehaveResult [Tick/Init][Name]Action (Tree sender);
        - public void Reset[Name]Action (Tree sender);
 - Added Tree class accessors - all valid only during an active init/tick/reset handler call:
    - string ActiveStringParameter
    - float ActiveFloatParameter
    - IAgent ActiveAgent
    - object ActiveData
 - Rather than waiting for the Unity bugfix, the built-in compiler API is now bypassed in favour of direct compiler binary execution.
    - An additional system-level mono SDK install is no longer needed to work around this Unity bug.
 - Tree.SetForward now returns boolean success value rather than logging error when passed unused action.
 - Full-library export now also available from the library settings in stead of menu-only access.
 - Even more UI polish: Better word-wrap, more contrasts for emphasis, instant flag hidden in unaffected scenarios and much more.
 - &quot;Form new tree&quot; nicely moves the new subtree up around the root socket rather than retaining the old position.
 - Default frame-rate of DebugUpdater now set to 20 fps rather than every frame. Gun safety and all that.
 - Massive codegen size save for larger libraries - from optimisation of tree-agent introspection codegen. Compile-time win.
 - More rigid parameter evaluation (remove needless occasional extra codegen).
 - Fixed copy and duplication procedures incorrectly not copying parameter values.
 - Force Unity to write serialised data before compiling.


2.1.1:
 - Fixed issue with tree paramterisation breaking debugger visualisation.


2.1:
 - Added autocomplete on action names, string parameters and component contexts.
 - Added mandatory actions (present in library regardless of use in trees).
 - Added partial library export and library merging / import-to-library.
 - Added Behave stripping - leave behind only a very lean Behave runtime, for redistribution or super slim deploy.
 - Added parameterised trees - get even more re-use out of your trees by overriding context and variables per reference.
 - Behavioural change: Tree.Reset will now delay resetting tree variables until after complete component reset.
 - Behavioural change: Tree.Tick will no longer automatically reset the tree upon completion. This plays very well with:
 - Added Tree.TickContinuously (int iterationCap = 1024) - ticks tree till completion or iteration cap is reached.
 - Added BehaveResult Tree.Result (bool value) utility function to side with Tree.Invert (BehaveResult value).
 - Added int Debugging.Local.ConnectionCount property - facilitating debug behaviour dependent on Behave debugger presence.
 - Moved default install path from Assets/Behave to Assets/Plugins/Behave.
    - WARNING: See Readme.txt upgrade guide.
 - Fixed decorator control node removal resulting in detached control connection.
 - Fixed decorator incorrectly not forwarding the instant status of its child node.
 - Fixed scenario where agent classes would get reflected for handlers even if blueprint derived.
 - Fixed unexpected corner cases of bad library configuration failing compiles (now causing warnings or simply being ignored).
 - Fixed Behave window breaking down when exiting play mode after having been active there.
 - Fixes to context getting incorrectly reset in some scenarios.
 - Fixed copy / paste functionality missing in some text fields.
 - Lots of UI polish and minor fixes.


2.0:
 - New editor.
    - Unified all controls into one window.
    - Completely customised look - compatible with both Unity light and dark skin.
    - Keyboard authoring interface in addition to drag &amp;amp; drop.
 - Debugger upgrade.
    - Remote debugging.
    - Tick and reset.
    - &quot;Unplug&quot; for debugger-only control.
    - Breakpoints.
    - Action overrides - override the return values of specified actions.
 - Decorator rewrite.
    - Deprecated old decorator.
       - Still compiles, but cannot be added.
    - Decorators are now control-type components.
       - No specific decorator handlers on agents.
       - Control is achieved via third connection socket.
    - Two initial decorator types: Repeater and Interrupter.
 - Asset restructuring.
 	- No more collections - for nesting, use paths in tree names.
 	- New serialization format - see Readme.txt for upgrade instructions.
    - Collections are gone. Use Unix-style path names for tree organisation.
 - IAgent.Tick (Tree, bool) changed to IAgent.Tick (Tree)
	- Init calls can now only be handled explicitly
 - Full coverage online documentation and other community resources.
 - Countless fixes and polish items.

1.5:
 - Added Tree.TickActive - indicating if a tree is currently executing a tick or if it has completed evaluation.
 - In-tick tree reset requests now result in a reset at the end of tree evaluation rather than an immediate one.
 - Removed the legacy compatibility assembly (for compatibility with pre-1.2 assets) from the default distribution.
 - Fixed &quot;X must be instantiated using the ScriptableObject.CreateInstance method instead of new X&quot; warnings.

1.4:
 - Fixed decorator incorrectly initializing on every returning tick when tick handler returned Running.
 - Fixed debugger view dependency on active tree editor - causing reported null reference exception.
 - Fixed missing scrollbars on browser window.
 - Reduced logging noise from debug builds.
 - Agent blueprints can now be MonoBehaviour based.
 - Clarified wording on &quot;library not loaded&quot;.
 - Now handling reset a bit cleverer - potential performance boost.
 - Changed the default success criteria of Parallel components from SuccessOrFailure to Success.
 - Added &quot;instant&quot; flag to components. Components marked instant will affect sequences and selectors when moving between child nodes. When a child node marked &quot;instant&quot; completes, rather than waiting for the next tree tick to tick the following child node, the sequence or selector does it immediately.
 - The compiler progress bar returns.
 - Editing a Behave asset now focuses the asset browser last instead of the tree editor.
 - Behave can now be installed in any subfolder of Assets - provided its internal folder structure remains intact.
 - Compilation speed improvements.
 - Enabled references across collection borders.
 - Added Tree.DataSize - returning the number of bytes used by a tree instance. This is also displayed in the debugger window.

1.3:
 - Fixed priority selector init flag resetting.
 - Fixed reference handling on tree renaming and deletion.
 - Fixed references still pointing at old collection post collection duplication.
 - Fixed compilation of actions and decorators with non-integral float parameters.
 - Fixed GUI list behaviours.
 - Fixed passing context back and forth between referenced trees and referrer.
 - Fixed reordering connections not causing save state to be set.
 - Various GUI tweaks.
 - Runtime optimisations.
 - Enabled scrolling of the tree list in the debugger window.
 - Exposed Tree.ReflectForwards.
 - Added Tree.ResetForwards.
 - Added agent blueprints - connecting to agent handlers through virtual methods rather than reflected handlers.
 - Made connections selectable in the tree editor via the connection nub.
 - Moved connection managing from the inspector to the tree editor, where it is more visible and handy.
 - Added support for disabling connections - for faster, less destructive debugging.
 - Double-click reference component to jump to referenced tree.
 - Changed &quot;Cannot update unregistered tree&quot; handling from an exception to an error message. Still need more info.
 - Now showing string and float parameters in the tree editor if either is set.

1.2:
 - Fixed release building.
 - Added the priority selector, introducing the API points:
    - int IAgent.SelectTopPriority (Tree sender, params int[] IDs);
    - enum BL[LibraryName].PriorityType { PriorityName, ..., Unknown };
 - Added support for branch contexts, introducing the API points:
    - enum BL[LibraryName].ContextType { ContextName, ..., Unknown };
    - int Tree.ActiveContext { get; }
 - Changed IAgent interface:
    - Tick (bool init, Tree sender) -&amp;gt; Tick (Tree sender, bool init)
 - Added &quot;Select asset&quot; button to the standard inspector.
 - Interface polish.

1.1:
 - Made compatible with Unity 3.0 - including ensuring that the 2.5-2.6.1 bug preventing compilation on Windows is fixed on the Unity side.
 - UI tweaks and polish.
 - Added the option to have return values of nodes be inverted.
 - Fixed compiler bug when facing sequence or selector with only one child node.
 - Renamed Library.Tree -&amp;gt; Library.InstantiateTree.
 - Added Tree.Tick () and Tree.Reset () methods using the IAgent instance given at instantiation of the tree.
 - Removed the abstract Library class.
 - Changed generated library class:
    - Trees -&amp;gt; TreeType.
    - Actions -&amp;gt; ActionType.
    - Decorators -&amp;gt; DecoratorType.
    - Tree InstantiateTree (int, IAgent) -&amp;gt; static Tree InstantiateTree (TreeType, IAgent)
    - int TreeID (Tree) -&amp;gt; static TreeType Type (Tree)
    - bool IsAction (int) -&amp;gt; static bool IsAction (int)
    - bool IsDecorator (int) -&amp;gt; static bool IsDecorator (int)
 - Upped editor performance.
 - New asset structure change with automatic import of Behave 1.0 assets.
 - Changed action and decorator handlers. These are now the handlers mapped:
    - public BehaveResult Init[Name][Action/Decorator] (Tree sender, string stringParameter, float floatParameter, IAgent agent, object data);
    - public BehaveResult Tick[Name][Action/Decorator] (Tree sender, string stringParameter, float floatParameter, IAgent agent, object data);
    - public void Reset[Name][Action/Decorator] (Tree sender, string stringParameter, float floatParameter, IAgent agent, object data);
    - public BehaveResult Init[Name][Action/Decorator] (Tree sender);
    - public BehaveResult Tick[Name][Action/Decorator] (Tree sender);
    - public void Reset[Name][Action/Decorator] (Tree sender);
    - public BehaveResult [Name][Action/Decorator] {get; set;}
 - Added support for collection duplication.
 - Moved debug rendering into the editor with its own dedicated debugger window, including actor listing.
 - Debugger now renders active sub-trees as well.

1.0:
 - Lots o fixes for Unity 2.5 compatibility.
 - Closer editor integration with new UI.
    - Component bar.
    - Node inspection.
 - Runtime tree debugging.
 - Direct mapping of action and delegate handlers via reflection.
 - Kitty demo.

0.3b:
 - Various tweaks to the editor UI.
 - Optimised the compiler.
 - Fixed the following editor bugs from the bug list:
    - When the editor scrips are recompiled and when the user enters and exits play mode, running editors will loose references, causing undetermined behaviour.
    - When a compile fails, the Behave compiler is locked and unusable – requiring a unity relaunch.
 - Implemented the following wishlist items:
    - Behaviour tree decorators.
    - Stand-alone edition of the Behave editor.
    - Behaviour tree debugging features.

0.2b:
 - Made the demo project a whole lot more interesting.
 - Implemented the editor wish list item: Ability to move trees between collections.
 - Various tweaks to the editor UI.
 - Fixed a ton of bugs in the compiler.
 - Fixed the following editor bugs from the bug list:
    - Not able to delete collections from library.
    - Not able to delete trees from library.
    - Not able to rename collections from library.
    - Not able to rename trees from library.
    - Missing &quot;tree has been changed, save changes?&quot; dialog.

0.1b:
 - Some documentation is available.
 - Compiler is now creating sensible output.
 - A simple test tree and script using it is provided with the demo.
 - Documentation is linked directly from the unity help menu.
 - Less spamming of the log with debug information.

Pre-release:
 - Magic happened. Behave was born.
&lt;/pre&gt;</description>
				<published>2015-01-01 00:00:00 +0100</published>
				<link>http://angryant.com/2015/01/01/Behave-2-5/</link>
			</item>
		
			<item>
				<title>Behave 2.4</title>
				<description>&lt;p&gt;It is finally time for a more substantial update for Behave. With version 2.4, Behave ventures out of its former behaviour tree comfort zone and adds built-in support for utility and blackboard constructs.&lt;/p&gt;
&lt;h2&gt;Records&lt;/h2&gt;
&lt;p&gt;Combined under the label &amp;#8220;Records&amp;#8221;, this expansion adds three primary new library objects:&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;Fields&lt;/li&gt;
	&lt;li&gt;Curves&lt;/li&gt;
	&lt;li&gt;Graphs&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Similarly to how behaviour trees can be connected to agent blueprints, records are tied to so called &amp;#8220;collections&amp;#8221;. These are effectively &amp;#8220;smart tables&amp;#8221;, which can be queried (by name) for the value of a specific record &amp;#8211; as well as be asked to set the current value of a record.&lt;/p&gt;
&lt;p&gt;You can either choose to use these collections on their own or directly integrate them with your behaviour trees.&lt;/p&gt;
&lt;p&gt;For more information, see the behave documentation as well as the new Records video.&lt;/p&gt;
&lt;h2&gt;Onwards&lt;/h2&gt;
&lt;p&gt;So as you might have guessed, the internal refactoring work mentioned in earlier releases, paved the way for this expansion. However, as per usual, the implementation is somewhat restrained. Any feedback and requests would be most welcome.&lt;/p&gt;
&lt;p&gt;That is not to say that the expansion plans end here, but more on that later.&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;&lt;a href=&quot;http://u3d.as/5hA&quot;&gt;Behave 2 for Unity on the asset store&lt;/a&gt;.&lt;/li&gt;
	&lt;li&gt;&lt;a href=&quot;/behave/&quot;&gt;Project information&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;
Changelist:


2.4:
 - Introducing “records”.
     - Float fields stored in “collections” - essentially ‘smart tables’.
     - Blackboard fields.
     - Utility curves.
     - Utility graphs.
     - Behaviour Tree integration.
          - “Tester” component.
          - “Writer” component.
          - Record mode for Priority Selector component.
 - Editor behavioural change: Deleting a tree no longer deletes reference nodes targeting that tree from other trees. Their target is merely cleared.
 - Editor behavioural change: The Reference node is only available in the component bar if the library contains more than one tree. Same behaviour for Tester and Writer with records.
 - Behavioural change: Invert flag is now properly applied by the Priority Selector.
 - Debugger connection stability improvement.
 - Connection disabling has been removed. This confusing feature caused more harm than good.
 - Video player now displays video title and description.


2.3.5:
 - Fix home screen video player.


2.3.4:
 - Better error messages in case of insufficient file access privileges (OHAI Perforce).
 - Added simple version check to the home screen.
 - New icons for Priority Selector and &quot;form new tree&quot;.
 - Smaller, embedded, JSON library.
 - Fix annoying behaviour with tree renaming where text fields would keep last entry.
 - Fix similar behaviour with component text fields on tree selection change.
 - Unity 5 compatibility fixes (tested on beta 2).


2.3.3:
 - Fix focus handling issue with auto-complete.
 - Parametrisation is now correctly applied for reset handler calls.


2.3.2:
 - Fix sidebar item duplication and deletion only functional during rename.


2.3.1:
 - Fix GUI error being logged on tree selection.
 - Proper handling of currently edited library asset being deleted.


2.3:
 - Added support for instant repeaters.
 - Added support for mandatory contexts.
 - Added optional target parameter to Tree.ResetForwards.
 - Added Tree.TickWrapping method.
 - Added debugger auto-launch settings to library build options.
 - Added home screen - shown on launch or via the Help menu, full of resources.
 - Behavioural change: Decorators no longer forward the instant flag of their child node.
 - Behaviour of decorators receiving a Running signal from their control connection is now defined.
 - Dependencies now shipped as separate (replaceable) files for minimal project impact.
 - Editor polish.
     - Added support for running multiple editor debugging instances on one machine.
     - Added focus-follow for debugger and canvas.
     - Added both scrollwheel/pad and drag-to-scroll support to all canvas views.
     - Drag connection to occupied input slot to replace.
     - Directly drag-drop trees from the sidebar onto the canvas as reference nodes.
     - Instant flag doesn't show on nodes connected to parents ignoring the flag.
     - &quot;Last edited library&quot; now tracked per project.
     - Last selected tree is now also restored between sessions and playmode transitions.
     - A bunch of minor adjustments and improvements.
     - Performance + memory + disk space optimisations.
     - Minor bugfixes.
 - New documentation layout and enhancements (already released as available).
 - Reshuffling of code to make way for exciting new things down the road.


2.2.2:
 - Addressed protobuf issue causing Parallel component completion setting to not get stored correctly.


2.2.1:
 - Fixed issue causing parallel components to fail compilation.


2.2:
 - Behavioural change: Support for multiple different action handler signatures is discontinued effective immediately.
    - Generated agent blueprint as well as accepted reflected signatures are now only:
        - public BehaveResult [Tick/Init][Name]Action (Tree sender);
        - public void Reset[Name]Action (Tree sender);
 - Added Tree class accessors - all valid only during an active init/tick/reset handler call:
    - string ActiveStringParameter
    - float ActiveFloatParameter
    - IAgent ActiveAgent
    - object ActiveData
 - Rather than waiting for the Unity bugfix, the built-in compiler API is now bypassed in favour of direct compiler binary execution.
    - An additional system-level mono SDK install is no longer needed to work around this Unity bug.
 - Tree.SetForward now returns boolean success value rather than logging error when passed unused action.
 - Full-library export now also available from the library settings in stead of menu-only access.
 - Even more UI polish: Better word-wrap, more contrasts for emphasis, instant flag hidden in unaffected scenarios and much more.
 - &quot;Form new tree&quot; nicely moves the new subtree up around the root socket rather than retaining the old position.
 - Default frame-rate of DebugUpdater now set to 20 fps rather than every frame. Gun safety and all that.
 - Massive codegen size save for larger libraries - from optimisation of tree-agent introspection codegen. Compile-time win.
 - More rigid parameter evaluation (remove needless occasional extra codegen).
 - Fixed copy and duplication procedures incorrectly not copying parameter values.
 - Force Unity to write serialised data before compiling.


2.1.1:
 - Fixed issue with tree paramterisation breaking debugger visualisation.


2.1:
 - Added autocomplete on action names, string parameters and component contexts.
 - Added mandatory actions (present in library regardless of use in trees).
 - Added partial library export and library merging / import-to-library.
 - Added Behave stripping - leave behind only a very lean Behave runtime, for redistribution or super slim deploy.
 - Added parameterised trees - get even more re-use out of your trees by overriding context and variables per reference.
 - Behavioural change: Tree.Reset will now delay resetting tree variables until after complete component reset.
 - Behavioural change: Tree.Tick will no longer automatically reset the tree upon completion. This plays very well with:
 - Added Tree.TickContinuously (int iterationCap = 1024) - ticks tree till completion or iteration cap is reached.
 - Added BehaveResult Tree.Result (bool value) utility function to side with Tree.Invert (BehaveResult value).
 - Added int Debugging.Local.ConnectionCount property - facilitating debug behaviour dependent on Behave debugger presence.
 - Moved default install path from Assets/Behave to Assets/Plugins/Behave.
    - WARNING: See Readme.txt upgrade guide.
 - Fixed decorator control node removal resulting in detached control connection.
 - Fixed decorator incorrectly not forwarding the instant status of its child node.
 - Fixed scenario where agent classes would get reflected for handlers even if blueprint derived.
 - Fixed unexpected corner cases of bad library configuration failing compiles (now causing warnings or simply being ignored).
 - Fixed Behave window breaking down when exiting play mode after having been active there.
 - Fixes to context getting incorrectly reset in some scenarios.
 - Fixed copy / paste functionality missing in some text fields.
 - Lots of UI polish and minor fixes.


2.0:
 - New editor.
    - Unified all controls into one window.
    - Completely customised look - compatible with both Unity light and dark skin.
    - Keyboard authoring interface in addition to drag &amp;amp; drop.
 - Debugger upgrade.
    - Remote debugging.
    - Tick and reset.
    - &quot;Unplug&quot; for debugger-only control.
    - Breakpoints.
    - Action overrides - override the return values of specified actions.
 - Decorator rewrite.
    - Deprecated old decorator.
       - Still compiles, but cannot be added.
    - Decorators are now control-type components.
       - No specific decorator handlers on agents.
       - Control is achieved via third connection socket.
    - Two initial decorator types: Repeater and Interrupter.
 - Asset restructuring.
 	- No more collections - for nesting, use paths in tree names.
 	- New serialization format - see Readme.txt for upgrade instructions.
    - Collections are gone. Use Unix-style path names for tree organisation.
 - IAgent.Tick (Tree, bool) changed to IAgent.Tick (Tree)
	- Init calls can now only be handled explicitly
 - Full coverage online documentation and other community resources.
 - Countless fixes and polish items.

1.5:
 - Added Tree.TickActive - indicating if a tree is currently executing a tick or if it has completed evaluation.
 - In-tick tree reset requests now result in a reset at the end of tree evaluation rather than an immediate one.
 - Removed the legacy compatibility assembly (for compatibility with pre-1.2 assets) from the default distribution.
 - Fixed &quot;X must be instantiated using the ScriptableObject.CreateInstance method instead of new X&quot; warnings.

1.4:
 - Fixed decorator incorrectly initializing on every returning tick when tick handler returned Running.
 - Fixed debugger view dependency on active tree editor - causing reported null reference exception.
 - Fixed missing scrollbars on browser window.
 - Reduced logging noise from debug builds.
 - Agent blueprints can now be MonoBehaviour based.
 - Clarified wording on &quot;library not loaded&quot;.
 - Now handling reset a bit cleverer - potential performance boost.
 - Changed the default success criteria of Parallel components from SuccessOrFailure to Success.
 - Added &quot;instant&quot; flag to components. Components marked instant will affect sequences and selectors when moving between child nodes. When a child node marked &quot;instant&quot; completes, rather than waiting for the next tree tick to tick the following child node, the sequence or selector does it immediately.
 - The compiler progress bar returns.
 - Editing a Behave asset now focuses the asset browser last instead of the tree editor.
 - Behave can now be installed in any subfolder of Assets - provided its internal folder structure remains intact.
 - Compilation speed improvements.
 - Enabled references across collection borders.
 - Added Tree.DataSize - returning the number of bytes used by a tree instance. This is also displayed in the debugger window.

1.3:
 - Fixed priority selector init flag resetting.
 - Fixed reference handling on tree renaming and deletion.
 - Fixed references still pointing at old collection post collection duplication.
 - Fixed compilation of actions and decorators with non-integral float parameters.
 - Fixed GUI list behaviours.
 - Fixed passing context back and forth between referenced trees and referrer.
 - Fixed reordering connections not causing save state to be set.
 - Various GUI tweaks.
 - Runtime optimisations.
 - Enabled scrolling of the tree list in the debugger window.
 - Exposed Tree.ReflectForwards.
 - Added Tree.ResetForwards.
 - Added agent blueprints - connecting to agent handlers through virtual methods rather than reflected handlers.
 - Made connections selectable in the tree editor via the connection nub.
 - Moved connection managing from the inspector to the tree editor, where it is more visible and handy.
 - Added support for disabling connections - for faster, less destructive debugging.
 - Double-click reference component to jump to referenced tree.
 - Changed &quot;Cannot update unregistered tree&quot; handling from an exception to an error message. Still need more info.
 - Now showing string and float parameters in the tree editor if either is set.

1.2:
 - Fixed release building.
 - Added the priority selector, introducing the API points:
    - int IAgent.SelectTopPriority (Tree sender, params int[] IDs);
    - enum BL[LibraryName].PriorityType { PriorityName, ..., Unknown };
 - Added support for branch contexts, introducing the API points:
    - enum BL[LibraryName].ContextType { ContextName, ..., Unknown };
    - int Tree.ActiveContext { get; }
 - Changed IAgent interface:
    - Tick (bool init, Tree sender) -&amp;gt; Tick (Tree sender, bool init)
 - Added &quot;Select asset&quot; button to the standard inspector.
 - Interface polish.

1.1:
 - Made compatible with Unity 3.0 - including ensuring that the 2.5-2.6.1 bug preventing compilation on Windows is fixed on the Unity side.
 - UI tweaks and polish.
 - Added the option to have return values of nodes be inverted.
 - Fixed compiler bug when facing sequence or selector with only one child node.
 - Renamed Library.Tree -&amp;gt; Library.InstantiateTree.
 - Added Tree.Tick () and Tree.Reset () methods using the IAgent instance given at instantiation of the tree.
 - Removed the abstract Library class.
 - Changed generated library class:
    - Trees -&amp;gt; TreeType.
    - Actions -&amp;gt; ActionType.
    - Decorators -&amp;gt; DecoratorType.
    - Tree InstantiateTree (int, IAgent) -&amp;gt; static Tree InstantiateTree (TreeType, IAgent)
    - int TreeID (Tree) -&amp;gt; static TreeType Type (Tree)
    - bool IsAction (int) -&amp;gt; static bool IsAction (int)
    - bool IsDecorator (int) -&amp;gt; static bool IsDecorator (int)
 - Upped editor performance.
 - New asset structure change with automatic import of Behave 1.0 assets.
 - Changed action and decorator handlers. These are now the handlers mapped:
    - public BehaveResult Init[Name][Action/Decorator] (Tree sender, string stringParameter, float floatParameter, IAgent agent, object data);
    - public BehaveResult Tick[Name][Action/Decorator] (Tree sender, string stringParameter, float floatParameter, IAgent agent, object data);
    - public void Reset[Name][Action/Decorator] (Tree sender, string stringParameter, float floatParameter, IAgent agent, object data);
    - public BehaveResult Init[Name][Action/Decorator] (Tree sender);
    - public BehaveResult Tick[Name][Action/Decorator] (Tree sender);
    - public void Reset[Name][Action/Decorator] (Tree sender);
    - public BehaveResult [Name][Action/Decorator] {get; set;}
 - Added support for collection duplication.
 - Moved debug rendering into the editor with its own dedicated debugger window, including actor listing.
 - Debugger now renders active sub-trees as well.

1.0:
 - Lots o fixes for Unity 2.5 compatibility.
 - Closer editor integration with new UI.
    - Component bar.
    - Node inspection.
 - Runtime tree debugging.
 - Direct mapping of action and delegate handlers via reflection.
 - Kitty demo.

0.3b:
 - Various tweaks to the editor UI.
 - Optimised the compiler.
 - Fixed the following editor bugs from the bug list:
    - When the editor scrips are recompiled and when the user enters and exits play mode, running editors will loose references, causing undetermined behaviour.
    - When a compile fails, the Behave compiler is locked and unusable – requiring a unity relaunch.
 - Implemented the following wishlist items:
    - Behaviour tree decorators.
    - Stand-alone edition of the Behave editor.
    - Behaviour tree debugging features.

0.2b:
 - Made the demo project a whole lot more interesting.
 - Implemented the editor wish list item: Ability to move trees between collections.
 - Various tweaks to the editor UI.
 - Fixed a ton of bugs in the compiler.
 - Fixed the following editor bugs from the bug list:
    - Not able to delete collections from library.
    - Not able to delete trees from library.
    - Not able to rename collections from library.
    - Not able to rename trees from library.
    - Missing &quot;tree has been changed, save changes?&quot; dialog.

0.1b:
 - Some documentation is available.
 - Compiler is now creating sensible output.
 - A simple test tree and script using it is provided with the demo.
 - Documentation is linked directly from the unity help menu.
 - Less spamming of the log with debug information.

Pre-release:
 - Magic happened. Behave was born.
&lt;/pre&gt;</description>
				<published>2014-11-28 00:00:00 +0100</published>
				<link>http://angryant.com/2014/11/28/Behave-2-4/</link>
			</item>
		
			<item>
				<title>Co-very-routine</title>
				<description>&lt;p&gt;I really like coroutines. Like with most things, they should be applied in well-considered quantities, but when applied they can really expand what you can achieve in just a few lines of code. Particularly in our frame-bound world.&lt;/p&gt;
&lt;p&gt;However there has always been this little subset of extra things, which I would have liked to have seen supported by Unity coroutines out of the box.&lt;/p&gt;
&lt;p&gt;&amp;#8220;Hang on, weren&amp;#8217;t you just there?&amp;#8221;&lt;/p&gt;
&lt;p&gt;Yep. I was and terrible as the excuse might be, there was always something that seemed shinier or more on fire.&lt;/p&gt;
&lt;p&gt;Then at &lt;a href=&quot;http://unity3d.com/unite&quot;&gt;Unite 13&lt;/a&gt;, Devin and Matthew of &lt;a href=&quot;http://twistedoakstudios.com/&quot;&gt;Twisted Oak Studios&lt;/a&gt; did an excellent &lt;a href=&quot;https://www.youtube.com/watch?v=ciDD6Wl-Evk&quot;&gt;talk about extending coroutines&lt;/a&gt; by using extension methods to insert a proxy layer between coroutines and the Unity coroutine-system. Unfortunately I didn&amp;#8217;t catch the talk live (I don&amp;#8217;t see many talks at conferences), but shortly after I could catch it on YouTube. Technology, yay!&lt;/p&gt;
&lt;p&gt;In any case that really ended my supply of excuses, other than work.&lt;/p&gt;
&lt;p&gt;Devin and Matthew had specifically implemented the setup to allow coroutines to provide a return value, provide a nicer stopping mechanism, as well as provide a useful way of handling exceptions thrown during the execution of coroutines. This provided an excellent platform to work off and did tick three items off my wishlist, but didn&amp;#8217;t quite deliver the whole package.&lt;/p&gt;
&lt;p&gt;It is an interesting talk and if you have the time, you should give it a look.&lt;/p&gt;
&lt;h1&gt;The Whole Package&lt;/h1&gt;
&lt;p&gt;So I slacked off doing work for a bit and somewhere in Q2 2014 got started writing my own implementation of extended coroutines, with the extra bits and bops on my list.&lt;/p&gt;
&lt;p&gt;This here is the list:&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;Coroutines providing return values (yay! free!)&lt;/li&gt;
	&lt;li&gt;Handle exceptions thrown during coroutine execution (yay! free!)&lt;/li&gt;
	&lt;li&gt;Useful stopping behaviour (yay! free!)&lt;/li&gt;
	&lt;li&gt;Built-in soft stop.&lt;/li&gt;
	&lt;li&gt;Better built-in communication between caller and coroutine.&lt;/li&gt;
	&lt;li&gt;Easier way of intermixing threading and coroutines.&lt;/li&gt;
	&lt;li&gt;Built-in simple load balancing.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Soft Stop&lt;/h2&gt;
&lt;p&gt;Straight up stopping a coroutine is fine, but dependent on what it was doing while being stopped, it might leave a mess behind. The idea with a soft stop mechanism is that in stead of directly stopping the coroutine, the external controller in stead requests that the coroutine stops.&lt;/p&gt;
&lt;p&gt;This allows the coroutine to monitor the state of the requested stop flag at appropriate points in its execution and terminate with the necessary cleanup in response.&lt;/p&gt;
&lt;h2&gt;Caller &amp;#8211; Coroutine Communications&lt;/h2&gt;
&lt;p&gt;But why stop the communications at just requesting a nice stop? What if the work produced by the coroutine could have relevance throughout its execution?&lt;/p&gt;
&lt;p&gt;By making the result of the coroutine accessible before the completion of the coroutine, we gain the capability of not just reading it early on, but also contributing to its building from outside of the coroutine.&lt;/p&gt;
&lt;h2&gt;Threading&lt;/h2&gt;
&lt;p&gt;Sufficiently intense tasks, working on data types not tied to the UnityEngine, &lt;span class=&quot;caps&quot;&gt;API&lt;/span&gt; can benefit from threading. Unfortunately, most of the time things aren&amp;#8217;t that cleanly cut out, and only part of the task is suitable for threading.&lt;/p&gt;
&lt;p&gt;At that point the alternatives are to either forget about partially threading the task or to bridge the two types of concurrency system. Since the latter rarely turns out very pretty, the former is often chosen.&lt;/p&gt;
&lt;p&gt;Building threading right into the coroutine system makes the choice easy.&lt;/p&gt;
&lt;h2&gt;Simple Load Balancing&lt;/h2&gt;
&lt;p&gt;Finally, heavy tasks which for one reason or another cannot be threaded (perhaps the very nature of the task requires dealing with the UnityEngine &lt;span class=&quot;caps&quot;&gt;API&lt;/span&gt;), can in stead be frame sliced inside a coroutine.&lt;/p&gt;
&lt;p&gt;However the logic for doing so can be more or less pretty and writing boilerplate is boring. Clearly this would be great to also have built into the base coroutine system.&lt;/p&gt;
&lt;h1&gt;Usage&lt;/h1&gt;
&lt;p&gt;So that is the full wish list implemented. Now let&amp;#8217;s take a look at some quick example snippets.&lt;/p&gt;
&lt;h2&gt;Result&lt;/h2&gt;
&lt;p&gt;The base interface for using the extended coroutines is to start them via the new generic version of &lt;code&gt;MonoBehaviour.StartCoroutine&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;For running regular coroutines, the only other difference is that in stead of yielding directly to the return value of &lt;code&gt;StartCoroutine&amp;lt;T&amp;gt;&lt;/code&gt;, you yield to the .Coroutine member of its &lt;code&gt;CoroutineData&amp;lt;T&amp;gt;&lt;/code&gt; return value.&lt;/p&gt;
&lt;p&gt;This is also the reference which gives you access to the result of the coroutine execution.&lt;/p&gt;
&lt;script src='https://gist.github.com/.js?file=Result.cs'&gt;&lt;/script&gt;&lt;div&gt;&lt;noscript&gt;&lt;pre&gt;&lt;code&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/noscript&gt;&lt;/div&gt;
&lt;ul&gt;
	&lt;li&gt;&lt;a href=&quot;https://gist.githubusercontent.com/AngryAnt/a9cada6093e7d47bea1c/raw/Result.cs&quot;&gt;Example&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Exception&lt;/h2&gt;
&lt;p&gt;Since the coroutine calls are executed by the coroutine system and not the callee, normally exceptions just get swallowed up by the coroutine system and logged out.&lt;/p&gt;
&lt;p&gt;The approach of Devin and Matthew, as implemented here, is to swallow the exception, break coroutine execution and then re-throw the same exception when next the coroutine comes into contact with the caller &amp;#8211; namely when its result is accessed.&lt;/p&gt;
&lt;script src='https://gist.github.com/.js?file=Exception.cs'&gt;&lt;/script&gt;&lt;div&gt;&lt;noscript&gt;&lt;pre&gt;&lt;code&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/noscript&gt;&lt;/div&gt;
&lt;ul&gt;
	&lt;li&gt;&lt;a href=&quot;https://gist.githubusercontent.com/AngryAnt/a9cada6093e7d47bea1c/raw/Exception.cs&quot;&gt;Example&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Stop&lt;/h2&gt;
&lt;p&gt;In stead of relying on the strange, existing methods of stopping coroutines and the limitations they come with (such as only stopping a coroutine initially started by string parameter or stopping all coroutines on a behaviour), the &lt;code&gt;CoroutineData&amp;lt;T&amp;gt;&lt;/code&gt; reference yields another possibility.&lt;/p&gt;
&lt;p&gt;Since it effectively represents an instance of an executing coroutine, adding a &lt;code&gt;Stop&lt;/code&gt; method to it becomes much more intuitive.&lt;/p&gt;
&lt;script src='https://gist.github.com/.js?file=Stop.cs'&gt;&lt;/script&gt;&lt;div&gt;&lt;noscript&gt;&lt;pre&gt;&lt;code&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/noscript&gt;&lt;/div&gt;
&lt;ul&gt;
	&lt;li&gt;&lt;a href=&quot;https://gist.githubusercontent.com/AngryAnt/a9cada6093e7d47bea1c/raw/Stop.cs&quot;&gt;Example&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Soft Stop&lt;/h2&gt;
&lt;p&gt;Requesting that a coroutine stops, requires a line of communication between the caller and coroutine. This is provided in the form of the instance of &lt;code&gt;CoroutineData&amp;lt;T&amp;gt;&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;However in order to effectively pass this, the calling convention on the coroutine is slightly different. Rather than passing the return value of the coroutine to &lt;code&gt;StartCoroutine&amp;lt;T&amp;gt;&lt;/code&gt;, the coroutine is passed as a delegate, taking &lt;code&gt;CoroutineData&amp;lt;T&amp;gt;&lt;/code&gt; as its only parameter.&lt;/p&gt;
&lt;p&gt;The rest of the flow is exactly as with &lt;code&gt;Stop&lt;/code&gt;, except &lt;code&gt;RequestStop&lt;/code&gt; is used by the caller and the coroutine periodically checks &lt;code&gt;CoroutineData&amp;lt;T&amp;gt;.ShouldStop&lt;/code&gt;.&lt;/p&gt;
&lt;script src='https://gist.github.com/.js?file=SoftStop.cs'&gt;&lt;/script&gt;&lt;div&gt;&lt;noscript&gt;&lt;pre&gt;&lt;code&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/noscript&gt;&lt;/div&gt;
&lt;ul&gt;
	&lt;li&gt;&lt;a href=&quot;https://gist.githubusercontent.com/AngryAnt/a9cada6093e7d47bea1c/raw/SoftStop.cs&quot;&gt;Example&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Threading&lt;/h2&gt;
&lt;p&gt;The interface for threading is really very simple. Two new yield classes have been added &lt;code&gt;WaitForWorkerThread&lt;/code&gt; and &lt;code&gt;WaitForMainThread&lt;/code&gt;. Yielding to an instance of either will do exactly as advertised. Yielding break or the result or throwing an exception will terminate the thread and the coroutine.&lt;/p&gt;
&lt;p&gt;When yielding &lt;code&gt;WaitForSeconds&lt;/code&gt; on the worker thread, the thread will sleep for the specified amount of seconds. And finally the &lt;code&gt;CoroutineData&amp;lt;T&amp;gt;&lt;/code&gt; holds a flag accessor to determine the thread state of the coroutine.&lt;/p&gt;
&lt;script src='https://gist.github.com/.js?file=Threading.cs'&gt;&lt;/script&gt;&lt;div&gt;&lt;noscript&gt;&lt;pre&gt;&lt;code&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/noscript&gt;&lt;/div&gt;
&lt;ul&gt;
	&lt;li&gt;&lt;a href=&quot;https://gist.githubusercontent.com/AngryAnt/a9cada6093e7d47bea1c/raw/Threading.cs&quot;&gt;Example&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Load Balancing&lt;/h2&gt;
&lt;p&gt;Load balancing could be done in a bunch of different ways and I would encourage you to add your own (I would love to see your ideas as well). So I decided to just do the simplest I could think of.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;WaitIfFrameTime&lt;/code&gt; will yield until the next frame if the current frame has taken longer than the specified amount of time. This way it effectively sets down a max frame time while utilising all the time leading up to that cap.&lt;/p&gt;
&lt;script src='https://gist.github.com/.js?file=Load.cs'&gt;&lt;/script&gt;&lt;div&gt;&lt;noscript&gt;&lt;pre&gt;&lt;code&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/noscript&gt;&lt;/div&gt;
&lt;ul&gt;
	&lt;li&gt;&lt;a href=&quot;https://gist.githubusercontent.com/AngryAnt/a9cada6093e7d47bea1c/raw/Load.cs&quot;&gt;Example&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;Fin&lt;/h1&gt;
&lt;p&gt;And that is it! I hope you find some use of these extensions to the extensions and do let me know if you come up with some cool further extensions.&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;&lt;a href=&quot;https://gist.github.com/AngryAnt/a9cada6093e7d47bea1c&quot;&gt;Source and examples&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description>
				<published>2014-06-20 00:00:00 +0200</published>
				<link>http://angryant.com/2014/06/20/Co-very-routine/</link>
			</item>
		
			<item>
				<title>Construct</title>
				<description>&lt;p&gt;&lt;strong&gt;Updated&lt;/strong&gt; April 28th: Added illustrations.&lt;/p&gt;
&lt;p&gt;A while ago I &lt;a href=&quot;http://angryant.com/2010/01/05/downloading-the-hydra/&quot;&gt;published a post&lt;/a&gt; referencing &lt;a href=&quot;http://www.imdb.com/title/tt0244244/&quot;&gt;Hollywoods take on programming anno 2001&lt;/a&gt;. It covered how to load additional code into a Unity build at runtime, which can be quite useful for patching, modding and similar post-publishing changes to your build, involving logic changes.&lt;/p&gt;
&lt;p&gt;The post was pretty brief, just covering the raw basics of the technique and not dealing with any of the challenges in integrating it with a more complete patching solution.&lt;/p&gt;
&lt;p&gt;Luckily I have recently had a chance to return to working with it and implementing it fully on a project. This post will cover the challenges met and my solutions to them.&lt;/p&gt;
&lt;p&gt;Unlike the original post, this one is not exactly brief, so, uh, hang on to something?&lt;/p&gt;
&lt;h1&gt;Overview&lt;/h1&gt;
&lt;p&gt;The basic method of integrating new code in an existing Unity runtime is as follows:&lt;/p&gt;
&lt;ol&gt;
	&lt;li&gt;Build the patch code to a .net assembly.&lt;/li&gt;
	&lt;li&gt;Load the byte stream of that assembly to an array at runtime.&lt;/li&gt;
	&lt;li&gt;Create a System.Reflection.Assembly instance from the bytes.&lt;/li&gt;
	&lt;li&gt;Instantiate classes, attach components and call methods via reflection.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img src=&quot;/resources/posts/2014-04-25-Construct/1-Assembly.png&quot; style=&quot;float:none;clear:both;&quot; title=&quot;Assembly process&quot; alt=&quot;Assembly process&quot; /&gt;&lt;/p&gt;
&lt;p&gt;This works really well for simple logic expansions. However if you want to couple the logic update with content such as prefabs and scenes using new components defined in this new assembly, you are out of luck.&lt;/p&gt;
&lt;p&gt;New content can be loaded into Unity runtimes via asset bundles (these require Unity pro at time of writing). However in order to build these asset bundles as well as loading them afterwards, Unity needs to know all the components used in the contained scenes and prefabs.&lt;/p&gt;
&lt;p&gt;Unfortunately this is not possible as that would require the presence of our new MonoBehaviours in the shipped build, which we are obviously not very interested in, given that we are working on a post-shipping patch.&lt;/p&gt;
&lt;p&gt;The challenge is therefore to somehow construct asset bundles which can be built and loaded without the Unity editor or runtime knowing about all the MonoBehaviours used in the bundles.&lt;/p&gt;
&lt;p&gt;Fun, right?&lt;/p&gt;
&lt;h1&gt;Approach&lt;/h1&gt;
&lt;p&gt;Right, getting this one sorted will take a few lines to explain, but let&amp;#8217;s just jump straight into it. The solution I went with goes a little something like this:&lt;/p&gt;
&lt;ol&gt;
	&lt;li&gt;Compile bundle scripts to an assembly, from which components are attached in bundle scenes and on bundle prefabs.&lt;/li&gt;
	&lt;li&gt;Before bundle build, pack each of these components into a container component, holding the data and type of the original, replacing it as attached on the same Game Object.&lt;/li&gt;
	&lt;li&gt;When loading the bundle, load the new assembly and then run an unpack step for each container component on each prefab, restoring the original data and references to a newly instantiated component of the correct type, on the same GameObject.&lt;/li&gt;
	&lt;li&gt;When scenes from the bundle are loaded, the same unpacking process runs for each container component in there.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;While this does sound very straight forward, there are of-course a few gotchas in there. So let us jump in a bit deeper.&lt;/p&gt;
&lt;h2&gt;Workflow&lt;/h2&gt;
&lt;p&gt;The goal here is to make sure that the programmers, level designers and artists working on new bundles get to maintain as much of their familiar Unity workflow as possible.&lt;/p&gt;
&lt;p&gt;So whatever building and packing solution we set up, the following must still be supported at the very least:&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;Assets are imported and used in prefabs and scenes as per usual.&lt;/li&gt;
	&lt;li&gt;Scripts are auto-compiled when saved and can be drag-dropped onto Game Objects.&lt;/li&gt;
	&lt;li&gt;Variables and references can easily be tweaked on new bundle components via the inspector.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;At first, these workflow requirements do seem to conflict with our technical requirements, given that all code unique to the bundle &lt;em&gt;must&lt;/em&gt; be built into a separate assembly loaded at runtime, rather than be part of the main script compile.&lt;/p&gt;
&lt;p&gt;However where there&amp;#8217;s a will there&amp;#8217;s a way and a tall piles of hacks make for interesting realities.&lt;/p&gt;
&lt;p&gt;In the &lt;a href=&quot;http://angryant.com/videos/&quot;&gt;Unity Hacks talk&lt;/a&gt; I demonstrate how to use an asset post processor to compile java files into a jar plugin automatically. The first step to keeping our workflow without breaking the technical requirements is to copy this, but for C# (and/or JS) files compiled into a .net assembly.&lt;/p&gt;
&lt;p&gt;Rather than spending time going into detail on how you would do that, I point you to the beforementioned talk (and its available example code) as well as the gmcs compiler shipped with the Unity editor. You should be able to construct the flow just fine from that.&lt;/p&gt;
&lt;p&gt;One important note is that the folder from which your asset post processor picks up your scripts should be somewhere in Assets/WebplayerTemplates, as Unity by default will not compile scripts located there into the main project assembly (this is set up to avoid website js getting mixed up for templates).&lt;/p&gt;
&lt;p&gt;I chose a location looking something like this: Assets/WebplayerTemplates/Bundles/MyFirstBundle.&lt;/p&gt;
&lt;p&gt;The asset post processor building the assembly should then drop it in a folder like Assets/Bundles/MyFirstBundle and make a duplicate of it, with the .txt extension.&lt;/p&gt;
&lt;p&gt;The original will be from where you can drag components and the copy will be the one built into the bundle, since it is now imported as a TextAsset and can therefore be included, unlike the original assembly.&lt;/p&gt;
&lt;center&gt;&lt;img src=&quot;/resources/posts/2014-04-25-Construct/2-Workflow.png&quot; style=&quot;float:none;clear:both;&quot; title=&quot;Workflow&quot; alt=&quot;Workflow&quot; /&gt;&lt;/center&gt;
&lt;p&gt;At this point you can start work on the contents of the bundle, saving scenes, prefabs and other assets unique to the bundle into the same folder as the assembly and text file &amp;#8211; subfolders under that would work fine as well.&lt;/p&gt;
&lt;p&gt;It is important to note that attaching behaviours from the assembly, as well as behaviours defined in the core project to scene objects and prefabs in the bundle is just fine. However prefabs, scenes and scripts outside of the bundle should never reference behaviours or assets from the bundle directly.&lt;/p&gt;
&lt;h2&gt;Building&lt;/h2&gt;
&lt;h3&gt;Core&lt;/h3&gt;
&lt;p&gt;It is worth spending a little bit of time writing an automated build step of the core project, which deletes all the bundle folders before running the actual build. That way you can, after testing, be pretty sure that nothing in the core project inadvertently referenced the contents of a bundle directly.&lt;/p&gt;
&lt;p&gt;Should you feel like wanting a bit earlier warning on something like that, I would recommend spending a bit of time writing an extension checking for such references as scenes are saved and prefabs imported.&lt;/p&gt;
&lt;h3&gt;Bundle&lt;/h3&gt;
&lt;p&gt;The folder created earlier in under Assets/WebPlayerTemplates is only used for storing scripts and building them into assemblies. So at the point of building the assembly, all that matters is the contents of the folder with the resulting assembly, its .txt duplicate and any other assets placed in there.&lt;/p&gt;
&lt;p&gt;Before running the actual bundle build process, we first (as outlined in the Approach) need to pack and remove all instances of MonoBehaviours defined in the bundle assembly.&lt;/p&gt;
&lt;p&gt;First, run through each prefab and scene in the bundle folder and consider each instance of these behaviours.&lt;/p&gt;
&lt;p&gt;For each, attach to the same Game Object an instance of your container component type, defined in the core project &amp;#8211; I am calling it BundledBehaviour in this post.&lt;/p&gt;
&lt;h3&gt;Packing&lt;/h3&gt;
&lt;p&gt;Store the full type name of the original in the BundledBehavior (we will need it to re-instantiate the original when unpacking) and add the two as a pair to a list.&lt;/p&gt;
&lt;p&gt;Next, all serialised fields on the original must be stored in the BundledBehaviour. Iterating over that is a breeze with the SerialisedObject &lt;span class=&quot;caps&quot;&gt;API&lt;/span&gt;.&lt;/p&gt;
&lt;p&gt;Value types can just be straight up serialised to a byte array and chucked onto the BundledBehaviour. For my implementation I chose to use protobuf-net for that, but you can really use whatever meets your fancy.&lt;/p&gt;
&lt;p&gt;Once the value types are dealt with, we should move on to the next behaviour in the list, before handling reference types in a second pass. The reason for this will become apparent when we start dealing with inter-component referencing.&lt;/p&gt;
&lt;center&gt;&lt;img src=&quot;/resources/posts/2014-04-25-Construct/3-Building.png&quot; style=&quot;float:none;clear:both;&quot; title=&quot;Building and packing&quot; alt=&quot;Building and packing&quot; /&gt;&lt;/center&gt;
&lt;h3&gt;References&lt;/h3&gt;
&lt;p&gt;Bam. Done. Wasn&amp;#8217;t that quick? On to the second pass&amp;#8230;&lt;/p&gt;
&lt;p&gt;Reference types get a bit trickier than value types. For each serialised reference, we need to add to a list on the BundledBehaviour an instance of a class pairing the field name and the reference. In the context of this post I will refer to that container class as ReferenceField.&lt;/p&gt;
&lt;p&gt;At this point we unfortunately need to start distinguishing between asset type references, like textures and audio clips, and component type references. Where storing component references in a field of type Component works just fine, unfortunately asset references need to be stored on a field of their exact type.&lt;/p&gt;
&lt;p&gt;I forget the exact reason for the Unity serialisation system working like this, but for the purpose of this post, how about we just file that under &amp;#8220;the law of the land&amp;#8221; and move on?&lt;/p&gt;
&lt;p&gt;The result is that the ReferenceField type will need to have a &amp;#8220;field name&amp;#8221; string field, a &amp;#8220;component reference&amp;#8221; Component field and then an &amp;#8220;X reference&amp;#8221; X field for each asset type X.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/resources/posts/2014-04-25-Construct/4-Data.png&quot; style=&quot;float:none;clear:both;&quot; title=&quot;Data storage&quot; alt=&quot;Data storage&quot; /&gt;&lt;/p&gt;
&lt;p&gt;Annoying to deal with, but remember that these are just references, so after having written that list once, the slight overhead and dealing with it in general &amp;#8211; through that wonderful interface you decided to put on it, will carry a minimum of pain.&lt;/p&gt;
&lt;p&gt;When storing component references, do remember to first check if the reference is contained in that list of MonoBehaviour &amp;#8594; BundledBehaviour pairs built earlier. If so, store the a reference to the BundledBehaviour in stead.&lt;/p&gt;
&lt;h3&gt;Finalise&lt;/h3&gt;
&lt;p&gt;Now that all components instances from the bundle assembly have had a BundledBehaviour instance created, containing the type name, value type field data and reference type field references, we can safely go ahead and destroy all the original behaviours.&lt;/p&gt;
&lt;p&gt;Great! Finally before building the actual bundle, a neat trick is to create a little asset bundle manifest &amp;#8211; basically a custom asset type which will be set as the main asset of the bundle, referencing assets we need handy.&lt;/p&gt;
&lt;p&gt;Again, since there is plenty of documentation on how to do that in the &lt;a href=&quot;http://angryant.com/videos/&quot;&gt;Unity Hacks talk&lt;/a&gt;, I would direct you there rather than explain it here.&lt;/p&gt;
&lt;p&gt;The bundle manifest should reference the TextAsset of the bundle assembly (since we need to load that before doing anything else) as well as all the prefabs being built into the assembly.&lt;/p&gt;
&lt;p&gt;Once that is set up, all there is left to do is to initiate the asset bundle build process, specifying the bundle manifest as the main asset, rejoicing that this crazy cabal of hacks somehow worked.&lt;/p&gt;
&lt;center&gt;&lt;img src=&quot;/resources/posts/2014-04-25-Construct/6-Manifest.png&quot; style=&quot;float:none;clear:both;&quot; title=&quot;Bundle manifest&quot; alt=&quot;Bundle manifest&quot; /&gt;&lt;/center&gt;
&lt;h2&gt;Loading&lt;/h2&gt;
&lt;p&gt;So now we have an asset bundle which we need to somehow magically turn into a whole new self-contained game runtime or whatever it was we put in there.&lt;/p&gt;
&lt;p&gt;First up, via bundle manifest &amp;#8211; accessible as the main asset of the bundle, the bytes of the assembly need to be passed to a System.Reflection.Assembly constructor.&lt;/p&gt;
&lt;p&gt;With that done, all the behaviours defined in the assembly are available for attaching.&lt;/p&gt;
&lt;p&gt;Next, all prefabs should be unpacked first. For each BundledBehaviour attached, run an Unpack function.&lt;/p&gt;
&lt;h3&gt;Unpacking&lt;/h3&gt;
&lt;p&gt;By passing the type name stored on the BundledBehaviour to a GetType call, we can get a reference to the original type, which we can pass to AddComponent, creating a new instance of the original. Store this pairing between BundledBehaviour and new instance in a list &amp;#8211; just like during the packing process.&lt;/p&gt;
&lt;p&gt;Once available deserialise the simple fields, as stored in byte form on the BundledBehaviour, onto the new instance.&lt;/p&gt;
&lt;p&gt;For each asset reference in the list of ReferenceFields, copy over the reference to the correct field on the new instance.&lt;/p&gt;
&lt;p&gt;As with the packing process, dealing with reference type fields should be pushed to a second pass &amp;#8211; once all instances of the original types are available.&lt;/p&gt;
&lt;center&gt;&lt;img src=&quot;/resources/posts/2014-04-25-Construct/5-Unpack.png&quot; style=&quot;float:none;clear:both;&quot; title=&quot;Loading and unpacking&quot; alt=&quot;Loading and unpacking&quot; /&gt;&lt;/center&gt;
&lt;h3&gt;References&lt;/h3&gt;
&lt;p&gt;We can now pass over all BundledBehaviour previously treated and copy all references stored in the list of ReferenceFields to the members with the proper names &amp;#8211; as specified in the same.&lt;/p&gt;
&lt;p&gt;When copying over a reference, check first if it is one of our BundledBehaviour instances and if so, copy over the new instance it is paired with in stead.&lt;/p&gt;
&lt;p&gt;With all original data and references restored, all instances of BundledBehaviour on the prefabs can now be destroyed.&lt;/p&gt;
&lt;h3&gt;Scenes&lt;/h3&gt;
&lt;p&gt;Scenes can now be loaded normally from the bundle, since all prefabs have now been properly unpacked. BundledBehaviour should in its Awake handler start the same unpacking process used on the prefabs, so that loading a scene automatically unpacks it.&lt;/p&gt;
&lt;p&gt;Violá! New inter-depended content and logic is now live in your runtime!&lt;/p&gt;
&lt;h1&gt;Recommendations and Limitations&lt;/h1&gt;
&lt;p&gt;Seeing as the BundledBehaviours are using Awake, that basically rules out behaviours depending on one-another during Awake. Not to worry though, you still have OnEnable and Start for initialisation. Just keep it in mind.&lt;/p&gt;
&lt;p&gt;Depending on your use case for this, you might end up with an interesting web of different versions of bundles loaded on any given client machine. I would therefore recommend not spending time and resources on building a dependency tree between bundles and in stead strictly forbid one bundle using components defined in another. Additionally it would be a good idea to designate one namespace per bundle.&lt;/p&gt;
&lt;p&gt;As mentioned in the original post, this whole trick depends on the mono &lt;span class=&quot;caps&quot;&gt;JIT&lt;/span&gt; runtime being available. That means no fun for you if you are targeting iOS or the consoles &amp;#8211; at time of writing, those are the platforms on which Unity employs &lt;span class=&quot;caps&quot;&gt;AOT&lt;/span&gt; rather than &lt;span class=&quot;caps&quot;&gt;JIT&lt;/span&gt;.&lt;/p&gt;
&lt;h1&gt;Security&lt;/h1&gt;
&lt;p&gt;Before we run out and celebrate our great fortune, a word on security: Since a likely application for this technique is to load self-contained bundles over the internet, remember that a third party could potentially insert themselves mid-stream and modify the contents of your transmission.&lt;/p&gt;
&lt;p&gt;If we were just transmitting textures and meshes, that should be just fine, but in this instance we are transmitting executable code which we intend to run in our application.&lt;/p&gt;
&lt;p&gt;So it would probably be a good idea to somehow guard against someone inserting malicious code in there. At the very least you should employ some public key signing of the bundles &amp;#8211; optimally doing the whole transfer on a secured connection (whatever that means these days).&lt;/p&gt;
&lt;p&gt;And that is about it. A fair bit of text, but I hope you found some use in this postmortem-ish post. I had fun writing it at least :)&lt;/p&gt;</description>
				<published>2014-04-25 00:00:00 +0200</published>
				<link>http://angryant.com/2014/04/25/Construct/</link>
			</item>
		
	</channel>
</rss>
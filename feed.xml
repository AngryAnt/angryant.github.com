<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
	<channel>
		<title>AngryAnt.com/feed</title>
		<description>Random scribblings at random intervals</description>
		<link>http://angryant.com</link>
		
			<item>
				<title>The Engine Wars: Numbers</title>
				<description>&lt;p&gt;So this years &lt;span class=&quot;caps&quot;&gt;GDC&lt;/span&gt; did indeed not disappoint &amp;#8211; lots of great talks, meetings and announcements. Thanks for saying hi if you did &amp;#8211; if not, maybe next year. Of the announcements, I would like to just focus on the engine ones here.&lt;/p&gt;
&lt;h1&gt;Overview&lt;/h1&gt;
&lt;p&gt;Unity 5 was announced with a great feature set, Unreal 4 was released to the public on an attractive subscription license (including full source) and the same for CryEngine (though no source).&lt;/p&gt;
&lt;p&gt;This heavy escalation of the engine wars means that now more than ever, the choice of tech to startups and indies is about tech rather than numbers.&lt;/p&gt;
&lt;p&gt;However the numbers are not exactly transparent or directly comparable and not all information is out there yet (especially for CryEngine). I have done my best to collect the available information, but please let me know if something is off or missing.&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;CryEngine is now available (no source) for indies at 9.9 $/€ per seat, per month.&lt;/li&gt;
&lt;/ul&gt;
&lt;ul&gt;
	&lt;li&gt;Unreal4 is available (source included) at $19 per seat, per month, plus 5% revenue share on gross sales (meaning you get 65% payout from iOS sales in stead of 70% for instance).&lt;/li&gt;
&lt;/ul&gt;
&lt;ul&gt;
	&lt;li&gt;Unity5 has no change in its licensing model (providing more options, also rendering it more confusing) &amp;#8211; it has a free version (some features locked away), a rental and an up-front model &amp;#8211; no revenue share or source on any of them. One core difference in the rental model for Unity is that you always bind for 12 months.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The balance of the new CryEngine and Unreal offers in general over Unity is that most of the cost can be deferred to after sales, where Unity in general is up-front payment.&lt;/p&gt;
&lt;h1&gt;Comparison&lt;/h1&gt;
&lt;p&gt;In the form below you can adjust number of seats, duration of production and expected gross sales to see how this will affect the product prices. Note that the rows starting with &amp;#8220;+&amp;#8221; are added to the base cost.&lt;/p&gt;
&lt;style&gt;
&lt;p&gt;.calculated td
	{
		font-size: 10pt;
		padding: 10px;
		white-space: nowrap;
	}
	.calculated td.header
	{
		font-size: 10pt;
		padding: 10px;
		color: #0083C3;
		white-space: nowrap;
	}&lt;/p&gt;
&lt;/style&gt;
&lt;table cellspacing=&quot;0&quot; cellpadding=&quot;0&quot;&gt;
&lt;tr&gt;
&lt;td&gt;
&lt;p&gt;Seats&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p&gt;Duration (months)&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p&gt;Gross sales&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;
&lt;input type=&quot;text&quot; id=&quot;seats&quot; value=&quot;4&quot; onchange=&quot;update ()&quot; /&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;input type=&quot;text&quot; id=&quot;duration&quot; value=&quot;10&quot; onchange=&quot;update ()&quot; /&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;input type=&quot;text&quot; id=&quot;sales&quot; value=&quot;500000&quot; onchange=&quot;update ()&quot; /&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;table class=&quot;calculated&quot; cellspacing=&quot;0&quot; cellpadding=&quot;0&quot;&gt;
&lt;tr&gt;
		&lt;td&gt;&lt;/td&gt;
		&lt;td class=&quot;header&quot;&gt;CryEngine &lt;sup class=&quot;footnote&quot; id=&quot;fnr1&quot;&gt;&lt;a href=&quot;#fn1&quot;&gt;1&lt;/a&gt;&lt;/sup&gt;&lt;/td&gt;
		&lt;td class=&quot;header&quot;&gt;Unity5&lt;/td&gt;
		&lt;td class=&quot;header&quot;&gt;Unity5 pro&lt;/td&gt;
		&lt;td class=&quot;header&quot;&gt;Unity5 sub&lt;/td&gt;
		&lt;td class=&quot;header&quot;&gt;Unreal4 &lt;sup class=&quot;footnote&quot; id=&quot;fnr4&quot;&gt;&lt;a href=&quot;#fn4&quot;&gt;4&lt;/a&gt;&lt;/sup&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
		&lt;td class=&quot;header&quot;&gt;Base&lt;/td&gt;
		&lt;td formula=&quot;9.9 * seats * duration&quot;&gt;&lt;/td&gt;
		&lt;td&gt;$0&lt;/td&gt;
		&lt;td formula=&quot;1500 * seats&quot;&gt;&lt;/td&gt;
		&lt;td formula=&quot;75 * seats * ceiling (duration, 12)&quot;&gt;&lt;/td&gt;
		&lt;td formula=&quot;19 * seats * duration + sales * 0.05&quot;&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
		&lt;td class=&quot;header&quot;&gt;+ Android&lt;/td&gt;
		&lt;td&gt;$0&lt;/td&gt;
		&lt;td&gt;$0&lt;/td&gt;
		&lt;td formula=&quot;1500 * seats&quot;&gt;&lt;/td&gt;
		&lt;td formula=&quot;75 * seats * ceiling (duration, 12)&quot;&gt;&lt;/td&gt;
		&lt;td&gt;$0&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
		&lt;td class=&quot;header&quot;&gt;+ iOS &lt;sup class=&quot;footnote&quot; id=&quot;fnr2&quot;&gt;&lt;a href=&quot;#fn2&quot;&gt;2&lt;/a&gt;&lt;/sup&gt;&lt;/td&gt;
		&lt;td&gt;$0&lt;/td&gt;
		&lt;td&gt;$0&lt;/td&gt;
		&lt;td formula=&quot;1500 * seats&quot;&gt;&lt;/td&gt;
		&lt;td formula=&quot;75 * seats * ceiling (duration, 12)&quot;&gt;&lt;/td&gt;
		&lt;td&gt;$0&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
		&lt;td class=&quot;header&quot;&gt;+ WinPhone 8&lt;/td&gt;
		&lt;td&gt;N/A&lt;/td&gt;
		&lt;td&gt;$0&lt;/td&gt;
		&lt;td&gt;$0&lt;/td&gt;
		&lt;td&gt;$0&lt;/td&gt;
		&lt;td&gt;N/A&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
		&lt;td class=&quot;header&quot;&gt;+ Blackberry&lt;/td&gt;
		&lt;td&gt;N/A&lt;/td&gt;
		&lt;td&gt;$0&lt;/td&gt;
		&lt;td&gt;$0&lt;/td&gt;
		&lt;td&gt;$0&lt;/td&gt;
		&lt;td&gt;N/A&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
		&lt;td class=&quot;header&quot;&gt;+ Web/GL&lt;/td&gt;
		&lt;td&gt;N/A&lt;/td&gt;
		&lt;td&gt;$0&lt;/td&gt;
		&lt;td&gt;$0&lt;/td&gt;
		&lt;td&gt;$0&lt;/td&gt;
		&lt;td&gt;$0&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
		&lt;td class=&quot;header&quot;&gt;+ PS4 &lt;sup class=&quot;footnote&quot; id=&quot;fnr2&quot;&gt;&lt;a href=&quot;#fn2&quot;&gt;2&lt;/a&gt;&lt;/sup&gt;&lt;/td&gt;
		&lt;td&gt;Call us &lt;sup class=&quot;footnote&quot; id=&quot;fnr3&quot;&gt;&lt;a href=&quot;#fn3&quot;&gt;3&lt;/a&gt;&lt;/sup&gt;&lt;/td&gt;
		&lt;td&gt;N/A&lt;/td&gt;
		&lt;td&gt;Call Sony &lt;sup class=&quot;footnote&quot; id=&quot;fnr5&quot;&gt;&lt;a href=&quot;#fn5&quot;&gt;5&lt;/a&gt;&lt;/sup&gt;&lt;/td&gt;
		&lt;td&gt;Call Sony &lt;sup class=&quot;footnote&quot; id=&quot;fnr5&quot;&gt;&lt;a href=&quot;#fn5&quot;&gt;5&lt;/a&gt;&lt;/sup&gt;&lt;/td&gt;
		&lt;td&gt;Call us &lt;sup class=&quot;footnote&quot; id=&quot;fnr3&quot;&gt;&lt;a href=&quot;#fn3&quot;&gt;3&lt;/a&gt;&lt;/sup&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
		&lt;td class=&quot;header&quot;&gt;+ XboxOne &lt;sup class=&quot;footnote&quot; id=&quot;fnr2&quot;&gt;&lt;a href=&quot;#fn2&quot;&gt;2&lt;/a&gt;&lt;/sup&gt;&lt;/td&gt;
		&lt;td&gt;Call us &lt;sup class=&quot;footnote&quot; id=&quot;fnr3&quot;&gt;&lt;a href=&quot;#fn3&quot;&gt;3&lt;/a&gt;&lt;/sup&gt;&lt;/td&gt;
		&lt;td&gt;N/A&lt;/td&gt;
		&lt;td&gt;$0&lt;/td&gt;
		&lt;td&gt;$0&lt;/td&gt;
		&lt;td&gt;Call us &lt;sup class=&quot;footnote&quot; id=&quot;fnr3&quot;&gt;&lt;a href=&quot;#fn3&quot;&gt;3&lt;/a&gt;&lt;/sup&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
		&lt;td class=&quot;header&quot;&gt;+ WiiU &lt;sup class=&quot;footnote&quot; id=&quot;fnr2&quot;&gt;&lt;a href=&quot;#fn2&quot;&gt;2&lt;/a&gt;&lt;/sup&gt;&lt;/td&gt;
		&lt;td&gt;Call us &lt;sup class=&quot;footnote&quot; id=&quot;fnr3&quot;&gt;&lt;a href=&quot;#fn3&quot;&gt;3&lt;/a&gt;&lt;/sup&gt;&lt;/td&gt;
		&lt;td&gt;N/A&lt;/td&gt;
		&lt;td&gt;$0&lt;/td&gt;
		&lt;td&gt;$0&lt;/td&gt;
		&lt;td&gt;Call us &lt;sup class=&quot;footnote&quot; id=&quot;fnr3&quot;&gt;&lt;a href=&quot;#fn3&quot;&gt;3&lt;/a&gt;&lt;/sup&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;script&gt;update ();&lt;/script&gt;&lt;p class=&quot;footnote&quot; id=&quot;fn1&quot;&gt;&lt;a href=&quot;#fnr1&quot;&gt;&lt;sup&gt;1&lt;/sup&gt;&lt;/a&gt; : On CryEngine:&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;While &amp;#8220;Base&amp;#8221; means Linux, Mac and Windows for the others, CryEngine does not support Mac and Linux.&lt;/li&gt;
	&lt;li&gt;Not a lot of details are available on licensing at this time.&lt;/li&gt;
	&lt;li&gt;It would seem that the as-a-service model has a company income limit &amp;#8211; similar to Unity free being unavailable for $100k+ companies.&lt;/li&gt;
&lt;/ul&gt;
&lt;p class=&quot;footnote&quot; id=&quot;fn2&quot;&gt;&lt;a href=&quot;#fnr2&quot;&gt;&lt;sup&gt;2&lt;/sup&gt;&lt;/a&gt; : iOS and consoles require registering with platform owner&lt;/p&gt;
&lt;p class=&quot;footnote&quot; id=&quot;fn3&quot;&gt;&lt;a href=&quot;#fnr3&quot;&gt;&lt;sup&gt;3&lt;/sup&gt;&lt;/a&gt; : “Call us” most likely means old-school licensing as in up-front large cash payment / larger rev-share or a mix.&lt;/p&gt;
&lt;p class=&quot;footnote&quot; id=&quot;fn4&quot;&gt;&lt;a href=&quot;#fnr4&quot;&gt;&lt;sup&gt;4&lt;/sup&gt;&lt;/a&gt; : Keep in mind that since revenue share for Unreal4 is taken of gross, any publisher or investor deal involving revenue share will relatively scale your effective cost of the engine share.&lt;/p&gt;
&lt;p class=&quot;footnote&quot; id=&quot;fn5&quot;&gt;&lt;a href=&quot;#fnr5&quot;&gt;&lt;sup&gt;5&lt;/sup&gt;&lt;/a&gt; : Sony has not promised outright to cover license expenses like Microsoft and Nintendo, but are likely to.&lt;/p&gt;
&lt;p&gt;Also keep in mind that none of the providers are closed to the idea of doing tailored quotes on bulk or custom deals. This post is mostly intended for startups and indies who generally would not receive such quotes.&lt;/p&gt;
&lt;h1&gt;Sources&lt;/h1&gt;
&lt;ul&gt;
	&lt;li&gt;&lt;a href=&quot;http://www.cryengine.com/news/crytek-announces-its-cryengine-as-a-service-program&quot;&gt;http://www.cryengine.com/news/crytek-announces-its-cryengine-as-a-service-program&lt;/a&gt;&lt;/li&gt;
	&lt;li&gt;&lt;a href=&quot;https://store.unity3d.com/products/pricing&quot;&gt;https://store.unity3d.com/products/pricing&lt;/a&gt;&lt;/li&gt;
	&lt;li&gt;&lt;a href=&quot;http://blogs.unity3d.com&quot;&gt;http://blogs.unity3d.com&lt;/a&gt;&lt;/li&gt;
	&lt;li&gt;&lt;a href=&quot;https://www.unrealengine.com/register&quot;&gt;https://www.unrealengine.com/register&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I hope you find this useful and again &amp;#8211; this is what I could find. Do please let me know if something is missing or off.&lt;/p&gt;</description>
				<published>2014-03-25 00:00:00 +0100</published>
				<link>http://angryant.com/2014/03/25/The-Engine-Wars-Numbers/</link>
			</item>
		
			<item>
				<title>GDC 14: The Quest For Fun</title>
				<description>&lt;p&gt;Next week is that wondrous time of &lt;span class=&quot;caps&quot;&gt;GDC&lt;/span&gt; again and boy am I looking forward to saying hi to old friends, meeting new ones and absorbing some great talks.&lt;/p&gt;
&lt;p&gt;Unlike my previous visits however, this time I attend representing not an employer, but myself as a freelancer. Freelancing in Q3 and 4 of 2013 was filled with lots of fun and great challenges, so my mission at this years &lt;span class=&quot;caps&quot;&gt;GDC&lt;/span&gt; will be to build my schedule to make 2014 at least as much fun.&lt;/p&gt;
&lt;p&gt;For more information on my freelancing services and references, please see the &lt;a href=&quot;/freelance&quot;&gt;Freelance&lt;/a&gt; and &lt;a href=&quot;/work&quot;&gt;Work&lt;/a&gt; pages.&lt;/p&gt;
&lt;p&gt;If you have a task or project you think we could do some good work on together / want to talk about Behave for a bit or just say hi, please do not hesitate to give me a ping.&lt;/p&gt;
&lt;p&gt;Shortly after arrival I will pick up a prepaid &lt;span class=&quot;caps&quot;&gt;SIM&lt;/span&gt;, so I am reachable via &lt;a href=&quot;http://twitter.com/AngryAnt&quot;&gt;Twitter&lt;/a&gt; or the &lt;span class=&quot;caps&quot;&gt;GDC&lt;/span&gt; app PM system.&lt;/p&gt;
&lt;p&gt;I&amp;#8217;ll also be co-hosting the &lt;span class=&quot;caps&quot;&gt;IGDA&lt;/span&gt; Unity and AI &lt;span class=&quot;caps&quot;&gt;SIG&lt;/span&gt; meetings Wednesday (&lt;a href=&quot;http://schedule.gdconf.com/session-id/828274&quot;&gt;Unity &lt;span class=&quot;caps&quot;&gt;SIG&lt;/span&gt;&lt;/a&gt;) and Friday (&lt;a href=&quot;http://schedule.gdconf.com/session-id/828292&quot;&gt;AI &lt;span class=&quot;caps&quot;&gt;SIG&lt;/span&gt;&lt;/a&gt;). Do stop by if you have an interest in either of those topics.&lt;/p&gt;
&lt;p&gt;In any case, if you&amp;#8217;re attending &lt;span class=&quot;caps&quot;&gt;GDC&lt;/span&gt; I hope you have a good time &amp;#8211; I know I plan to.&lt;/p&gt;</description>
				<published>2014-03-13 00:00:00 +0100</published>
				<link>http://angryant.com/2014/03/13/GDC-14-The-Quest-For-Fun/</link>
			</item>
		
			<item>
				<title>Moving in Unity</title>
				<description>&lt;p&gt;&lt;strong&gt;Updated March 8th&lt;/strong&gt;: Added a few more details on mapping to navmesh and extrapolating the root motion vector.&lt;/p&gt;
&lt;p&gt;Moving something around on the screen in Unity is really not that hard. The point of this post is therefore not to introduce you to how this is accomplished, but rather to point out where you&amp;#8217;re doing it wrong&amp;#8482;.&lt;/p&gt;
&lt;p&gt;Generally Unity moves objects using one of three systems:&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;Direct transform manipulation.&lt;/li&gt;
	&lt;li&gt;Physics.&lt;/li&gt;
	&lt;li&gt;Navigation.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;In the end, movement is measured on transform updates. I make the distinction from the point of view of where you provide the input. Technically you could argue that animation should be up there as well, but I choose to lump that in with transform manipulation, since disabling the application of movement by the animation system has no other side effects.&lt;/p&gt;
&lt;p&gt;As a side-note, since 4.3 it is possible to partially or completely disable having the animation system update the transform hierarchy.&lt;/p&gt;
&lt;h1&gt;Transform&lt;/h1&gt;
&lt;p&gt;So long as the goal is simply to move an object and nothing else, modifying the values of the transform component, or using its various useful methods to do so, is all you need.&lt;/p&gt;
&lt;p&gt;This includes directly animating the transform via the animation window or by enabling animation root motion.&lt;/p&gt;
&lt;p&gt;However chances are that your situation is more complex than this and you would do well to read on.&lt;/p&gt;
&lt;h1&gt;Physics&lt;/h1&gt;
&lt;p&gt;When your object in any way needs to affect and/or be affected by the physics simulation, you need to make some extra considerations. Simply slapping on a collider and calling it a day will ruin your next.&lt;/p&gt;
&lt;p&gt;To properly participate as a dynamic part of the physics simulation, an object needs to have a rigidbody component attached somewhere in its transform hierarchy.&lt;/p&gt;
&lt;p&gt;The physics system considers separate transform hierarchies as separate objects, so one (and only one) rigidbody component will mark the rest of its hierarchy as dynamic.&lt;/p&gt;
&lt;p&gt;Multiple rigidbodies in the same hierarchy leads to undetermined behaviour (read: weirdnessness) &amp;#8211; the only exception being if those rigidbodies are connected by a joint &amp;#8211; thus making their behaviour again well defined.&lt;/p&gt;
&lt;h2&gt;Kinematic&lt;/h2&gt;
&lt;p&gt;&amp;#8220;But I don&amp;#8217;t need gravity or forces or all that other nonsense!&amp;#8221; &amp;#8211; be cool, that is what the &amp;#8220;kinematic&amp;#8221; switch is for. This basically tells the physics simulation that your object is dynamic, but you will take care of all its movement.&lt;/p&gt;
&lt;p&gt;Kinematic rigidbodies will not be affected by forces or collisions, but will collide with non-kinematic rigidbodies, sending collision events and pushing them out of the way (assuming there are colliders present somewhere in the transform hierarchy of the object).&lt;/p&gt;
&lt;p&gt;&amp;#8220;So why add the rigidbody in the first place? Things work just fine without!&amp;#8221; &amp;#8211; if you have Unity pro, I would direct your attention at the profiler as you move about &amp;#8211; if not, take my word for it that it is not a joyous sight.&lt;/p&gt;
&lt;p&gt;Any object (unique transform hierarchy) with no rigidbody present is treated by the physics simulation as static. For optimal performance, all static colliders are baked into a static collision geometry, securing optimal performance when doing collision checks.&lt;/p&gt;
&lt;p&gt;However every time one static collider (note that this has nothing to do with the static flags on the GameObject &amp;#8211; just the presence of absence of a rigidbody on the object in question) is moved, the whole static collision geometry is marked dirty and regenerated.&lt;/p&gt;
&lt;p&gt;This is not a terribly costly operation, so moving pieces of level geometry from one position to another from time to time is fine. However moving a character of one or more static colliders around every frame will cost you.&lt;/p&gt;
&lt;p&gt;Note that while moving by directly modifying the transform of a kinematic rigidbody is just fine, you will get better results for rapid movement by using the MovePosition and MoveRotation rigidbody functions.&lt;/p&gt;
&lt;p&gt;The former will effectively &amp;#8220;teleport&amp;#8221; the physical object &amp;#8211; fine for short distances and minor rotations, but less so for longer moves. MoveRotation and -Position effectively &amp;#8220;drags&amp;#8221; the object from A to B.&lt;/p&gt;
&lt;h2&gt;Kine-not-so-matic&lt;/h2&gt;
&lt;p&gt;&amp;#8220;Ok, so maybe it would pretty useful if my character could walk into walls, get pushed by others and that sort of thing&amp;#8230;&amp;#8221; No problem. Disable the kinematic flag and start moving via the rigidbody component. If you wanted proper forces and all that, I&amp;#8217;m sure you&amp;#8217;re already all over the AddForce function and all that.&lt;/p&gt;
&lt;p&gt;However if you still want strict control &amp;#8211; just with a touch of presence &amp;#8211; you should look at directly setting the velocity property of the rigidbody.&lt;/p&gt;
&lt;p&gt;Given sideways and forward movement input, forming a velocity vector is easy. By setting the velocity of the rigidbody you add that information to the physics simulation as well as tell it to update the position of the object smoothly.&lt;/p&gt;
&lt;p&gt;That includes pushes from other rigidbodies or pushbacks from static geometry. However directly setting the velocity will override any directional change and so momentum will remain unchanged.&lt;/p&gt;
&lt;p&gt;Therefore consider factoring in some acceleration when building your target velocity vector &amp;#8211; for a more natural look after your character is pushed or makes an abrupt change of direction.&lt;/p&gt;
&lt;h1&gt;Navigation&lt;/h1&gt;
&lt;p&gt;Parallel to the physics simulation you find the navigation runtime. Similarly to how the rendered world model is defined by static and dynamic geometry and the physics world model is defined by static colliders and rigidbodies, the navigation world model is defined by interconnected navigation mesh and dynamic obstacles.&lt;/p&gt;
&lt;p&gt;While the static physics geometry defines areas of no access, navigation mesh defines areas which &lt;strong&gt;are&lt;/strong&gt; navigable. This information is used for finding a valid path from point A to B, but more importantly it is used to constrain characters and inform them of their surroundings.&lt;/p&gt;
&lt;p&gt;The physics simulation can be used for this as well and traditionally is. However the data covered by the physics system is vastly more complex and its ability to define traversable space is a side effect of its ability to define non-traversable space.&lt;/p&gt;
&lt;p&gt;This is where you end up spending way too much time blocking off sections of scenery and later testing that there are indeed no holes in that. Navmeshes on the other hand define a surface on which characters of a given height and with a given radius can move.&lt;/p&gt;
&lt;h2&gt;NavMeshAgent&lt;/h2&gt;
&lt;p&gt;Similarly to the rigidbody component, the NavMeshAgent component wires an object to the navigation runtime. In stead of the single kinematic switch, however, the NavMeshAgent has separate updatePosition and updateRotation toggles.&lt;/p&gt;
&lt;p&gt;To get things going, you can either set a path by one of the many accessors for that or directly set the velocity. Assuming that the NavMeshAgent is configured to update the position, this will start smoothly moving the object like with the rigidbody &amp;#8211; only this time constrained by the navigation meshes rather than collision geometry.&lt;/p&gt;
&lt;p&gt;In addition to pathfinding and staying on the navigation mesh, the navigation runtime will also attempt to have the various NavMeshAgents avoid one-another by adjusting velocity based on the position and velocity of nearby dynamic obstacles and NavMeshAgents.&lt;/p&gt;
&lt;p&gt;Avoidance can be completely tweaked though &amp;#8211; so that one NavMeshAgent can ignore it completely or itself be ignored or weigh different NavMeshAgents differently.&lt;/p&gt;
&lt;h2&gt;Direct control&lt;/h2&gt;
&lt;p&gt;&amp;#8220;Pathfinding? I just need to move this character around based on input.&amp;#8221; Sure, fine &amp;#8211; that is where you just go set the velocity of the NavMeshAgent rather than trying to set a path or destination for it.&lt;/p&gt;
&lt;p&gt;Like with the rigidbody, this starts moving the NavMeshAgent smoothly and tells the runtime about its current velocity &amp;#8211; giving other agents a chance to avoid. Note that even if you do not let the NavMeshAgent directly control the position of your character, you should still feed the velocity back to it &amp;#8211; in order to keep the avoidance runtime up to date.&lt;/p&gt;
&lt;h1&gt;Animation&lt;/h1&gt;
&lt;p&gt;&amp;#8220;&lt;span class=&quot;caps&quot;&gt;WAT&lt;/span&gt;! You did not count this as one of the three ways of moving stuff!&amp;#8221; &amp;#8211; nop, quite right. However root motion is awesome, so let&amp;#8217;s briefly touch on how we tie that to the other systems for much greatness.&lt;/p&gt;
&lt;p&gt;While most of what the animation system does is not of too much concern for your movement logic, one very useful feature is. By analysing animations on import, the surface movement relevant for those animations is calculated and later blended as the animations are blended.&lt;/p&gt;
&lt;p&gt;By default the animation system will, with root motion enabled, move an animated object around by directly updating the transform position based on the root motion of the currently playing animation blend. Animation nicely synchronised with world movement.&lt;/p&gt;
&lt;h2&gt;I&amp;#8217;ll root my own motion, thank you&lt;/h2&gt;
&lt;p&gt;However while that looks mighty cool, it really isn&amp;#8217;t very considerate of your carefully crafted physics simulation or your neatly marked navigation runtime. Luckily it does give an in by allowing you to override the actual application of the root motion.&lt;/p&gt;
&lt;p&gt;This is accomplished by, on the same game object as your animator component, attaching a script implementing the method OnAnimatorMove. Once that method is defined, the animation system will no longer directly apply root motion and in stead call this implementation post-evaluation.&lt;/p&gt;
&lt;p&gt;In the implementation of the OnAnimatorMove callback, you could then update a target velocity vector by simply dividing animator.deltaPosition by Time.deltaTime and similarly rotation. And once we have desired movement in the form of a velocity vector, plenty of the earlier described scenarios become relevant.&lt;/p&gt;
&lt;h2&gt;Most interactive niceness&lt;/h2&gt;
&lt;p&gt;&amp;#8220;Great, I&amp;#8217;ll take one of each!&amp;#8221; Sure, no problem. Well&amp;#8230; It&amp;#8217;s not exactly straight forward, but it is indeed possible to combine all of these things to get something that is responsive, embedded in your simulations and looks great.&lt;/p&gt;
&lt;p&gt;The chain of data goes a little something like this:&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;Player controlled characters:
	&lt;ol&gt;
		&lt;li&gt;Feed input to the animator, resulting in nicely blended animations and root motion.&lt;/li&gt;
		&lt;li&gt;Generate a target velocity in OnAnimatorMove.&lt;/li&gt;
		&lt;li&gt;Set velocity of NavMeshAgent (configured to not update position or rotation).&lt;/li&gt;
		&lt;li&gt;Set velocity and rotation of non-kinematic rigidbody (properly constrained on rotation so it doesn&amp;#8217;t tip over).&lt;/li&gt;
		&lt;li&gt;Map transform position to navigation mesh via NavMesh.SamplePosition.&lt;/li&gt;
	&lt;/ol&gt;&lt;/li&gt;
	&lt;li&gt;Non-player characters or indirectly controlled player characters:
	&lt;ol&gt;
		&lt;li&gt;Set destination or path of NavMeshAgent.&lt;/li&gt;
		&lt;li&gt;Feed desiredVelocity of NavMeshAgent to animator.&lt;/li&gt;
		&lt;li&gt;Repeat as for player controlled characters from 2.&lt;/li&gt;
	&lt;/ol&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;What this setup does not give you is responsiveness to being bumped into. However velocity-wise this is not something your movement implementation should handle directly unless you are ok with breaking that nice root motion setup you just established.&lt;/p&gt;
&lt;p&gt;In stead I would recommend using queries on the surrounding physics and navigation environment to inform the animation state machine of special conditions like &amp;#8220;player wants to go full speed, but there&amp;#8217;s a wall two units from here&amp;#8221; and handle slowing down, stopping and similar in there where the result will look good.&lt;/p&gt;
&lt;p&gt;One simple trick is to do a navigation raycast along the forward vector of the moving transform for some amount of look-ahead distance and if a navigation mesh edge is hit and do a physics raycast further forward from a point slightly elevated from that edge hit point.&lt;/p&gt;
&lt;p&gt;With that setup you can very simply gather information about where the character is headed &amp;#8211; if into a steep wall or perhaps to a ledge or obstacle which could be leapt.&lt;/p&gt;
&lt;h1&gt;Unity Hacks&lt;/h1&gt;
&lt;p&gt;Since apparently I lumped just about everything into that project, unsurprisingly the Unity Hacks project has some work on this form of wired up movement. Particularly the &lt;a href=&quot;https://github.com/AngryAnt/UnityHacks/blob/master/Assets/Standard%20Assets/Movement/Mover.cs&quot;&gt;Mover&lt;/a&gt; component attempts to create a system-agnostic movement interface as well as some simple movement on networked setups not covered here.&lt;/p&gt;
&lt;p&gt;While not complete or in any way a final answer, I hope that with the information provided here, it turns out useful for you.&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;&lt;a href=&quot;https://github.com/AngryAnt/UnityHacks/blob/master/Assets/Standard%20Assets/Movement/Mover.cs&quot;&gt;Mover.cs&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description>
				<published>2014-03-07 00:00:00 +0100</published>
				<link>http://angryant.com/2014/03/07/Moving-in-Unity/</link>
			</item>
		
			<item>
				<title>Behave 2.3</title>
				<description>&lt;p&gt;In good time for &lt;span class=&quot;caps&quot;&gt;GDC&lt;/span&gt;, I present version 2.3 of Behave. Not exactly the rapid January release I had hoped for &amp;#8211; admittedly I got a bit carried away. However that just means more goodies for everyone :)&lt;/p&gt;
&lt;h2&gt;Contents&lt;/h2&gt;
&lt;p&gt;Highlights from the changelist below:&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;Great new behaviour for Repeaters and decorator components in general.&lt;/li&gt;
	&lt;li&gt;Mandatory contexts.&lt;/li&gt;
	&lt;li&gt;Useful runtime &lt;span class=&quot;caps&quot;&gt;API&lt;/span&gt; tweaks.&lt;/li&gt;
	&lt;li&gt;A good, thick coat of editor polish.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;A word of caution on the new instant repeater: It &lt;strong&gt;will&lt;/strong&gt; very easily send you into an infinite loop if you are not watching out. Just in case you by accident set one up, the compiler will warn about this potential scenario.&lt;/p&gt;
&lt;p&gt;For this release, the AngryAnt community has again provided great bug reports and many suggestions for changes and additions. Thanks! I hope you enjoy this release &amp;#8211; do let me know in either case.&lt;/p&gt;
&lt;h2&gt;Onwards&lt;/h2&gt;
&lt;p&gt;As noted in the release notes, a good deal of time was spent refactoring while working on this release. This puts me on a good path for some exciting additions later on.&lt;/p&gt;
&lt;p&gt;However with &lt;span class=&quot;caps&quot;&gt;GDC&lt;/span&gt; right around the corner, I will likely have to reduce my velocity on Behave a bit. So let&amp;#8217;s keep this new stuff as a surprise for later. No need for letting out all the spoilers now, right?&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;&lt;a href=&quot;http://u3d.as/5hA&quot;&gt;Behave 2 for Unity on the asset store&lt;/a&gt;.&lt;/li&gt;
	&lt;li&gt;&lt;a href=&quot;/behave/&quot;&gt;Project information&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;
Changelist:


2.3:
 - Added support for instant repeaters.
 - Added support for mandatory contexts.
 - Added optional target parameter to Tree.ResetForwards.
 - Added Tree.TickWrapping method.
 - Added debugger auto-launch settings to library build options.
 - Added home screen - shown on launch or via the Help menu, full of resources.
 - Behavioural change: Decorators no longer forward the instant flag of their child node.
 - Behaviour of decorators receiving a Running signal from their control connection is now defined.
 - Dependencies now shipped as separate (replaceable) files for minimal project impact.
 - Editor polish.
     - Added support for running multiple editor debugging instances on one machine.
     - Added focus-follow for debugger and canvas.
     - Added both scrollwheel/pad and drag-to-scroll support to all canvas views.
     - Drag connection to occupied input slot to replace.
     - Directly drag-drop trees from the sidebar onto the canvas as reference nodes.
     - Instant flag doesn&#39;t show on nodes connected to parents ignoring the flag.
     - &quot;Last edited library&quot; now tracked per project.
     - Last selected tree is now also restored between sessions and playmode transitions.
     - A bunch of minor adjustments and improvements.
     - Performance + memory + disk space optimisations.
     - Minor bugfixes.
 - New documentation layout and enhancements (already released as available).
 - Reshuffling of code to make way for exciting new things down the road.


2.2.2:
 - Addressed protobuf issue causing Parallel component completion setting to not get stored correctly.


2.2.1:
 - Fixed issue causing parallel components to fail compilation.


2.2:
 - Behavioural change: Support for multiple different action handler signatures is discontinued effective immediately.
    - Generated agent blueprint as well as accepted reflected signatures are now only:
        - public BehaveResult [Tick/Init][Name]Action (Tree sender);
        - public void Reset[Name]Action (Tree sender);
 - Added Tree class accessors - all valid only during an active init/tick/reset handler call:
    - string ActiveStringParameter
    - float ActiveFloatParameter
    - IAgent ActiveAgent
    - object ActiveData
 - Rather than waiting for the Unity bugfix, the built-in compiler API is now bypassed in favour of direct compiler binary execution.
    - An additional system-level mono SDK install is no longer needed to work around this Unity bug.
 - Tree.SetForward now returns boolean success value rather than logging error when passed unused action.
 - Full-library export now also available from the library settings in stead of menu-only access.
 - Even more UI polish: Better word-wrap, more contrasts for emphasis, instant flag hidden in unaffected scenarios and much more.
 - &quot;Form new tree&quot; nicely moves the new subtree up around the root socket rather than retaining the old position.
 - Default frame-rate of DebugUpdater now set to 20 fps rather than every frame. Gun safety and all that.
 - Massive codegen size save for larger libraries - from optimisation of tree-agent introspection codegen. Compile-time win.
 - More rigid parameter evaluation (remove needless occasional extra codegen).
 - Fixed copy and duplication procedures incorrectly not copying parameter values.
 - Force Unity to write serialised data before compiling.


2.1.1:
 - Fixed issue with tree paramterisation breaking debugger visualisation.


2.1:
 - Added autocomplete on action names, string parameters and component contexts.
 - Added mandatory actions (present in library regardless of use in trees).
 - Added partial library export and library merging / import-to-library.
 - Added Behave stripping - leave behind only a very lean Behave runtime, for redistribution or super slim deploy.
 - Added parameterised trees - get even more re-use out of your trees by overriding context and variables per reference.
 - Behavioural change: Tree.Reset will now delay resetting tree variables until after complete component reset.
 - Behavioural change: Tree.Tick will no longer automatically reset the tree upon completion. This plays very well with:
 - Added Tree.TickContinuously (int iterationCap = 1024) - ticks tree till completion or iteration cap is reached.
 - Added BehaveResult Tree.Result (bool value) utility function to side with Tree.Invert (BehaveResult value).
 - Added int Debugging.Local.ConnectionCount property - facilitating debug behaviour dependent on Behave debugger presence.
 - Moved default install path from Assets/Behave to Assets/Plugins/Behave.
    - WARNING: See Readme.txt upgrade guide.
 - Fixed decorator control node removal resulting in detached control connection.
 - Fixed decorator incorrectly not forwarding the instant status of its child node.
 - Fixed scenario where agent classes would get reflected for handlers even if blueprint derived.
 - Fixed unexpected corner cases of bad library configuration failing compiles (now causing warnings or simply being ignored).
 - Fixed Behave window breaking down when exiting play mode after having been active there.
 - Fixes to context getting incorrectly reset in some scenarios.
 - Fixed copy / paste functionality missing in some text fields.
 - Lots of UI polish and minor fixes.


2.0:
 - New editor.
    - Unified all controls into one window.
    - Completely customised look - compatible with both Unity light and dark skin.
    - Keyboard authoring interface in addition to drag &amp;amp; drop.
 - Debugger upgrade.
    - Remote debugging.
    - Tick and reset.
    - &quot;Unplug&quot; for debugger-only control.
    - Breakpoints.
    - Action overrides - override the return values of specified actions.
 - Decorator rewrite.
    - Deprecated old decorator.
       - Still compiles, but cannot be added.
    - Decorators are now control-type components.
       - No specific decorator handlers on agents.
       - Control is achieved via third connection socket.
    - Two initial decorator types: Repeater and Interrupter.
 - Asset restructuring.
 	- No more collections - for nesting, use paths in tree names.
 	- New serialization format - see Readme.txt for upgrade instructions.
    - Collections are gone. Use Unix-style path names for tree organisation.
 - IAgent.Tick (Tree, bool) changed to IAgent.Tick (Tree)
	- Init calls can now only be handled explicitly
 - Full coverage online documentation and other community resources.
 - Countless fixes and polish items.

1.5:
 - Added Tree.TickActive - indicating if a tree is currently executing a tick or if it has completed evaluation.
 - In-tick tree reset requests now result in a reset at the end of tree evaluation rather than an immediate one.
 - Removed the legacy compatibility assembly (for compatibility with pre-1.2 assets) from the default distribution.
 - Fixed &quot;X must be instantiated using the ScriptableObject.CreateInstance method instead of new X&quot; warnings.

1.4:
 - Fixed decorator incorrectly initializing on every returning tick when tick handler returned Running.
 - Fixed debugger view dependency on active tree editor - causing reported null reference exception.
 - Fixed missing scrollbars on browser window.
 - Reduced logging noise from debug builds.
 - Agent blueprints can now be MonoBehaviour based.
 - Clarified wording on &quot;library not loaded&quot;.
 - Now handling reset a bit cleverer - potential performance boost.
 - Changed the default success criteria of Parallel components from SuccessOrFailure to Success.
 - Added &quot;instant&quot; flag to components. Components marked instant will affect sequences and selectors when moving between child nodes. When a child node marked &quot;instant&quot; completes, rather than waiting for the next tree tick to tick the following child node, the sequence or selector does it immediately.
 - The compiler progress bar returns.
 - Editing a Behave asset now focuses the asset browser last instead of the tree editor.
 - Behave can now be installed in any subfolder of Assets - provided its internal folder structure remains intact.
 - Compilation speed improvements.
 - Enabled references across collection borders.
 - Added Tree.DataSize - returning the number of bytes used by a tree instance. This is also displayed in the debugger window.

1.3:
 - Fixed priority selector init flag resetting.
 - Fixed reference handling on tree renaming and deletion.
 - Fixed references still pointing at old collection post collection duplication.
 - Fixed compilation of actions and decorators with non-integral float parameters.
 - Fixed GUI list behaviours.
 - Fixed passing context back and forth between referenced trees and referrer.
 - Fixed reordering connections not causing save state to be set.
 - Various GUI tweaks.
 - Runtime optimisations.
 - Enabled scrolling of the tree list in the debugger window.
 - Exposed Tree.ReflectForwards.
 - Added Tree.ResetForwards.
 - Added agent blueprints - connecting to agent handlers through virtual methods rather than reflected handlers.
 - Made connections selectable in the tree editor via the connection nub.
 - Moved connection managing from the inspector to the tree editor, where it is more visible and handy.
 - Added support for disabling connections - for faster, less destructive debugging.
 - Double-click reference component to jump to referenced tree.
 - Changed &quot;Cannot update unregistered tree&quot; handling from an exception to an error message. Still need more info.
 - Now showing string and float parameters in the tree editor if either is set.

1.2:
 - Fixed release building.
 - Added the priority selector, introducing the API points:
    - int IAgent.SelectTopPriority (Tree sender, params int[] IDs);
    - enum BL[LibraryName].PriorityType { PriorityName, ..., Unknown };
 - Added support for branch contexts, introducing the API points:
    - enum BL[LibraryName].ContextType { ContextName, ..., Unknown };
    - int Tree.ActiveContext { get; }
 - Changed IAgent interface:
    - Tick (bool init, Tree sender) -&amp;gt; Tick (Tree sender, bool init)
 - Added &quot;Select asset&quot; button to the standard inspector.
 - Interface polish.

1.1:
 - Made compatible with Unity 3.0 - including ensuring that the 2.5-2.6.1 bug preventing compilation on Windows is fixed on the Unity side.
 - UI tweaks and polish.
 - Added the option to have return values of nodes be inverted.
 - Fixed compiler bug when facing sequence or selector with only one child node.
 - Renamed Library.Tree -&amp;gt; Library.InstantiateTree.
 - Added Tree.Tick () and Tree.Reset () methods using the IAgent instance given at instantiation of the tree.
 - Removed the abstract Library class.
 - Changed generated library class:
    - Trees -&amp;gt; TreeType.
    - Actions -&amp;gt; ActionType.
    - Decorators -&amp;gt; DecoratorType.
    - Tree InstantiateTree (int, IAgent) -&amp;gt; static Tree InstantiateTree (TreeType, IAgent)
    - int TreeID (Tree) -&amp;gt; static TreeType Type (Tree)
    - bool IsAction (int) -&amp;gt; static bool IsAction (int)
    - bool IsDecorator (int) -&amp;gt; static bool IsDecorator (int)
 - Upped editor performance.
 - New asset structure change with automatic import of Behave 1.0 assets.
 - Changed action and decorator handlers. These are now the handlers mapped:
    - public BehaveResult Init[Name][Action/Decorator] (Tree sender, string stringParameter, float floatParameter, IAgent agent, object data);
    - public BehaveResult Tick[Name][Action/Decorator] (Tree sender, string stringParameter, float floatParameter, IAgent agent, object data);
    - public void Reset[Name][Action/Decorator] (Tree sender, string stringParameter, float floatParameter, IAgent agent, object data);
    - public BehaveResult Init[Name][Action/Decorator] (Tree sender);
    - public BehaveResult Tick[Name][Action/Decorator] (Tree sender);
    - public void Reset[Name][Action/Decorator] (Tree sender);
    - public BehaveResult [Name][Action/Decorator] {get; set;}
 - Added support for collection duplication.
 - Moved debug rendering into the editor with its own dedicated debugger window, including actor listing.
 - Debugger now renders active sub-trees as well.

1.0:
 - Lots o fixes for Unity 2.5 compatibility.
 - Closer editor integration with new UI.
    - Component bar.
    - Node inspection.
 - Runtime tree debugging.
 - Direct mapping of action and delegate handlers via reflection.
 - Kitty demo.

0.3b:
 - Various tweaks to the editor UI.
 - Optimised the compiler.
 - Fixed the following editor bugs from the bug list:
    - When the editor scrips are recompiled and when the user enters and exits play mode, running editors will loose references, causing undetermined behaviour.
    - When a compile fails, the Behave compiler is locked and unusable – requiring a unity relaunch.
 - Implemented the following wishlist items:
    - Behaviour tree decorators.
    - Stand-alone edition of the Behave editor.
    - Behaviour tree debugging features.

0.2b:
 - Made the demo project a whole lot more interesting.
 - Implemented the editor wish list item: Ability to move trees between collections.
 - Various tweaks to the editor UI.
 - Fixed a ton of bugs in the compiler.
 - Fixed the following editor bugs from the bug list:
    - Not able to delete collections from library.
    - Not able to delete trees from library.
    - Not able to rename collections from library.
    - Not able to rename trees from library.
    - Missing &quot;tree has been changed, save changes?&quot; dialog.

0.1b:
 - Some documentation is available.
 - Compiler is now creating sensible output.
 - A simple test tree and script using it is provided with the demo.
 - Documentation is linked directly from the unity help menu.
 - Less spamming of the log with debug information.

Pre-release:
 - Magic happened. Behave was born.
&lt;/pre&gt;</description>
				<published>2014-02-27 00:00:00 +0100</published>
				<link>http://angryant.com/2014/02/27/Behave-2-3/</link>
			</item>
		
			<item>
				<title>Unity and .net assemblies</title>
				<description>&lt;p&gt;Since I started making middleware for Unity in early 2008, I have been working with Unity and .net assemblies. I have in this time had many opportunities to juggle the two in many different contexts, so I figured a sort of summary of what I learned would make sense.&lt;/p&gt;
&lt;p&gt;Why not start off by setting a few facts straight, eh?&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;Aside from the extension and a header, .net assemblies have little to do with Windows Dynamic Link Libraries.
	&lt;ul&gt;
		&lt;li&gt;Windows DLLs contain binary code, usually with a very simple interface, while .net assemblies contain .net bytecode (or &lt;span class=&quot;caps&quot;&gt;CIL&lt;/span&gt;).&lt;/li&gt;
	&lt;/ul&gt;&lt;/li&gt;
	&lt;li&gt;Unity pro is not required to use .net assemblies.
	&lt;ul&gt;
		&lt;li&gt;Binary plugins require Unity pro (at time of writing) and must be placed in Assets/Plugins. However .net assemblies are just bytecode &amp;#8211; just like what Unity turns your scripts into, so none of these requirements apply.&lt;/li&gt;
	&lt;/ul&gt;&lt;/li&gt;
	&lt;li&gt;.net assemblies run on all platforms &amp;#8211; including webplayer.
	&lt;ul&gt;
		&lt;li&gt;Again, as we are talking about bytecode which is fed directly to the mono runtime &amp;#8211; like the compiled result of your scripts, the same rules go.&lt;/li&gt;
	&lt;/ul&gt;&lt;/li&gt;
	&lt;li&gt;Distributing .net assemblies in stead of script files does not copy protect your code.
	&lt;ul&gt;
		&lt;li&gt;Since the mono runtime has to Just In Time compile your assembly to run on the current platform, the bytecode is quite verbose and while some information is lost, generally it is very easy to decompile and read .net assemblies.&lt;/li&gt;
		&lt;li&gt;Remember that this is true for your script source in most project builds as well, since for most platforms Unity builds your scripts to .net assemblies.&lt;/li&gt;
	&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;Argh! But my kodes!&lt;/h1&gt;
&lt;p&gt;I will not get into source protection too much, but generally I would not worry too much about it.&lt;/p&gt;
&lt;p&gt;Source code in and of itself does not mean that someone can instantly copy and use parts of your work. It takes actual skill and time investment to make use of it, integrated in a different setup from what it was originally designed for. In the end it is my opinion that it would not be worth it compared to doing the same work from scratch.&lt;/p&gt;
&lt;p&gt;Consider that the entire source of Half Life 2 was very publicly leaked shortly before its originally scheduled release and how we are all now drowning in games based on it.&lt;/p&gt;
&lt;p&gt;If you have client-side security measures which you would like to protect &amp;#8211; like in-app purchases or other anti-cheat measures, you may indeed want to consider splitting out and encrypting part of this logic as well as applying some measure of source obfuscation.&lt;/p&gt;
&lt;p&gt;A word of caution: While source-level obfuscation is fine and usually sufficient, assembly-level obfuscation can be risky as it generally relies on bugs in the mono runtime in order to function. Bugs which might get fixed at any time &amp;#8211; at which point you will need to go back and revisit your security efforts.&lt;/p&gt;
&lt;p&gt;And remember: Encryption and obfuscation is just about making it harder for people to do things you don&amp;#8217;t want them to. In the end this all has to be understood by processors and even binaries are routinely reverse engineered. The best security is gained by not making what you wish to protect available outside of hardware in your control.&lt;/p&gt;
&lt;p&gt;For more information on protecting sensitive client-side information from tampering, see the Unite Asia 2013 &amp;#8220;Protecting Your Android Content&amp;#8221; talk by Erik Hemming.&lt;/p&gt;
&lt;p&gt;Note that Unity does not distribute .net assemblies on all platforms. Some platforms do not run the mono &lt;span class=&quot;caps&quot;&gt;JIT&lt;/span&gt; compiler because reasons and for those Unity will in stead perform Ahead Of Time compilation on your code while building.&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;caps&quot;&gt;AOT&lt;/span&gt; compilation basically means that in stead of relying on the &lt;span class=&quot;caps&quot;&gt;JIT&lt;/span&gt; compiler to at runtime load your bytecode when relevant and compile it for the specific hardware it is running on, the &lt;span class=&quot;caps&quot;&gt;AOT&lt;/span&gt; compiler will compile all your assembly to platform-specific binary right up front.&lt;/p&gt;
&lt;p&gt;This means that your source code assemblies, any assemblies present in your project as well as the Unity engine assemblies are all jumbled into one binary. In most cases this should disincentivise tampering sufficiently.&lt;/p&gt;
&lt;p&gt;At time of writing, Unity employs &lt;span class=&quot;caps&quot;&gt;AOT&lt;/span&gt; compiling on iOS and the console platforms.&lt;/p&gt;
&lt;h1&gt;What is the point then?&lt;/h1&gt;
&lt;p&gt;Now that you know what assemblies are not, you might be wondering why you should be interested in them at all. And rightly so.&lt;/p&gt;
&lt;p&gt;I think it is always healthy to have some understanding of what goes on in the lower layers of your technology stack, but most Unity developers will not need to know about .net assemblies.&lt;/p&gt;
&lt;p&gt;However here are some reasons why they are really cool:&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;If you are distributing middleware, they allow you to significantly reduce your distribution footprint without compromising your development environment (one assembly vs. a bunch of script files).
	&lt;ul&gt;
		&lt;li&gt;Like their Windows cousins, .net assemblies allow embedded resources, which means you can literally put everything you need &amp;#8211; textures, audio, whatever &amp;#8211; inside one file.&lt;/li&gt;
	&lt;/ul&gt;&lt;/li&gt;
	&lt;li&gt;Where &lt;span class=&quot;caps&quot;&gt;JIT&lt;/span&gt; is available, new assembly can be loaded at runtime.
	&lt;ul&gt;
		&lt;li&gt;So what? So live patching baby!&lt;/li&gt;
	&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Since the &lt;span class=&quot;caps&quot;&gt;JIT&lt;/span&gt; compiler routinely loads bytecode from disk and compiles and executes it, there is nothing preventing you from having it load bytecode which was not included in your original build.&lt;/p&gt;
&lt;p&gt;The class System.Reflection.Assembly lets you load in bytecode from a file or a byte array, after which you can use reflection to find and instantiate types, call functions and all that other good stuff on what is contained in the assembly.&lt;/p&gt;
&lt;p&gt;Remember that since Unity employs &lt;span class=&quot;caps&quot;&gt;AOT&lt;/span&gt; and not &lt;span class=&quot;caps&quot;&gt;JIT&lt;/span&gt; on some platforms, this functionality is not available everywhere.&lt;/p&gt;
&lt;p&gt;For an example of loading in new assembly, see the code-in-asset-bundles example from the &amp;#8220;Unity Hacks&amp;#8221; talk available on the &lt;a href=&quot;/videos&quot;&gt;videos&lt;/a&gt; page (source included).&lt;/p&gt;
&lt;p&gt;A word of caution: If you plan on employing remote patching, make sure to at least sign your transfers in order to avoid man in the middle injection attacks.&lt;/p&gt;
&lt;h1&gt;Wohoo! Assemble all of the things!&lt;/h1&gt;
&lt;p&gt;This is all great, but how do you get started building assemblies for all them things? Well, dear reader, there are different approaches:&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;If you are already set up with Visual Studio or Mono Develop, you can simply create a new project for a .net assembly using the project creation wizard. In order to access Unity types, simply add the UnityEngine.dll (and if necessary the UnityEditor.dll) assemblies to the project references and off you go.&lt;/li&gt;
	&lt;li&gt;Should you be of a different persuasion and if you are not one to shy away from a terminal window, you can use the the gmcs binary as distributed with Unity or the mono &lt;span class=&quot;caps&quot;&gt;SDK&lt;/span&gt; to build your assembly by command-line.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Either of these will produce a .dll file with all of your kodes (and potentially resources). Simply drop it anywhere in your assets folder to gain access to the contained classes. The same compile order rules which apply to scripts, also hold true for assemblies.&lt;/p&gt;
&lt;p&gt;Any public ScriptableObject or MonoBehaviour derived classes will appear as children of the assembly asset. Simply click the folding widget next to the asset in order to view and be able to drag-drop them.&lt;/p&gt;
&lt;p&gt;Ah and if you were too lazy to check out the Unity Hacks talk (you really should, it is full of useful snippets), the trick for putting code in asset bundles is to compile the scripts to an assembly rather than letting Unity compile them and then save the assembly in your assets folder with the .bytes extension rather than .dll.&lt;/p&gt;
&lt;p&gt;This makes Unity import the assembly as a TextAsset which is not addressed by Unitys compiler and can be included in asset bundles. At runtime, the bytes property of the asset reference is then passed to the Assembly constructor as described earlier.&lt;/p&gt;
&lt;h1&gt;And the catch?&lt;/h1&gt;
&lt;p&gt;Given that we are reaching the end of this article, that would mean it is high time for some dream bursting. This all sounds very easy and optimal to work with, but of-course it is not that simple.&lt;/p&gt;
&lt;p&gt;While Unity makes it fairly straight forward to debug your scripts using MonoDevelop, it will by default do absolutely nothing to help you with your assemblies.&lt;/p&gt;
&lt;p&gt;To help it on its way, you need to first build your assemblies for debug and secondly copy the generated [AssemblyName].mdb file to your assets folder along side the .dll file.&lt;/p&gt;
&lt;p&gt;If you went ahead and looked for the mdb file right as I had ended the above paragraph, you would stand some chance of not finding it. Should you be on Windows, a pdb file rather than an mdb is generated and it is absolutely useless to the Unity debugging runtime.&lt;/p&gt;
&lt;p&gt;Should you be stuck with a pdb file, you will need to use the pdb2mdb command-line tool as distributed with the Unity mono runtime or the mono &lt;span class=&quot;caps&quot;&gt;SDK&lt;/span&gt;. However running this command by hand every time you need to debug gets old really fast, so I recommend adding it in as a post-build step on your MonoDevelop or VisualStudio project.&lt;/p&gt;
&lt;p&gt;For more information on debugging assemblies in Unity and indeed general use of assemblies in Unity, see this excellent article in the Unity documentation: &lt;a href=&quot;http://docs.unity3d.com/Documentation/Manual/UsingDLL.html&quot;&gt;Using Mono DLLs in a Unity Project&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;And that is all, folks. I hope you find it useful!&lt;/p&gt;</description>
				<published>2014-01-03 00:00:00 +0100</published>
				<link>http://angryant.com/2014/01/03/Unity-and-net-assemblies/</link>
			</item>
		
			<item>
				<title>Behave 2.2</title>
				<description>&lt;p&gt;It is finally here! Sorry about this release taking a bit longer than the prior ones. I have experienced the very luxurious &amp;#8220;problem&amp;#8221; of &lt;a href=&quot;/work/&quot;&gt;having lots to do&lt;/a&gt;. The last contract of the year finished this Friday though, so here we are: 2.2 :)&lt;/p&gt;
&lt;h2&gt;Contents&lt;/h2&gt;
&lt;p&gt;While the full changelist will follow the body of this post as per usual, I would still like to draw out a few of the main changes in 2.2:&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;Behavioural change: Support for multiple different action handler signatures is discontinued effective immediately.&lt;/li&gt;
	&lt;li&gt;Rather than waiting for the Unity bugfix, the built-in compiler &lt;span class=&quot;caps&quot;&gt;API&lt;/span&gt; is now bypassed in favour of direct compiler binary execution.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Watch out for that behavioural change &amp;#8211; it will very likely break code. I decided on this in order to reduce the size of your obligatory agent code. Additional parameters have been moved onto properties of the sender tree.&lt;/p&gt;
&lt;p&gt;The compiler change means we are finally rid of that annoying requirement of having mono installed next to Unity in order to run the Behave compiler. Yay!&lt;/p&gt;
&lt;p&gt;The remaining changes are more or less just heaps of UI- and workflow polish, plus a few bug fixes &amp;#8211; again, many thanks to the AngryAnt community for providing invaluable assistance in identifying and tracking these down.&lt;/p&gt;
&lt;h2&gt;Onwards&lt;/h2&gt;
&lt;p&gt;Early next year I hope to have some more time for Behave, allowing me to do some rapid releases with new features in January. As always, any feedback you might have is very much appreciated.&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;&lt;a href=&quot;http://u3d.as/5hA&quot;&gt;Behave 2 for Unity on the asset store&lt;/a&gt;.&lt;/li&gt;
	&lt;li&gt;&lt;a href=&quot;/behave/&quot;&gt;Project information&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;
Changelist:


2.2:
 - Behavioural change: Support for multiple different action handler signatures is discontinued effective immediately.
    - Generated agent blueprint as well as accepted reflected signatures are now only:
        - public BehaveResult [Tick/Init][Name]Action (Tree sender);
        - public void Reset[Name]Action (Tree sender);
 - Added Tree class accessors - all valid only during an active init/tick/reset handler call:
    - string ActiveStringParameter
    - float ActiveFloatParameter
    - IAgent ActiveAgent
    - object ActiveData
 - Rather than waiting for the Unity bugfix, the built-in compiler API is now bypassed in favour of direct compiler binary execution.
    - An additional system-level mono SDK install is no longer needed to work around this Unity bug.
 - Tree.SetForward now returns boolean success value rather than logging error when passed unused action.
 - Full-library export now also available from the library settings in stead of menu-only access.
 - Even more UI polish: Better word-wrap, more contrasts for emphasis, instant flag hidden in unaffected scenarios and much more.
 - &quot;Form new tree&quot; nicely moves the new subtree up around the root socket rather than retaining the old position.
 - Default frame-rate of DebugUpdater now set to 20 fps rather than every frame. Gun safety and all that.
 - Massive codegen size save for larger libraries - from optimisation of tree-agent introspection codegen. Compile-time win.
 - More rigid parameter evaluation (remove needless occasional extra codegen).
 - Fixed copy and duplication procedures incorrectly not copying parameter values.
 - Force Unity to write serialised data before compiling.


2.1.1:
 - Fixed issue with tree paramterisation breaking debugger visualisation.


2.1:
 - Added autocomplete on action names, string parameters and component contexts.
 - Added mandatory actions (present in library regardless of use in trees).
 - Added partial library export and library merging / import-to-library.
 - Added Behave stripping - leave behind only a very lean Behave runtime, for redistribution or super slim deploy.
 - Added parameterised trees - get even more re-use out of your trees by overriding context and variables per reference.
 - Behavioural change: Tree.Reset will now delay resetting tree variables until after complete component reset.
 - Behavioural change: Tree.Tick will no longer automatically reset the tree upon completion. This plays very well with:
 - Added Tree.TickContinuously (int iterationCap = 1024) - ticks tree till completion or iteration cap is reached.
 - Added BehaveResult Tree.Result (bool value) utility function to side with Tree.Invert (BehaveResult value).
 - Added int Debugging.Local.ConnectionCount property - facilitating debug behaviour dependent on Behave debugger presence.
 - Moved default install path from Assets/Behave to Assets/Plugins/Behave.
    - WARNING: See Readme.txt upgrade guide.
 - Fixed decorator control node removal resulting in detached control connection.
 - Fixed decorator incorrectly not forwarding the instant status of its child node.
 - Fixed scenario where agent classes would get reflected for handlers even if blueprint derived.
 - Fixed unexpected corner cases of bad library configuration failing compiles (now causing warnings or simply being ignored).
 - Fixed Behave window breaking down when exiting play mode after having been active there.
 - Fixes to context getting incorrectly reset in some scenarios.
 - Fixed copy / paste functionality missing in some text fields.
 - Lots of UI polish and minor fixes.


2.0:
 - New editor.
    - Unified all controls into one window.
    - Completely customised look - compatible with both Unity light and dark skin.
    - Keyboard authoring interface in addition to drag &amp;amp; drop.
 - Debugger upgrade.
    - Remote debugging.
    - Tick and reset.
    - &quot;Unplug&quot; for debugger-only control.
    - Breakpoints.
    - Action overrides - override the return values of specified actions.
 - Decorator rewrite.
    - Deprecated old decorator.
       - Still compiles, but cannot be added.
    - Decorators are now control-type components.
       - No specific decorator handlers on agents.
       - Control is achieved via third connection socket.
    - Two initial decorator types: Repeater and Interrupter.
 - Asset restructuring.
    - No more collections - for nesting, use paths in tree names.
    - New serialization format - see Readme.txt for upgrade instructions.
    - Collections are gone. Use Unix-style path names for tree organisation.
 - IAgent.Tick (Tree, bool) changed to IAgent.Tick (Tree)
    - Init calls can now only be handled explicitly
 - Full coverage online documentation and other community resources.
 - Countless fixes and polish items.

1.5:
 - Added Tree.TickActive - indicating if a tree is currently executing a tick or if it has completed evaluation.
 - In-tick tree reset requests now result in a reset at the end of tree evaluation rather than an immediate one.
 - Removed the legacy compatibility assembly (for compatibility with pre-1.2 assets) from the default distribution.
 - Fixed &quot;X must be instantiated using the ScriptableObject.CreateInstance method instead of new X&quot; warnings.

1.4:
 - Fixed decorator incorrectly initializing on every returning tick when tick handler returned Running.
 - Fixed debugger view dependency on active tree editor - causing reported null reference exception.
 - Fixed missing scrollbars on browser window.
 - Reduced logging noise from debug builds.
 - Agent blueprints can now be MonoBehaviour based.
 - Clarified wording on &quot;library not loaded&quot;.
 - Now handling reset a bit cleverer - potential performance boost.
 - Changed the default success criteria of Parallel components from SuccessOrFailure to Success.
 - Added &quot;instant&quot; flag to components. Components marked instant will affect sequences and selectors when moving between child nodes. When a child node marked &quot;instant&quot; completes, rather than waiting for the next tree tick to tick the following child node, the sequence or selector does it immediately.
 - The compiler progress bar returns.
 - Editing a Behave asset now focuses the asset browser last instead of the tree editor.
 - Behave can now be installed in any subfolder of Assets - provided its internal folder structure remains intact.
 - Compilation speed improvements.
 - Enabled references across collection borders.
 - Added Tree.DataSize - returning the number of bytes used by a tree instance. This is also displayed in the debugger window.

1.3:
 - Fixed priority selector init flag resetting.
 - Fixed reference handling on tree renaming and deletion.
 - Fixed references still pointing at old collection post collection duplication.
 - Fixed compilation of actions and decorators with non-integral float parameters.
 - Fixed GUI list behaviours.
 - Fixed passing context back and forth between referenced trees and referrer.
 - Fixed reordering connections not causing save state to be set.
 - Various GUI tweaks.
 - Runtime optimisations.
 - Enabled scrolling of the tree list in the debugger window.
 - Exposed Tree.ReflectForwards.
 - Added Tree.ResetForwards.
 - Added agent blueprints - connecting to agent handlers through virtual methods rather than reflected handlers.
 - Made connections selectable in the tree editor via the connection nub.
 - Moved connection managing from the inspector to the tree editor, where it is more visible and handy.
 - Added support for disabling connections - for faster, less destructive debugging.
 - Double-click reference component to jump to referenced tree.
 - Changed &quot;Cannot update unregistered tree&quot; handling from an exception to an error message. Still need more info.
 - Now showing string and float parameters in the tree editor if either is set.

1.2:
 - Fixed release building.
 - Added the priority selector, introducing the API points:
    - int IAgent.SelectTopPriority (Tree sender, params int[] IDs);
    - enum BL[LibraryName].PriorityType { PriorityName, ..., Unknown };
 - Added support for branch contexts, introducing the API points:
    - enum BL[LibraryName].ContextType { ContextName, ..., Unknown };
    - int Tree.ActiveContext { get; }
 - Changed IAgent interface:
    - Tick (bool init, Tree sender) -&amp;gt; Tick (Tree sender, bool init)
 - Added &quot;Select asset&quot; button to the standard inspector.
 - Interface polish.

1.1:
 - Made compatible with Unity 3.0 - including ensuring that the 2.5-2.6.1 bug preventing compilation on Windows is fixed on the Unity side.
 - UI tweaks and polish.
 - Added the option to have return values of nodes be inverted.
 - Fixed compiler bug when facing sequence or selector with only one child node.
 - Renamed Library.Tree -&amp;gt; Library.InstantiateTree.
 - Added Tree.Tick () and Tree.Reset () methods using the IAgent instance given at instantiation of the tree.
 - Removed the abstract Library class.
 - Changed generated library class:
    - Trees -&amp;gt; TreeType.
    - Actions -&amp;gt; ActionType.
    - Decorators -&amp;gt; DecoratorType.
    - Tree InstantiateTree (int, IAgent) -&amp;gt; static Tree InstantiateTree (TreeType, IAgent)
    - int TreeID (Tree) -&amp;gt; static TreeType Type (Tree)
    - bool IsAction (int) -&amp;gt; static bool IsAction (int)
    - bool IsDecorator (int) -&amp;gt; static bool IsDecorator (int)
 - Upped editor performance.
 - New asset structure change with automatic import of Behave 1.0 assets.
 - Changed action and decorator handlers. These are now the handlers mapped:
    - public BehaveResult Init[Name][Action/Decorator] (Tree sender, string stringParameter, float floatParameter, IAgent agent, object data);
    - public BehaveResult Tick[Name][Action/Decorator] (Tree sender, string stringParameter, float floatParameter, IAgent agent, object data);
    - public void Reset[Name][Action/Decorator] (Tree sender, string stringParameter, float floatParameter, IAgent agent, object data);
    - public BehaveResult Init[Name][Action/Decorator] (Tree sender);
    - public BehaveResult Tick[Name][Action/Decorator] (Tree sender);
    - public void Reset[Name][Action/Decorator] (Tree sender);
    - public BehaveResult [Name][Action/Decorator] {get; set;}
 - Added support for collection duplication.
 - Moved debug rendering into the editor with its own dedicated debugger window, including actor listing.
 - Debugger now renders active sub-trees as well.

1.0:
 - Lots o fixes for Unity 2.5 compatibility.
 - Closer editor integration with new UI.
    - Component bar.
    - Node inspection.
 - Runtime tree debugging.
 - Direct mapping of action and delegate handlers via reflection.
 - Kitty demo.

0.3b:
 - Various tweaks to the editor UI.
 - Optimised the compiler.
 - Fixed the following editor bugs from the bug list:
    - When the editor scrips are recompiled and when the user enters and exits play mode, running editors will loose references, causing undetermined behaviour.
    - When a compile fails, the Behave compiler is locked and unusable – requiring a unity relaunch.
 - Implemented the following wishlist items:
    - Behaviour tree decorators.
    - Stand-alone edition of the Behave editor.
    - Behaviour tree debugging features.

0.2b:
 - Made the demo project a whole lot more interesting.
 - Implemented the editor wish list item: Ability to move trees between collections.
 - Various tweaks to the editor UI.
 - Fixed a ton of bugs in the compiler.
 - Fixed the following editor bugs from the bug list:
    - Not able to delete collections from library.
    - Not able to delete trees from library.
    - Not able to rename collections from library.
    - Not able to rename trees from library.
    - Missing &quot;tree has been changed, save changes?&quot; dialog.

0.1b:
 - Some documentation is available.
 - Compiler is now creating sensible output.
 - A simple test tree and script using it is provided with the demo.
 - Documentation is linked directly from the unity help menu.
 - Less spamming of the log with debug information.

Pre-release:
 - Magic happened. Behave was born.
&lt;/pre&gt;</description>
				<published>2013-12-23 00:00:00 +0100</published>
				<link>http://angryant.com/2013/12/23/Behave-2-2/</link>
			</item>
		
			<item>
				<title>ReView</title>
				<description>&lt;p&gt;Earlier this week ReView, a small Unity editor extension of mine, went live on the Unity Asset Store.&lt;/p&gt;
&lt;p&gt;The story behind it is simply that I was getting tired of adjusting layouts all the time &amp;#8211; as my tooling needs changed between authoring something in edit mode and testing it in play mode. The closest thing to something built-in addressing this would be the &amp;#8220;maximise on play&amp;#8221; feature. However that is basically only useful for demoing.&lt;/p&gt;
&lt;p&gt;So I wrote ReView. It lets you define two window layouts &amp;#8211; just like any other Unity window layout &amp;#8211; with the key difference being that you append &amp;#8220;-edit&amp;#8221; to one and &amp;#8220;-play&amp;#8221; to another. Once you switch to the one relevant for your current mode, ReView will then automatically switch to its counterpart when you enter or exit playmode.&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;&lt;a href=&quot;/tools&quot;&gt;More info and video&lt;/a&gt;&lt;/li&gt;
	&lt;li&gt;&lt;a href=&quot;http://u3d.as/5B5&quot;&gt;ReView on the Asset Store&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description>
				<published>2013-10-11 00:00:00 +0200</published>
				<link>http://angryant.com/2013/10/11/ReView/</link>
			</item>
		
			<item>
				<title>Behave 2.1</title>
				<description>&lt;p&gt;A little over a month ago &lt;a href=&quot;http://angryant.com/2013/08/25/Behave-2-0/&quot;&gt;I shipped Behave 2&lt;/a&gt; after having spent quite a while rewiring a lot of the core of the project. Today you get to see even more benefit of this work as already I am ready with version 2.1.&lt;/p&gt;
&lt;p&gt;I would like to take this opportunity to thank the members of the AngryAnt community who have been a great help in identifying bugs I had not found and properly corner those I had.&lt;/p&gt;
&lt;h2&gt;Contents&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;/resources/posts/2013-10-06-Behave-2-1/Parameter.png&quot; alt=&quot;&quot; /&gt;
While the full changelist will follow the body of this post as per usual, I would still like to draw out a few of the main changes in 2.1:&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;Auto complete on contexts, action names and string parameters makes for faster editing and helps guard against typos.&lt;/li&gt;
	&lt;li&gt;Partial library export and import-to-library makes moving trees between projects a breeze.&lt;/li&gt;
	&lt;li&gt;Parameterised trees increase tree re-usability even more by exposing select node settings as tree parameters, tweak-able per reference.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Onwards&lt;/h2&gt;
&lt;p&gt;While 2.1 brings great additions to the solid feature set of Behave 2, I am far from done.&lt;/p&gt;
&lt;p&gt;I realise that many currently still on the fence with regards to upgrading from 1.x have asked for more in terms of examples and demos and I will do my best to get to that as soon as possible.&lt;/p&gt;
&lt;p&gt;As always, I greatly appreciate any feedback you might have.&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;&lt;a href=&quot;http://u3d.as/5hA&quot;&gt;Behave 2 for Unity on the asset store&lt;/a&gt;.&lt;/li&gt;
	&lt;li&gt;&lt;a href=&quot;/behave/&quot;&gt;Project information&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;
Changelist:

2.1:
 - Added autocomplete on action names, string parameters and component contexts.
 - Added mandatory actions (present in library regardless of use in trees).
 - Added partial library export and library merging / import-to-library.
 - Added Behave stripping - leave behind only a very lean Behave runtime, for redistribution or super slim deploy.
 - Added parameterised trees - get even more re-use out of your trees by overriding context and variables per reference.
 - Behavioural change: Tree.Reset will now delay resetting tree variables until after complete component reset.
 - Behavioural change: Tree.Tick will no longer automatically reset the tree upon completion. This plays very well with:
 - Added Tree.TickContinuously (int iterationCap = 1024) - ticks tree till completion or iteration cap is reached.
 - Added BehaveResult Tree.Result (bool value) utility function to side with Tree.Invert (BehaveResult value).
 - Added int Debugging.Local.ConnectionCount property - facilitating debug behaviour dependent on Behave debugger presence.
 - Moved default install path from Assets/Behave to Assets/Plugins/Behave.
    - WARNING: See Readme.txt upgrade guide.
 - Fixed decorator control node removal resulting in detached control connection.
 - Fixed decorator incorrectly not forwarding the instant status of its child node.
 - Fixed scenario where agent classes would get reflected for handlers even if blueprint derived.
 - Fixed unexpected corner cases of bad library configuration failing compiles (now causing warnings or simply being ignored).
 - Fixed Behave window breaking down when exiting play mode after having been active there.
 - Fixes to context getting incorrectly reset in some scenarios.
 - Fixed copy / paste functionality missing in some text fields.
 - Lots of UI polish and minor fixes.


2.0:
 - New editor.
    - Unified all controls into one window.
    - Completely customised look - compatible with both Unity light and dark skin.
    - Keyboard authoring interface in addition to drag &amp;amp; drop.
 - Debugger upgrade.
    - Remote debugging.
    - Tick and reset.
    - &quot;Unplug&quot; for debugger-only control.
    - Breakpoints.
    - Action overrides - override the return values of specified actions.
 - Decorator rewrite.
    - Deprecated old decorator.
       - Still compiles, but cannot be added.
    - Decorators are now control-type components.
       - No specific decorator handlers on agents.
       - Control is achieved via third connection socket.
    - Two initial decorator types: Repeater and Interrupter.
 - Asset restructuring.
 	- No more collections - for nesting, use paths in tree names.
 	- New serialization format - see Readme.txt for upgrade instructions.
    - Collections are gone. Use Unix-style path names for tree organisation.
 - IAgent.Tick (Tree, bool) changed to IAgent.Tick (Tree)
	- Init calls can now only be handled explicitly
 - Full coverage online documentation and other community resources.
 - Countless fixes and polish items.

1.5:
 - Added Tree.TickActive - indicating if a tree is currently executing a tick or if it has completed evaluation.
 - In-tick tree reset requests now result in a reset at the end of tree evaluation rather than an immediate one.
 - Removed the legacy compatibility assembly (for compatibility with pre-1.2 assets) from the default distribution.
 - Fixed &quot;X must be instantiated using the ScriptableObject.CreateInstance method instead of new X&quot; warnings.

1.4:
 - Fixed decorator incorrectly initializing on every returning tick when tick handler returned Running.
 - Fixed debugger view dependency on active tree editor - causing reported null reference exception.
 - Fixed missing scrollbars on browser window.
 - Reduced logging noise from debug builds.
 - Agent blueprints can now be MonoBehaviour based.
 - Clarified wording on &quot;library not loaded&quot;.
 - Now handling reset a bit cleverer - potential performance boost.
 - Changed the default success criteria of Parallel components from SuccessOrFailure to Success.
 - Added &quot;instant&quot; flag to components. Components marked instant will affect sequences and selectors when moving between child nodes. When a child node marked &quot;instant&quot; completes, rather than waiting for the next tree tick to tick the following child node, the sequence or selector does it immediately.
 - The compiler progress bar returns.
 - Editing a Behave asset now focuses the asset browser last instead of the tree editor.
 - Behave can now be installed in any subfolder of Assets - provided its internal folder structure remains intact.
 - Compilation speed improvements.
 - Enabled references across collection borders.
 - Added Tree.DataSize - returning the number of bytes used by a tree instance. This is also displayed in the debugger window.

1.3:
 - Fixed priority selector init flag resetting.
 - Fixed reference handling on tree renaming and deletion.
 - Fixed references still pointing at old collection post collection duplication.
 - Fixed compilation of actions and decorators with non-integral float parameters.
 - Fixed GUI list behaviours.
 - Fixed passing context back and forth between referenced trees and referrer.
 - Fixed reordering connections not causing save state to be set.
 - Various GUI tweaks.
 - Runtime optimisations.
 - Enabled scrolling of the tree list in the debugger window.
 - Exposed Tree.ReflectForwards.
 - Added Tree.ResetForwards.
 - Added agent blueprints - connecting to agent handlers through virtual methods rather than reflected handlers.
 - Made connections selectable in the tree editor via the connection nub.
 - Moved connection managing from the inspector to the tree editor, where it is more visible and handy.
 - Added support for disabling connections - for faster, less destructive debugging.
 - Double-click reference component to jump to referenced tree.
 - Changed &quot;Cannot update unregistered tree&quot; handling from an exception to an error message. Still need more info.
 - Now showing string and float parameters in the tree editor if either is set.

1.2:
 - Fixed release building.
 - Added the priority selector, introducing the API points:
    - int IAgent.SelectTopPriority (Tree sender, params int[] IDs);
    - enum BL[LibraryName].PriorityType { PriorityName, ..., Unknown };
 - Added support for branch contexts, introducing the API points:
    - enum BL[LibraryName].ContextType { ContextName, ..., Unknown };
    - int Tree.ActiveContext { get; }
 - Changed IAgent interface:
    - Tick (bool init, Tree sender) -&amp;gt; Tick (Tree sender, bool init)
 - Added &quot;Select asset&quot; button to the standard inspector.
 - Interface polish.

1.1:
 - Made compatible with Unity 3.0 - including ensuring that the 2.5-2.6.1 bug preventing compilation on Windows is fixed on the Unity side.
 - UI tweaks and polish.
 - Added the option to have return values of nodes be inverted.
 - Fixed compiler bug when facing sequence or selector with only one child node.
 - Renamed Library.Tree -&amp;gt; Library.InstantiateTree.
 - Added Tree.Tick () and Tree.Reset () methods using the IAgent instance given at instantiation of the tree.
 - Removed the abstract Library class.
 - Changed generated library class:
    - Trees -&amp;gt; TreeType.
    - Actions -&amp;gt; ActionType.
    - Decorators -&amp;gt; DecoratorType.
    - Tree InstantiateTree (int, IAgent) -&amp;gt; static Tree InstantiateTree (TreeType, IAgent)
    - int TreeID (Tree) -&amp;gt; static TreeType Type (Tree)
    - bool IsAction (int) -&amp;gt; static bool IsAction (int)
    - bool IsDecorator (int) -&amp;gt; static bool IsDecorator (int)
 - Upped editor performance.
 - New asset structure change with automatic import of Behave 1.0 assets.
 - Changed action and decorator handlers. These are now the handlers mapped:
    - public BehaveResult Init[Name][Action/Decorator] (Tree sender, string stringParameter, float floatParameter, IAgent agent, object data);
    - public BehaveResult Tick[Name][Action/Decorator] (Tree sender, string stringParameter, float floatParameter, IAgent agent, object data);
    - public void Reset[Name][Action/Decorator] (Tree sender, string stringParameter, float floatParameter, IAgent agent, object data);
    - public BehaveResult Init[Name][Action/Decorator] (Tree sender);
    - public BehaveResult Tick[Name][Action/Decorator] (Tree sender);
    - public void Reset[Name][Action/Decorator] (Tree sender);
    - public BehaveResult [Name][Action/Decorator] {get; set;}
 - Added support for collection duplication.
 - Moved debug rendering into the editor with its own dedicated debugger window, including actor listing.
 - Debugger now renders active sub-trees as well.

1.0:
 - Lots o fixes for Unity 2.5 compatibility.
 - Closer editor integration with new UI.
    - Component bar.
    - Node inspection.
 - Runtime tree debugging.
 - Direct mapping of action and delegate handlers via reflection.
 - Kitty demo.

0.3b:
 - Various tweaks to the editor UI.
 - Optimised the compiler.
 - Fixed the following editor bugs from the bug list:
    - When the editor scrips are recompiled and when the user enters and exits play mode, running editors will loose references, causing undetermined behaviour.
    - When a compile fails, the Behave compiler is locked and unusable – requiring a unity relaunch.
 - Implemented the following wishlist items:
    - Behaviour tree decorators.
    - Stand-alone edition of the Behave editor.
    - Behaviour tree debugging features.

0.2b:
 - Made the demo project a whole lot more interesting.
 - Implemented the editor wish list item: Ability to move trees between collections.
 - Various tweaks to the editor UI.
 - Fixed a ton of bugs in the compiler.
 - Fixed the following editor bugs from the bug list:
    - Not able to delete collections from library.
    - Not able to delete trees from library.
    - Not able to rename collections from library.
    - Not able to rename trees from library.
    - Missing &quot;tree has been changed, save changes?&quot; dialog.

0.1b:
 - Some documentation is available.
 - Compiler is now creating sensible output.
 - A simple test tree and script using it is provided with the demo.
 - Documentation is linked directly from the unity help menu.
 - Less spamming of the log with debug information.

Pre-release:
 - Magic happened. Behave was born.
&lt;/pre&gt;</description>
				<published>2013-10-06 00:00:00 +0200</published>
				<link>http://angryant.com/2013/10/06/Behave-2-1/</link>
			</item>
		
			<item>
				<title>Behave 2.0</title>
				<description>&lt;p&gt;In 2010 the Unity Asset Store launched with an editor extension already live. That extension was Behave 1. Three years later, after way too long a pause, I have finally gotten around to releasing version 2.0 of Behave.&lt;/p&gt;
&lt;p&gt;As you might have noticed, especially lately, I have had quite a few things going on &amp;#8211; not the least of which is my recent exit from Unity Technologies and entry into freelancing. This all meant not a lot of time for Behave.&lt;/p&gt;
&lt;p&gt;So anyway, this is what I was doing when I was not writing that Unity Hacks blog post you were waiting for.&lt;/p&gt;
&lt;h2&gt;Behave&lt;/h2&gt;
&lt;p&gt;If you have no idea what Behave is and don&amp;#8217;t feel like dropping by the &lt;a href=&quot;/behave&quot;&gt;subsection on this site&lt;/a&gt; dedicated to it, here is how it is defined on the Asset Store:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Behave is a system for designing, integrating and running behaviour logic using Behaviour Trees. At its core Behave has a drag-drop designer and a highly effective and flexible compiled runtime.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;No funky runtime data formats or interpretation. Designer &amp;#8594; Compiler &amp;#8594; Your code.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;What is the use of a workflow extension without proper rapid iteration tools? Connect the visual debugger with break, step, reset, breakpoints and overrides directly to your project in the editor or on your target device.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;Update&lt;/strong&gt;: An introductory video to Behave 2 is now available:&lt;/p&gt;
&lt;p&gt;&lt;iframe width=&quot;600&quot; height=&quot;400&quot; src=&quot;//www.youtube.com/embed/vcsFjM-cw9k&quot; frameborder=&quot;0&quot; allowfullscreen&gt;&lt;/iframe&gt;&lt;/p&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2&gt;Future&lt;/h2&gt;
&lt;p&gt;Part of the challenge with any project is always to fight feature creep. This was very much also the case with Behave 2, so don&amp;#8217;t worry &amp;#8211; I have plenty of improvements to come. Not saying that this build is broken though &amp;#8211; go get it!&lt;/p&gt;
&lt;h2&gt;License&lt;/h2&gt;
&lt;p&gt;Unlike Behave 1, version 2 is a paid package. Aside from having gone freelance and needing a financial basis to keep up support for the software, this also had to be done as the Asset Store long ago banned the use of custom licenses.&lt;/p&gt;
&lt;p&gt;This, of-course posed a bit of a problem for Behave 1&amp;#8217;s default &amp;#8220;free if you show the splash&amp;#8221; license. Fortunately the Asset Store team members are merciful gods and I got a veeery long grace period to beat Behave into compliance.&lt;/p&gt;
&lt;p&gt;Included in the license is also access to a private community and internal support resources &amp;#8211; including the beta list.&lt;/p&gt;
&lt;h2&gt;Launch&lt;/h2&gt;
&lt;p&gt;For a limited time after launch, Behave 2 will be available at a flat discount of 50%. Additionally, if you happen to bump into me at Unite 2013 in Vancouver next week, you can slip me your business card and partake in the draw for one of &lt;strong&gt;three free Behave 2 licenses&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;If you already purchased a copy of Behave 2 and win a free copy, I&amp;#8217;ll refund you the purchase amount.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Update&lt;/strong&gt;: Details of the Unite license draw are available &lt;a href=&quot;/unite2013&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;Changes&lt;/h2&gt;
&lt;p&gt;So if you are a Behave 1 user and you are wondering what exactly is under the hood, I included the full Behave changelog below.&lt;/p&gt;
&lt;p&gt;Now you might go &amp;#8220;1.5? What the hell? Did I miss something?&amp;#8221;. No you did not. That version unfortunately did not ship, but was in stead rolled straight into 2.0. But hey, water and bridges, right? 2.0 is here baby!&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://u3d.as/5hA&quot;&gt;Behave 2 for Unity on the asset store&lt;/a&gt;.&lt;/p&gt;
&lt;pre&gt;Changelist:

2.0:
 - New editor.
	- Unified all controls into one window.
	- Completely customised look - compatible with both Unity light and dark skin.
	- Keyboard authoring interface in addition to drag &amp;amp; drop.
 - Debugger upgrade.
	- Remote debugging.
	- Tick and reset.
	- &quot;Unplug&quot; for debugger-only control.
	- Breakpoints.
	- Action overrides - override the return values of specified actions.
 - Decorator rewrite.
	- Deprecated old decorator.
	   - Still compiles, but cannot be added.
	- Decorators are now control-type components.
	   - No specific decorator handlers on agents.
	   - Control is achieved via third connection socket.
	- Two initial decorator types: Repeater and Interrupter.
 - Asset restructuring.
	- No more collections - for nesting, use paths in tree names.
	- New serialization format - see Readme.txt for upgrade instructions.
	- Collections are gone. Use Unix-style path names for tree organisation.
 - IAgent.Tick (Tree, bool) changed to IAgent.Tick (Tree)
	- Init calls can now only be handled explicitly
 - Full coverage online documentation and other community resources.
 - Countless fixes and polish items.

1.5:
 - Added Tree.TickActive - indicating if a tree is currently executing a tick or if it has completed evaluation.
 - In-tick tree reset requests now result in a reset at the end of tree evaluation rather than an immediate one.
 - Removed the legacy compatibility assembly (for compatibility with pre-1.2 assets) from the default distribution.
 - Fixed &quot;X must be instantiated using the ScriptableObject.CreateInstance method instead of new X&quot; warnings.

1.4:
 - Fixed decorator incorrectly initializing on every returning tick when tick handler returned Running.
 - Fixed debugger view dependency on active tree editor - causing reported null reference exception.
 - Fixed missing scrollbars on browser window.
 - Reduced logging noise from debug builds.
 - Agent blueprints can now be MonoBehaviour based.
 - Clarified wording on &quot;library not loaded&quot;.
 - Now handling reset a bit cleverer - potential performance boost.
 - Changed the default success criteria of Parallel components from SuccessOrFailure to Success.
 - Added &quot;instant&quot; flag to components. Components marked instant will affect sequences and selectors when moving between child nodes. When a child node marked &quot;instant&quot; completes, rather than waiting for the next tree tick to tick the following child node, the sequence or selector does it immediately.
 - The compiler progress bar returns.
 - Editing a Behave asset now focuses the asset browser last instead of the tree editor.
 - Behave can now be installed in any subfolder of Assets - provided its internal folder structure remains intact.
 - Compilation speed improvements.
 - Enabled references across collection borders.
 - Added Tree.DataSize - returning the number of bytes used by a tree instance. This is also displayed in the debugger window.

1.3:
 - Fixed priority selector init flag resetting.
 - Fixed reference handling on tree renaming and deletion.
 - Fixed references still pointing at old collection post collection duplication.
 - Fixed compilation of actions and decorators with non-integral float parameters.
 - Fixed GUI list behaviours.
 - Fixed passing context back and forth between referenced trees and referrer.
 - Fixed reordering connections not causing save state to be set.
 - Various GUI tweaks.
 - Runtime optimisations.
 - Enabled scrolling of the tree list in the debugger window.
 - Exposed Tree.ReflectForwards.
 - Added Tree.ResetForwards.
 - Added agent blueprints - connecting to agent handlers through virtual methods rather than reflected handlers.
 - Made connections selectable in the tree editor via the connection nub.
 - Moved connection managing from the inspector to the tree editor, where it is more visible and handy.
 - Added support for disabling connections - for faster, less destructive debugging.
 - Double-click reference component to jump to referenced tree.
 - Changed &quot;Cannot update unregistered tree&quot; handling from an exception to an error message. Still need more info.
 - Now showing string and float parameters in the tree editor if either is set.

1.2:
 - Fixed release building.
 - Added the priority selector, introducing the API points:
	- int IAgent.SelectTopPriority (Tree sender, params int[] IDs);
	- enum BL[LibraryName].PriorityType { PriorityName, ..., Unknown };
 - Added support for branch contexts, introducing the API points:
	- enum BL[LibraryName].ContextType { ContextName, ..., Unknown };
	- int Tree.ActiveContext { get; }
 - Changed IAgent interface:
	- Tick (bool init, Tree sender) -&amp;gt; Tick (Tree sender, bool init)
 - Added &quot;Select asset&quot; button to the standard inspector.
 - Interface polish.

1.1:
 - Made compatible with Unity 3.0 - including ensuring that the 2.5-2.6.1 bug preventing compilation on Windows is fixed on the Unity side.
 - UI tweaks and polish.
 - Added the option to have return values of nodes be inverted.
 - Fixed compiler bug when facing sequence or selector with only one child node.
 - Renamed Library.Tree -&amp;gt; Library.InstantiateTree.
 - Added Tree.Tick () and Tree.Reset () methods using the IAgent instance given at instantiation of the tree.
 - Removed the abstract Library class.
 - Changed generated library class:
	- Trees -&amp;gt; TreeType.
	- Actions -&amp;gt; ActionType.
	- Decorators -&amp;gt; DecoratorType.
	- Tree InstantiateTree (int, IAgent) -&amp;gt; static Tree InstantiateTree (TreeType, IAgent)
	- int TreeID (Tree) -&amp;gt; static TreeType Type (Tree)
	- bool IsAction (int) -&amp;gt; static bool IsAction (int)
	- bool IsDecorator (int) -&amp;gt; static bool IsDecorator (int)
 - Upped editor performance.
 - New asset structure change with automatic import of Behave 1.0 assets.
 - Changed action and decorator handlers. These are now the handlers mapped:
	- public BehaveResult Init[Name][Action/Decorator] (Tree sender, string stringParameter, float floatParameter, IAgent agent, object data);
	- public BehaveResult Tick[Name][Action/Decorator] (Tree sender, string stringParameter, float floatParameter, IAgent agent, object data);
	- public void Reset[Name][Action/Decorator] (Tree sender, string stringParameter, float floatParameter, IAgent agent, object data);
	- public BehaveResult Init[Name][Action/Decorator] (Tree sender);
	- public BehaveResult Tick[Name][Action/Decorator] (Tree sender);
	- public void Reset[Name][Action/Decorator] (Tree sender);
	- public BehaveResult [Name][Action/Decorator] {get; set;}
 - Added support for collection duplication.
 - Moved debug rendering into the editor with its own dedicated debugger window, including actor listing.
 - Debugger now renders active sub-trees as well.

1.0:
 - Lots o fixes for Unity 2.5 compatibility.
 - Closer editor integration with new UI.
	- Component bar.
	- Node inspection.
 - Runtime tree debugging.
 - Direct mapping of action and delegate handlers via reflection.
 - Kitty demo.

0.3b:
 - Various tweaks to the editor UI.
 - Optimised the compiler.
 - Fixed the following editor bugs from the bug list:
	- When the editor scrips are recompiled and when the user enters and exits play mode, running editors will loose references, causing undetermined behaviour.
	- When a compile fails, the Behave compiler is locked and unusable – requiring a unity relaunch.
 - Implemented the following wishlist items:
	- Behaviour tree decorators.
	- Stand-alone edition of the Behave editor.
	- Behaviour tree debugging features.

0.2b:
 - Made the demo project a whole lot more interesting.
 - Implemented the editor wish list item: Ability to move trees between collections.
 - Various tweaks to the editor UI.
 - Fixed a ton of bugs in the compiler.
 - Fixed the following editor bugs from the bug list:
	- Not able to delete collections from library.
	- Not able to delete trees from library.
	- Not able to rename collections from library.
	- Not able to rename trees from library.
	- Missing &quot;tree has been changed, save changes?&quot; dialog.

0.1b:
 - Some documentation is available.
 - Compiler is now creating sensible output.
 - A simple test tree and script using it is provided with the demo.
 - Documentation is linked directly from the unity help menu.
 - Less spamming of the log with debug information.

Pre-release:
 - Magic happened. Behave was born.&lt;/pre&gt;</description>
				<published>2013-08-25 00:00:00 +0200</published>
				<link>http://angryant.com/2013/08/25/Behave-2-0/</link>
			</item>
		
			<item>
				<title>Unity Hacks: Dual sticks</title>
				<description>&lt;p&gt;This is my third post in what looks like is going to turn into &lt;a href=&quot;http://angryant.com/2013/07/19/Unity-Hacks-Touch-gestures/&quot;&gt;a series&lt;/a&gt;, examining parts of the example project I provided for the Unity Hacks presentation &amp;#8211; delivered at a couple of the Unite conferences this year.&lt;/p&gt;
&lt;p&gt;You can find the project and a recording of the presentation in the &lt;a href=&quot;/videos&quot;&gt;videos&lt;/a&gt; section of this site.&lt;/p&gt;
&lt;h1&gt;DualControls&lt;/h1&gt;
&lt;p&gt;The &lt;a href=&quot;https://github.com/AngryAnt/UnityHacks/blob/master/Assets/Standard%20Assets/Input/DualControls.cs&quot;&gt;DualControls&lt;/a&gt; interface has a very straight forward purpose: Provide a 2 &amp;#215; 2 axis input interface across platforms and compatible units. This is exposed via the DualControls.Left and DualControls.Right accessors &amp;#8211; each returning a Vector2.&lt;/p&gt;
&lt;p&gt;Supported out of the box is:&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;&lt;span class=&quot;caps&quot;&gt;WASD&lt;/span&gt; + mouse.&lt;/li&gt;
	&lt;li&gt;Xbox360 controller (windows-only)&lt;/li&gt;
	&lt;li&gt;ps3 controller (OS X-only)&lt;/li&gt;
	&lt;li&gt;Shadowgun-style touch controls (left/right screen split)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;However abstraction is relaxed enough that virtual sticks or alternative input like the leap motion could be added fairly easily (assuming you have a means of capturing that input data in the first place).&lt;/p&gt;
&lt;h1&gt;Controllers&lt;/h1&gt;
&lt;p&gt;So controllers are not exactly nicely wrapped up in the current version of Unity. Which ungodly hack did I have to apply to get them to play along with just working out of the box in an easily installable package? It is actually not so bad. However I had to concede to some compromises up front. Basically when it comes to joysticks and controllers, you generally have two complications: the hardware itself and the driver.&lt;/p&gt;
&lt;p&gt;So? What is so bad about that? Well, in a perfect world you had one driver for each controller type or at least all the drivers for the same hardware would map the buttons and axes in the same way, right?&lt;/p&gt;
&lt;p&gt;Enter: This world. For every controller you always have at least two drivers set up differently: One for OS X and one for Windows (the Linux one often being based on the Windows one as I understand it). Why would anyone be content with just two drivers though? There exists a good number of different packages and open source solutions, vendor and OS provided drivers for the different controllers.&lt;/p&gt;
&lt;p&gt;The way these are differentiated in the Unity runtime is via the joystick name string &amp;#8211; as accessible via Input.GetJoystickNames.&lt;/p&gt;
&lt;p&gt;This is what &lt;a href=&quot;https://github.com/AngryAnt/UnityHacks/blob/master/Assets/Standard%20Assets/Input/DualControls.cs&quot;&gt;DualControls&lt;/a&gt; checks for in its Update handler. If a new joystick is found connected, it runs the name by the controller wiring and activates the appropriate controller (optionally if accepted by a callback).&lt;/p&gt;
&lt;p&gt;Per default I have compromised and only provided wiring for the Xbox360 controller on Windows and the ps3 controller on OS X. This particular configuration stems from the fact that those OS&amp;#8217;es ship with a pre-installed default driver for those controllers.&lt;/p&gt;
&lt;p&gt;Microsoft clearly should support their own hardware and I&amp;#8217;m assuming that Apple just supports the ps3 controller because it&amp;#8217;s hardware from a direct Microsoft competitor.&lt;/p&gt;
&lt;p&gt;However, again, the abstraction is loose enough that if you want to, you should be able to add support for more controllers fairly easily. See the end of the &lt;a href=&quot;https://github.com/AngryAnt/UnityHacks/blob/master/Assets/Standard%20Assets/Input/Controllers.cs&quot;&gt;Controllers.cs&lt;/a&gt; script for that.&lt;/p&gt;
&lt;p&gt;Oh, but I almost forgot the hack: As I am using the standard Unity Input &lt;span class=&quot;caps&quot;&gt;API&lt;/span&gt; for this, the input manager needs configuring, right? So with no &lt;span class=&quot;caps&quot;&gt;API&lt;/span&gt; for it, how do you go about doing that for a package?&lt;/p&gt;
&lt;p&gt;You use the AssetDatabase &lt;span class=&quot;caps&quot;&gt;API&lt;/span&gt; to load ProjectSettings/InputManager.asset and then the ScriptableObject &lt;span class=&quot;caps&quot;&gt;API&lt;/span&gt; to modify it.
&lt;script src=&#39;https://gist.github.com/6151366.js?file=&#39;&gt;&lt;/script&gt;&lt;div&gt;&lt;noscript&gt;&lt;pre&gt;&lt;code&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/noscript&gt;&lt;/div&gt;&lt;/p&gt;
&lt;p&gt;I hope you find this useful. For more details, these are the Unity Hacks scripts related to this post:&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;&lt;a href=&quot;https://github.com/AngryAnt/UnityHacks/blob/master/Assets/Standard%20Assets/Input/DualControls.cs&quot;&gt;DualControls.cs&lt;/a&gt;&lt;/li&gt;
	&lt;li&gt;&lt;a href=&quot;https://github.com/AngryAnt/UnityHacks/blob/master/Assets/Standard%20Assets/Input/DualControls.Stick.cs&quot;&gt;DualControls.Stick.cs&lt;/a&gt;&lt;/li&gt;
	&lt;li&gt;&lt;a href=&quot;https://github.com/AngryAnt/UnityHacks/blob/master/Assets/Standard%20Assets/Input/Controllers.cs&quot;&gt;Controllers.cs&lt;/a&gt;&lt;/li&gt;
	&lt;li&gt;&lt;a href=&quot;https://github.com/AngryAnt/UnityHacks/blob/master/Assets/Standard%20Assets/Input/ControllerInput.cs&quot;&gt;ControllerInput.cs&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;


</description>
				<published>2013-08-04 00:00:00 +0200</published>
				<link>http://angryant.com/2013/08/04/Unity-Hacks-Dual-sticks/</link>
			</item>
		
	</channel>
</rss>
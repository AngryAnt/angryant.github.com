<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
	<channel>
		<title>AngryAnt.com/feed</title>
		<description>Random scribblings at random intervals</description>
		<link>http://angryant.com</link>
		
			<item>
				<title>Unity and .net assemblies</title>
				<description>&lt;p&gt;Since I started making middleware for Unity in early 2008, I have been working with Unity and .net assemblies. I have in this time had many opportunities to juggle the two in many different contexts, so I figured a sort of summary of what I learned would make sense.&lt;/p&gt;
&lt;p&gt;Why not start off by setting a few facts straight, eh?&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;Aside from the extension and a header, .net assemblies have little to do with Windows Dynamic Link Libraries.
	&lt;ul&gt;
		&lt;li&gt;Windows DLLs contain binary code, usually with a very simple interface, while .net assemblies contain .net bytecode (or &lt;span class=&quot;caps&quot;&gt;CIL&lt;/span&gt;).&lt;/li&gt;
	&lt;/ul&gt;&lt;/li&gt;
	&lt;li&gt;Unity pro is not required to use .net assemblies.
	&lt;ul&gt;
		&lt;li&gt;Binary plugins require Unity pro (at time of writing) and must be placed in Assets/Plugins. However .net assemblies are just bytecode &amp;#8211; just like what Unity turns your scripts into, so none of these requirements apply.&lt;/li&gt;
	&lt;/ul&gt;&lt;/li&gt;
	&lt;li&gt;.net assemblies run on all platforms &amp;#8211; including webplayer.
	&lt;ul&gt;
		&lt;li&gt;Again, as we are talking about bytecode which is fed directly to the mono runtime &amp;#8211; like the compiled result of your scripts, the same rules go.&lt;/li&gt;
	&lt;/ul&gt;&lt;/li&gt;
	&lt;li&gt;Distributing .net assemblies in stead of script files does not copy protect your code.
	&lt;ul&gt;
		&lt;li&gt;Since the mono runtime has to Just In Time compile your assembly to run on the current platform, the bytecode is quite verbose and while some information is lost, generally it is very easy to decompile and read .net assemblies.&lt;/li&gt;
		&lt;li&gt;Remember that this is true for your script source in most project builds as well, since for most platforms Unity builds your scripts to .net assemblies.&lt;/li&gt;
	&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;Argh! But my kodes!&lt;/h1&gt;
&lt;p&gt;I will not get into source protection too much, but generally I would not worry too much about it.&lt;/p&gt;
&lt;p&gt;Source code in and of itself does not mean that someone can instantly copy and use parts of your work. It takes actual skill and time investment to make use of it, integrated in a different setup from what it was originally designed for. In the end it is my opinion that it would not be worth it compared to doing the same work from scratch.&lt;/p&gt;
&lt;p&gt;Consider that the entire source of Half Life 2 was very publicly leaked shortly before its originally scheduled release and how we are all now drowning in games based on it.&lt;/p&gt;
&lt;p&gt;If you have client-side security measures which you would like to protect &amp;#8211; like in-app purchases or other anti-cheat measures, you may indeed want to consider splitting out and encrypting part of this logic as well as applying some measure of source obfuscation.&lt;/p&gt;
&lt;p&gt;A word of caution: While source-level obfuscation is fine and usually sufficient, assembly-level obfuscation can be risky as it generally relies on bugs in the mono runtime in order to function. Bugs which might get fixed at any time &amp;#8211; at which point you will need to go back and revisit your security efforts.&lt;/p&gt;
&lt;p&gt;And remember: Encryption and obfuscation is just about making it harder for people to do things you don&amp;#8217;t want them to. In the end this all has to be understood by processors and even binaries are routinely reverse engineered. The best security is gained by not making what you wish to protect available outside of hardware in your control.&lt;/p&gt;
&lt;p&gt;For more information on protecting sensitive client-side information from tampering, see the Unite Asia 2013 &amp;#8220;Protecting Your Android Content&amp;#8221; talk by Erik Hemming.&lt;/p&gt;
&lt;p&gt;Note that Unity does not distribute .net assemblies on all platforms. Some platforms do not run the mono &lt;span class=&quot;caps&quot;&gt;JIT&lt;/span&gt; compiler because reasons and for those Unity will in stead perform Ahead Of Time compilation on your code while building.&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;caps&quot;&gt;AOT&lt;/span&gt; compilation basically means that in stead of relying on the &lt;span class=&quot;caps&quot;&gt;JIT&lt;/span&gt; compiler to at runtime load your bytecode when relevant and compile it for the specific hardware it is running on, the &lt;span class=&quot;caps&quot;&gt;AOT&lt;/span&gt; compiler will compile all your assembly to platform-specific binary right up front.&lt;/p&gt;
&lt;p&gt;This means that your source code assemblies, any assemblies present in your project as well as the Unity engine assemblies are all jumbled into one binary. In most cases this should disincentivise tampering sufficiently.&lt;/p&gt;
&lt;p&gt;At time of writing, Unity employs &lt;span class=&quot;caps&quot;&gt;AOT&lt;/span&gt; compiling on iOS and the console platforms.&lt;/p&gt;
&lt;h1&gt;What is the point then?&lt;/h1&gt;
&lt;p&gt;Now that you know what assemblies are not, you might be wondering why you should be interested in them at all. And rightly so.&lt;/p&gt;
&lt;p&gt;I think it is always healthy to have some understanding of what goes on in the lower layers of your technology stack, but most Unity developers will not need to know about .net assemblies.&lt;/p&gt;
&lt;p&gt;However here are some reasons why they are really cool:&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;If you are distributing middleware, they allow you to significantly reduce your distribution footprint without compromising your development environment (one assembly vs. a bunch of script files).
	&lt;ul&gt;
		&lt;li&gt;Like their Windows cousins, .net assemblies allow embedded resources, which means you can literally put everything you need &amp;#8211; textures, audio, whatever &amp;#8211; inside one file.&lt;/li&gt;
	&lt;/ul&gt;&lt;/li&gt;
	&lt;li&gt;Where &lt;span class=&quot;caps&quot;&gt;JIT&lt;/span&gt; is available, new assembly can be loaded at runtime.
	&lt;ul&gt;
		&lt;li&gt;So what? So live patching baby!&lt;/li&gt;
	&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Since the &lt;span class=&quot;caps&quot;&gt;JIT&lt;/span&gt; compiler routinely loads bytecode from disk and compiles and executes it, there is nothing preventing you from having it load bytecode which was not included in your original build.&lt;/p&gt;
&lt;p&gt;The class System.Reflection.Assembly lets you load in bytecode from a file or a byte array, after which you can use reflection to find and instantiate types, call functions and all that other good stuff on what is contained in the assembly.&lt;/p&gt;
&lt;p&gt;Remember that since Unity employs &lt;span class=&quot;caps&quot;&gt;AOT&lt;/span&gt; and not &lt;span class=&quot;caps&quot;&gt;JIT&lt;/span&gt; on some platforms, this functionality is not available everywhere.&lt;/p&gt;
&lt;p&gt;For an example of loading in new assembly, see the code-in-asset-bundles example from the &amp;#8220;Unity Hacks&amp;#8221; talk available on the &lt;a href=&quot;/videos&quot;&gt;videos&lt;/a&gt; page (source included).&lt;/p&gt;
&lt;p&gt;A word of caution: If you plan on employing remote patching, make sure to at least sign your transfers in order to avoid man in the middle injection attacks.&lt;/p&gt;
&lt;h1&gt;Wohoo! Assemble all of the things!&lt;/h1&gt;
&lt;p&gt;This is all great, but how do you get started building assemblies for all them things? Well, dear reader, there are different approaches:&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;If you are already set up with Visual Studio or Mono Develop, you can simply create a new project for a .net assembly using the project creation wizard. In order to access Unity types, simply add the UnityEngine.dll (and if necessary the UnityEditor.dll) assemblies to the project references and off you go.&lt;/li&gt;
	&lt;li&gt;Should you be of a different persuasion and if you are not one to shy away from a terminal window, you can use the the gmcs binary as distributed with Unity or the mono &lt;span class=&quot;caps&quot;&gt;SDK&lt;/span&gt; to build your assembly by command-line.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Either of these will produce a .dll file with all of your kodes (and potentially resources). Simply drop it anywhere in your assets folder to gain access to the contained classes. The same compile order rules which apply to scripts, also hold true for assemblies.&lt;/p&gt;
&lt;p&gt;Any public ScriptableObject or MonoBehaviour derived classes will appear as children of the assembly asset. Simply click the folding widget next to the asset in order to view and be able to drag-drop them.&lt;/p&gt;
&lt;p&gt;Ah and if you were too lazy to check out the Unity Hacks talk (you really should, it is full of useful snippets), the trick for putting code in asset bundles is to compile the scripts to an assembly rather than letting Unity compile them and then save the assembly in your assets folder with the .bytes extension rather than .dll.&lt;/p&gt;
&lt;p&gt;This makes Unity import the assembly as a TextAsset which is not addressed by Unitys compiler and can be included in asset bundles. At runtime, the bytes property of the asset reference is then passed to the Assembly constructor as described earlier.&lt;/p&gt;
&lt;h1&gt;And the catch?&lt;/h1&gt;
&lt;p&gt;Given that we are reaching the end of this article, that would mean it is high time for some dream bursting. This all sounds very easy and optimal to work with, but of-course it is not that simple.&lt;/p&gt;
&lt;p&gt;While Unity makes it fairly straight forward to debug your scripts using MonoDevelop, it will by default do absolutely nothing to help you with your assemblies.&lt;/p&gt;
&lt;p&gt;To help it on its way, you need to first build your assemblies for debug and secondly copy the generated [AssemblyName].mdb file to your assets folder along side the .dll file.&lt;/p&gt;
&lt;p&gt;If you went ahead and looked for the mdb file right as I had ended the above paragraph, you would stand some chance of not finding it. Should you be on Windows, a pdb file rather than an mdb is generated and it is absolutely useless to the Unity debugging runtime.&lt;/p&gt;
&lt;p&gt;Should you be stuck with a pdb file, you will need to use the pdb2mdb command-line tool as distributed with the Unity mono runtime or the mono &lt;span class=&quot;caps&quot;&gt;SDK&lt;/span&gt;. However running this command by hand every time you need to debug gets old really fast, so I recommend adding it in as a post-build step on your MonoDevelop or VisualStudio project.&lt;/p&gt;
&lt;p&gt;For more information on debugging assemblies in Unity and indeed general use of assemblies in Unity, see this excellent article in the Unity documentation: &lt;a href=&quot;http://docs.unity3d.com/Documentation/Manual/UsingDLL.html&quot;&gt;Using Mono DLLs in a Unity Project&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;And that is all, folks. I hope you find it useful!&lt;/p&gt;</description>
				<published>2014-01-03 00:00:00 +0100</published>
				<link>http://angryant.com/2014/01/03/Unity-and-net-assemblies/</link>
			</item>
		
			<item>
				<title>Behave 2.2</title>
				<description>&lt;p&gt;It is finally here! Sorry about this release taking a bit longer than the prior ones. I have experienced the very luxurious &amp;#8220;problem&amp;#8221; of &lt;a href=&quot;/work/&quot;&gt;having lots to do&lt;/a&gt;. The last contract of the year finished this Friday though, so here we are: 2.2 :)&lt;/p&gt;
&lt;h2&gt;Contents&lt;/h2&gt;
&lt;p&gt;While the full changelist will follow the body of this post as per usual, I would still like to draw out a few of the main changes in 2.2:&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;Behavioural change: Support for multiple different action handler signatures is discontinued effective immediately.&lt;/li&gt;
	&lt;li&gt;Rather than waiting for the Unity bugfix, the built-in compiler &lt;span class=&quot;caps&quot;&gt;API&lt;/span&gt; is now bypassed in favour of direct compiler binary execution.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Watch out for that behavioural change &amp;#8211; it will very likely break code. I decided on this in order to reduce the size of your obligatory agent code. Additional parameters have been moved onto properties of the sender tree.&lt;/p&gt;
&lt;p&gt;The compiler change means we are finally rid of that annoying requirement of having mono installed next to Unity in order to run the Behave compiler. Yay!&lt;/p&gt;
&lt;p&gt;The remaining changes are more or less just heaps of UI- and workflow polish, plus a few bug fixes &amp;#8211; again, many thanks to the AngryAnt community for providing invaluable assistance in identifying and tracking these down.&lt;/p&gt;
&lt;h2&gt;Onwards&lt;/h2&gt;
&lt;p&gt;Early next year I hope to have some more time for Behave, allowing me to do some rapid releases with new features in January. As always, any feedback you might have is very much appreciated.&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;&lt;a href=&quot;http://u3d.as/5hA&quot;&gt;Behave 2 for Unity on the asset store&lt;/a&gt;.&lt;/li&gt;
	&lt;li&gt;&lt;a href=&quot;/behave/&quot;&gt;Project information&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;
Changelist:


2.2:
 - Behavioural change: Support for multiple different action handler signatures is discontinued effective immediately.
    - Generated agent blueprint as well as accepted reflected signatures are now only:
        - public BehaveResult [Tick/Init][Name]Action (Tree sender);
        - public void Reset[Name]Action (Tree sender);
 - Added Tree class accessors - all valid only during an active init/tick/reset handler call:
    - string ActiveStringParameter
    - float ActiveFloatParameter
    - IAgent ActiveAgent
    - object ActiveData
 - Rather than waiting for the Unity bugfix, the built-in compiler API is now bypassed in favour of direct compiler binary execution.
    - An additional system-level mono SDK install is no longer needed to work around this Unity bug.
 - Tree.SetForward now returns boolean success value rather than logging error when passed unused action.
 - Full-library export now also available from the library settings in stead of menu-only access.
 - Even more UI polish: Better word-wrap, more contrasts for emphasis, instant flag hidden in unaffected scenarios and much more.
 - &quot;Form new tree&quot; nicely moves the new subtree up around the root socket rather than retaining the old position.
 - Default frame-rate of DebugUpdater now set to 20 fps rather than every frame. Gun safety and all that.
 - Massive codegen size save for larger libraries - from optimisation of tree-agent introspection codegen. Compile-time win.
 - More rigid parameter evaluation (remove needless occasional extra codegen).
 - Fixed copy and duplication procedures incorrectly not copying parameter values.
 - Force Unity to write serialised data before compiling.


2.1.1:
 - Fixed issue with tree paramterisation breaking debugger visualisation.


2.1:
 - Added autocomplete on action names, string parameters and component contexts.
 - Added mandatory actions (present in library regardless of use in trees).
 - Added partial library export and library merging / import-to-library.
 - Added Behave stripping - leave behind only a very lean Behave runtime, for redistribution or super slim deploy.
 - Added parameterised trees - get even more re-use out of your trees by overriding context and variables per reference.
 - Behavioural change: Tree.Reset will now delay resetting tree variables until after complete component reset.
 - Behavioural change: Tree.Tick will no longer automatically reset the tree upon completion. This plays very well with:
 - Added Tree.TickContinuously (int iterationCap = 1024) - ticks tree till completion or iteration cap is reached.
 - Added BehaveResult Tree.Result (bool value) utility function to side with Tree.Invert (BehaveResult value).
 - Added int Debugging.Local.ConnectionCount property - facilitating debug behaviour dependent on Behave debugger presence.
 - Moved default install path from Assets/Behave to Assets/Plugins/Behave.
    - WARNING: See Readme.txt upgrade guide.
 - Fixed decorator control node removal resulting in detached control connection.
 - Fixed decorator incorrectly not forwarding the instant status of its child node.
 - Fixed scenario where agent classes would get reflected for handlers even if blueprint derived.
 - Fixed unexpected corner cases of bad library configuration failing compiles (now causing warnings or simply being ignored).
 - Fixed Behave window breaking down when exiting play mode after having been active there.
 - Fixes to context getting incorrectly reset in some scenarios.
 - Fixed copy / paste functionality missing in some text fields.
 - Lots of UI polish and minor fixes.


2.0:
 - New editor.
    - Unified all controls into one window.
    - Completely customised look - compatible with both Unity light and dark skin.
    - Keyboard authoring interface in addition to drag &amp;amp; drop.
 - Debugger upgrade.
    - Remote debugging.
    - Tick and reset.
    - &quot;Unplug&quot; for debugger-only control.
    - Breakpoints.
    - Action overrides - override the return values of specified actions.
 - Decorator rewrite.
    - Deprecated old decorator.
       - Still compiles, but cannot be added.
    - Decorators are now control-type components.
       - No specific decorator handlers on agents.
       - Control is achieved via third connection socket.
    - Two initial decorator types: Repeater and Interrupter.
 - Asset restructuring.
    - No more collections - for nesting, use paths in tree names.
    - New serialization format - see Readme.txt for upgrade instructions.
    - Collections are gone. Use Unix-style path names for tree organisation.
 - IAgent.Tick (Tree, bool) changed to IAgent.Tick (Tree)
    - Init calls can now only be handled explicitly
 - Full coverage online documentation and other community resources.
 - Countless fixes and polish items.

1.5:
 - Added Tree.TickActive - indicating if a tree is currently executing a tick or if it has completed evaluation.
 - In-tick tree reset requests now result in a reset at the end of tree evaluation rather than an immediate one.
 - Removed the legacy compatibility assembly (for compatibility with pre-1.2 assets) from the default distribution.
 - Fixed &quot;X must be instantiated using the ScriptableObject.CreateInstance method instead of new X&quot; warnings.

1.4:
 - Fixed decorator incorrectly initializing on every returning tick when tick handler returned Running.
 - Fixed debugger view dependency on active tree editor - causing reported null reference exception.
 - Fixed missing scrollbars on browser window.
 - Reduced logging noise from debug builds.
 - Agent blueprints can now be MonoBehaviour based.
 - Clarified wording on &quot;library not loaded&quot;.
 - Now handling reset a bit cleverer - potential performance boost.
 - Changed the default success criteria of Parallel components from SuccessOrFailure to Success.
 - Added &quot;instant&quot; flag to components. Components marked instant will affect sequences and selectors when moving between child nodes. When a child node marked &quot;instant&quot; completes, rather than waiting for the next tree tick to tick the following child node, the sequence or selector does it immediately.
 - The compiler progress bar returns.
 - Editing a Behave asset now focuses the asset browser last instead of the tree editor.
 - Behave can now be installed in any subfolder of Assets - provided its internal folder structure remains intact.
 - Compilation speed improvements.
 - Enabled references across collection borders.
 - Added Tree.DataSize - returning the number of bytes used by a tree instance. This is also displayed in the debugger window.

1.3:
 - Fixed priority selector init flag resetting.
 - Fixed reference handling on tree renaming and deletion.
 - Fixed references still pointing at old collection post collection duplication.
 - Fixed compilation of actions and decorators with non-integral float parameters.
 - Fixed GUI list behaviours.
 - Fixed passing context back and forth between referenced trees and referrer.
 - Fixed reordering connections not causing save state to be set.
 - Various GUI tweaks.
 - Runtime optimisations.
 - Enabled scrolling of the tree list in the debugger window.
 - Exposed Tree.ReflectForwards.
 - Added Tree.ResetForwards.
 - Added agent blueprints - connecting to agent handlers through virtual methods rather than reflected handlers.
 - Made connections selectable in the tree editor via the connection nub.
 - Moved connection managing from the inspector to the tree editor, where it is more visible and handy.
 - Added support for disabling connections - for faster, less destructive debugging.
 - Double-click reference component to jump to referenced tree.
 - Changed &quot;Cannot update unregistered tree&quot; handling from an exception to an error message. Still need more info.
 - Now showing string and float parameters in the tree editor if either is set.

1.2:
 - Fixed release building.
 - Added the priority selector, introducing the API points:
    - int IAgent.SelectTopPriority (Tree sender, params int[] IDs);
    - enum BL[LibraryName].PriorityType { PriorityName, ..., Unknown };
 - Added support for branch contexts, introducing the API points:
    - enum BL[LibraryName].ContextType { ContextName, ..., Unknown };
    - int Tree.ActiveContext { get; }
 - Changed IAgent interface:
    - Tick (bool init, Tree sender) -&amp;gt; Tick (Tree sender, bool init)
 - Added &quot;Select asset&quot; button to the standard inspector.
 - Interface polish.

1.1:
 - Made compatible with Unity 3.0 - including ensuring that the 2.5-2.6.1 bug preventing compilation on Windows is fixed on the Unity side.
 - UI tweaks and polish.
 - Added the option to have return values of nodes be inverted.
 - Fixed compiler bug when facing sequence or selector with only one child node.
 - Renamed Library.Tree -&amp;gt; Library.InstantiateTree.
 - Added Tree.Tick () and Tree.Reset () methods using the IAgent instance given at instantiation of the tree.
 - Removed the abstract Library class.
 - Changed generated library class:
    - Trees -&amp;gt; TreeType.
    - Actions -&amp;gt; ActionType.
    - Decorators -&amp;gt; DecoratorType.
    - Tree InstantiateTree (int, IAgent) -&amp;gt; static Tree InstantiateTree (TreeType, IAgent)
    - int TreeID (Tree) -&amp;gt; static TreeType Type (Tree)
    - bool IsAction (int) -&amp;gt; static bool IsAction (int)
    - bool IsDecorator (int) -&amp;gt; static bool IsDecorator (int)
 - Upped editor performance.
 - New asset structure change with automatic import of Behave 1.0 assets.
 - Changed action and decorator handlers. These are now the handlers mapped:
    - public BehaveResult Init[Name][Action/Decorator] (Tree sender, string stringParameter, float floatParameter, IAgent agent, object data);
    - public BehaveResult Tick[Name][Action/Decorator] (Tree sender, string stringParameter, float floatParameter, IAgent agent, object data);
    - public void Reset[Name][Action/Decorator] (Tree sender, string stringParameter, float floatParameter, IAgent agent, object data);
    - public BehaveResult Init[Name][Action/Decorator] (Tree sender);
    - public BehaveResult Tick[Name][Action/Decorator] (Tree sender);
    - public void Reset[Name][Action/Decorator] (Tree sender);
    - public BehaveResult [Name][Action/Decorator] {get; set;}
 - Added support for collection duplication.
 - Moved debug rendering into the editor with its own dedicated debugger window, including actor listing.
 - Debugger now renders active sub-trees as well.

1.0:
 - Lots o fixes for Unity 2.5 compatibility.
 - Closer editor integration with new UI.
    - Component bar.
    - Node inspection.
 - Runtime tree debugging.
 - Direct mapping of action and delegate handlers via reflection.
 - Kitty demo.

0.3b:
 - Various tweaks to the editor UI.
 - Optimised the compiler.
 - Fixed the following editor bugs from the bug list:
    - When the editor scrips are recompiled and when the user enters and exits play mode, running editors will loose references, causing undetermined behaviour.
    - When a compile fails, the Behave compiler is locked and unusable – requiring a unity relaunch.
 - Implemented the following wishlist items:
    - Behaviour tree decorators.
    - Stand-alone edition of the Behave editor.
    - Behaviour tree debugging features.

0.2b:
 - Made the demo project a whole lot more interesting.
 - Implemented the editor wish list item: Ability to move trees between collections.
 - Various tweaks to the editor UI.
 - Fixed a ton of bugs in the compiler.
 - Fixed the following editor bugs from the bug list:
    - Not able to delete collections from library.
    - Not able to delete trees from library.
    - Not able to rename collections from library.
    - Not able to rename trees from library.
    - Missing &quot;tree has been changed, save changes?&quot; dialog.

0.1b:
 - Some documentation is available.
 - Compiler is now creating sensible output.
 - A simple test tree and script using it is provided with the demo.
 - Documentation is linked directly from the unity help menu.
 - Less spamming of the log with debug information.

Pre-release:
 - Magic happened. Behave was born.
&lt;/pre&gt;</description>
				<published>2013-12-23 00:00:00 +0100</published>
				<link>http://angryant.com/2013/12/23/Behave-2-2/</link>
			</item>
		
			<item>
				<title>ReView</title>
				<description>&lt;p&gt;Earlier this week ReView, a small Unity editor extension of mine, went live on the Unity Asset Store.&lt;/p&gt;
&lt;p&gt;The story behind it is simply that I was getting tired of adjusting layouts all the time &amp;#8211; as my tooling needs changed between authoring something in edit mode and testing it in play mode. The closest thing to something built-in addressing this would be the &amp;#8220;maximise on play&amp;#8221; feature. However that is basically only useful for demoing.&lt;/p&gt;
&lt;p&gt;So I wrote ReView. It lets you define two window layouts &amp;#8211; just like any other Unity window layout &amp;#8211; with the key difference being that you append &amp;#8220;-edit&amp;#8221; to one and &amp;#8220;-play&amp;#8221; to another. Once you switch to the one relevant for your current mode, ReView will then automatically switch to its counterpart when you enter or exit playmode.&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;&lt;a href=&quot;/tools&quot;&gt;More info and video&lt;/a&gt;&lt;/li&gt;
	&lt;li&gt;&lt;a href=&quot;http://u3d.as/5B5&quot;&gt;ReView on the Asset Store&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description>
				<published>2013-10-11 00:00:00 +0200</published>
				<link>http://angryant.com/2013/10/11/ReView/</link>
			</item>
		
			<item>
				<title>Behave 2.1</title>
				<description>&lt;p&gt;A little over a month ago &lt;a href=&quot;http://angryant.com/2013/08/25/Behave-2-0/&quot;&gt;I shipped Behave 2&lt;/a&gt; after having spent quite a while rewiring a lot of the core of the project. Today you get to see even more benefit of this work as already I am ready with version 2.1.&lt;/p&gt;
&lt;p&gt;I would like to take this opportunity to thank the members of the AngryAnt community who have been a great help in identifying bugs I had not found and properly corner those I had.&lt;/p&gt;
&lt;h2&gt;Contents&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;/resources/posts/2013-10-06-Behave-2-1/Parameter.png&quot; alt=&quot;&quot; /&gt;
While the full changelist will follow the body of this post as per usual, I would still like to draw out a few of the main changes in 2.1:&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;Auto complete on contexts, action names and string parameters makes for faster editing and helps guard against typos.&lt;/li&gt;
	&lt;li&gt;Partial library export and import-to-library makes moving trees between projects a breeze.&lt;/li&gt;
	&lt;li&gt;Parameterised trees increase tree re-usability even more by exposing select node settings as tree parameters, tweak-able per reference.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Onwards&lt;/h2&gt;
&lt;p&gt;While 2.1 brings great additions to the solid feature set of Behave 2, I am far from done.&lt;/p&gt;
&lt;p&gt;I realise that many currently still on the fence with regards to upgrading from 1.x have asked for more in terms of examples and demos and I will do my best to get to that as soon as possible.&lt;/p&gt;
&lt;p&gt;As always, I greatly appreciate any feedback you might have.&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;&lt;a href=&quot;http://u3d.as/5hA&quot;&gt;Behave 2 for Unity on the asset store&lt;/a&gt;.&lt;/li&gt;
	&lt;li&gt;&lt;a href=&quot;/behave/&quot;&gt;Project information&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;
Changelist:

2.1:
 - Added autocomplete on action names, string parameters and component contexts.
 - Added mandatory actions (present in library regardless of use in trees).
 - Added partial library export and library merging / import-to-library.
 - Added Behave stripping - leave behind only a very lean Behave runtime, for redistribution or super slim deploy.
 - Added parameterised trees - get even more re-use out of your trees by overriding context and variables per reference.
 - Behavioural change: Tree.Reset will now delay resetting tree variables until after complete component reset.
 - Behavioural change: Tree.Tick will no longer automatically reset the tree upon completion. This plays very well with:
 - Added Tree.TickContinuously (int iterationCap = 1024) - ticks tree till completion or iteration cap is reached.
 - Added BehaveResult Tree.Result (bool value) utility function to side with Tree.Invert (BehaveResult value).
 - Added int Debugging.Local.ConnectionCount property - facilitating debug behaviour dependent on Behave debugger presence.
 - Moved default install path from Assets/Behave to Assets/Plugins/Behave.
    - WARNING: See Readme.txt upgrade guide.
 - Fixed decorator control node removal resulting in detached control connection.
 - Fixed decorator incorrectly not forwarding the instant status of its child node.
 - Fixed scenario where agent classes would get reflected for handlers even if blueprint derived.
 - Fixed unexpected corner cases of bad library configuration failing compiles (now causing warnings or simply being ignored).
 - Fixed Behave window breaking down when exiting play mode after having been active there.
 - Fixes to context getting incorrectly reset in some scenarios.
 - Fixed copy / paste functionality missing in some text fields.
 - Lots of UI polish and minor fixes.


2.0:
 - New editor.
    - Unified all controls into one window.
    - Completely customised look - compatible with both Unity light and dark skin.
    - Keyboard authoring interface in addition to drag &amp;amp; drop.
 - Debugger upgrade.
    - Remote debugging.
    - Tick and reset.
    - &quot;Unplug&quot; for debugger-only control.
    - Breakpoints.
    - Action overrides - override the return values of specified actions.
 - Decorator rewrite.
    - Deprecated old decorator.
       - Still compiles, but cannot be added.
    - Decorators are now control-type components.
       - No specific decorator handlers on agents.
       - Control is achieved via third connection socket.
    - Two initial decorator types: Repeater and Interrupter.
 - Asset restructuring.
 	- No more collections - for nesting, use paths in tree names.
 	- New serialization format - see Readme.txt for upgrade instructions.
    - Collections are gone. Use Unix-style path names for tree organisation.
 - IAgent.Tick (Tree, bool) changed to IAgent.Tick (Tree)
	- Init calls can now only be handled explicitly
 - Full coverage online documentation and other community resources.
 - Countless fixes and polish items.

1.5:
 - Added Tree.TickActive - indicating if a tree is currently executing a tick or if it has completed evaluation.
 - In-tick tree reset requests now result in a reset at the end of tree evaluation rather than an immediate one.
 - Removed the legacy compatibility assembly (for compatibility with pre-1.2 assets) from the default distribution.
 - Fixed &quot;X must be instantiated using the ScriptableObject.CreateInstance method instead of new X&quot; warnings.

1.4:
 - Fixed decorator incorrectly initializing on every returning tick when tick handler returned Running.
 - Fixed debugger view dependency on active tree editor - causing reported null reference exception.
 - Fixed missing scrollbars on browser window.
 - Reduced logging noise from debug builds.
 - Agent blueprints can now be MonoBehaviour based.
 - Clarified wording on &quot;library not loaded&quot;.
 - Now handling reset a bit cleverer - potential performance boost.
 - Changed the default success criteria of Parallel components from SuccessOrFailure to Success.
 - Added &quot;instant&quot; flag to components. Components marked instant will affect sequences and selectors when moving between child nodes. When a child node marked &quot;instant&quot; completes, rather than waiting for the next tree tick to tick the following child node, the sequence or selector does it immediately.
 - The compiler progress bar returns.
 - Editing a Behave asset now focuses the asset browser last instead of the tree editor.
 - Behave can now be installed in any subfolder of Assets - provided its internal folder structure remains intact.
 - Compilation speed improvements.
 - Enabled references across collection borders.
 - Added Tree.DataSize - returning the number of bytes used by a tree instance. This is also displayed in the debugger window.

1.3:
 - Fixed priority selector init flag resetting.
 - Fixed reference handling on tree renaming and deletion.
 - Fixed references still pointing at old collection post collection duplication.
 - Fixed compilation of actions and decorators with non-integral float parameters.
 - Fixed GUI list behaviours.
 - Fixed passing context back and forth between referenced trees and referrer.
 - Fixed reordering connections not causing save state to be set.
 - Various GUI tweaks.
 - Runtime optimisations.
 - Enabled scrolling of the tree list in the debugger window.
 - Exposed Tree.ReflectForwards.
 - Added Tree.ResetForwards.
 - Added agent blueprints - connecting to agent handlers through virtual methods rather than reflected handlers.
 - Made connections selectable in the tree editor via the connection nub.
 - Moved connection managing from the inspector to the tree editor, where it is more visible and handy.
 - Added support for disabling connections - for faster, less destructive debugging.
 - Double-click reference component to jump to referenced tree.
 - Changed &quot;Cannot update unregistered tree&quot; handling from an exception to an error message. Still need more info.
 - Now showing string and float parameters in the tree editor if either is set.

1.2:
 - Fixed release building.
 - Added the priority selector, introducing the API points:
    - int IAgent.SelectTopPriority (Tree sender, params int[] IDs);
    - enum BL[LibraryName].PriorityType { PriorityName, ..., Unknown };
 - Added support for branch contexts, introducing the API points:
    - enum BL[LibraryName].ContextType { ContextName, ..., Unknown };
    - int Tree.ActiveContext { get; }
 - Changed IAgent interface:
    - Tick (bool init, Tree sender) -&amp;gt; Tick (Tree sender, bool init)
 - Added &quot;Select asset&quot; button to the standard inspector.
 - Interface polish.

1.1:
 - Made compatible with Unity 3.0 - including ensuring that the 2.5-2.6.1 bug preventing compilation on Windows is fixed on the Unity side.
 - UI tweaks and polish.
 - Added the option to have return values of nodes be inverted.
 - Fixed compiler bug when facing sequence or selector with only one child node.
 - Renamed Library.Tree -&amp;gt; Library.InstantiateTree.
 - Added Tree.Tick () and Tree.Reset () methods using the IAgent instance given at instantiation of the tree.
 - Removed the abstract Library class.
 - Changed generated library class:
    - Trees -&amp;gt; TreeType.
    - Actions -&amp;gt; ActionType.
    - Decorators -&amp;gt; DecoratorType.
    - Tree InstantiateTree (int, IAgent) -&amp;gt; static Tree InstantiateTree (TreeType, IAgent)
    - int TreeID (Tree) -&amp;gt; static TreeType Type (Tree)
    - bool IsAction (int) -&amp;gt; static bool IsAction (int)
    - bool IsDecorator (int) -&amp;gt; static bool IsDecorator (int)
 - Upped editor performance.
 - New asset structure change with automatic import of Behave 1.0 assets.
 - Changed action and decorator handlers. These are now the handlers mapped:
    - public BehaveResult Init[Name][Action/Decorator] (Tree sender, string stringParameter, float floatParameter, IAgent agent, object data);
    - public BehaveResult Tick[Name][Action/Decorator] (Tree sender, string stringParameter, float floatParameter, IAgent agent, object data);
    - public void Reset[Name][Action/Decorator] (Tree sender, string stringParameter, float floatParameter, IAgent agent, object data);
    - public BehaveResult Init[Name][Action/Decorator] (Tree sender);
    - public BehaveResult Tick[Name][Action/Decorator] (Tree sender);
    - public void Reset[Name][Action/Decorator] (Tree sender);
    - public BehaveResult [Name][Action/Decorator] {get; set;}
 - Added support for collection duplication.
 - Moved debug rendering into the editor with its own dedicated debugger window, including actor listing.
 - Debugger now renders active sub-trees as well.

1.0:
 - Lots o fixes for Unity 2.5 compatibility.
 - Closer editor integration with new UI.
    - Component bar.
    - Node inspection.
 - Runtime tree debugging.
 - Direct mapping of action and delegate handlers via reflection.
 - Kitty demo.

0.3b:
 - Various tweaks to the editor UI.
 - Optimised the compiler.
 - Fixed the following editor bugs from the bug list:
    - When the editor scrips are recompiled and when the user enters and exits play mode, running editors will loose references, causing undetermined behaviour.
    - When a compile fails, the Behave compiler is locked and unusable – requiring a unity relaunch.
 - Implemented the following wishlist items:
    - Behaviour tree decorators.
    - Stand-alone edition of the Behave editor.
    - Behaviour tree debugging features.

0.2b:
 - Made the demo project a whole lot more interesting.
 - Implemented the editor wish list item: Ability to move trees between collections.
 - Various tweaks to the editor UI.
 - Fixed a ton of bugs in the compiler.
 - Fixed the following editor bugs from the bug list:
    - Not able to delete collections from library.
    - Not able to delete trees from library.
    - Not able to rename collections from library.
    - Not able to rename trees from library.
    - Missing &quot;tree has been changed, save changes?&quot; dialog.

0.1b:
 - Some documentation is available.
 - Compiler is now creating sensible output.
 - A simple test tree and script using it is provided with the demo.
 - Documentation is linked directly from the unity help menu.
 - Less spamming of the log with debug information.

Pre-release:
 - Magic happened. Behave was born.
&lt;/pre&gt;</description>
				<published>2013-10-06 00:00:00 +0200</published>
				<link>http://angryant.com/2013/10/06/Behave-2-1/</link>
			</item>
		
			<item>
				<title>Behave 2.0</title>
				<description>&lt;p&gt;In 2010 the Unity Asset Store launched with an editor extension already live. That extension was Behave 1. Three years later, after way too long a pause, I have finally gotten around to releasing version 2.0 of Behave.&lt;/p&gt;
&lt;p&gt;As you might have noticed, especially lately, I have had quite a few things going on &amp;#8211; not the least of which is my recent exit from Unity Technologies and entry into freelancing. This all meant not a lot of time for Behave.&lt;/p&gt;
&lt;p&gt;So anyway, this is what I was doing when I was not writing that Unity Hacks blog post you were waiting for.&lt;/p&gt;
&lt;h2&gt;Behave&lt;/h2&gt;
&lt;p&gt;If you have no idea what Behave is and don&amp;#8217;t feel like dropping by the &lt;a href=&quot;/behave&quot;&gt;subsection on this site&lt;/a&gt; dedicated to it, here is how it is defined on the Asset Store:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Behave is a system for designing, integrating and running behaviour logic using Behaviour Trees. At its core Behave has a drag-drop designer and a highly effective and flexible compiled runtime.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;No funky runtime data formats or interpretation. Designer &amp;#8594; Compiler &amp;#8594; Your code.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;What is the use of a workflow extension without proper rapid iteration tools? Connect the visual debugger with break, step, reset, breakpoints and overrides directly to your project in the editor or on your target device.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;Update&lt;/strong&gt;: An introductory video to Behave 2 is now available:&lt;/p&gt;
&lt;p&gt;&lt;iframe width=&quot;600&quot; height=&quot;400&quot; src=&quot;//www.youtube.com/embed/vcsFjM-cw9k&quot; frameborder=&quot;0&quot; allowfullscreen&gt;&lt;/iframe&gt;&lt;/p&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2&gt;Future&lt;/h2&gt;
&lt;p&gt;Part of the challenge with any project is always to fight feature creep. This was very much also the case with Behave 2, so don&amp;#8217;t worry &amp;#8211; I have plenty of improvements to come. Not saying that this build is broken though &amp;#8211; go get it!&lt;/p&gt;
&lt;h2&gt;License&lt;/h2&gt;
&lt;p&gt;Unlike Behave 1, version 2 is a paid package. Aside from having gone freelance and needing a financial basis to keep up support for the software, this also had to be done as the Asset Store long ago banned the use of custom licenses.&lt;/p&gt;
&lt;p&gt;This, of-course posed a bit of a problem for Behave 1&amp;#8217;s default &amp;#8220;free if you show the splash&amp;#8221; license. Fortunately the Asset Store team members are merciful gods and I got a veeery long grace period to beat Behave into compliance.&lt;/p&gt;
&lt;p&gt;Included in the license is also access to a private community and internal support resources &amp;#8211; including the beta list.&lt;/p&gt;
&lt;h2&gt;Launch&lt;/h2&gt;
&lt;p&gt;For a limited time after launch, Behave 2 will be available at a flat discount of 50%. Additionally, if you happen to bump into me at Unite 2013 in Vancouver next week, you can slip me your business card and partake in the draw for one of &lt;strong&gt;three free Behave 2 licenses&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;If you already purchased a copy of Behave 2 and win a free copy, I&amp;#8217;ll refund you the purchase amount.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Update&lt;/strong&gt;: Details of the Unite license draw are available &lt;a href=&quot;/unite2013&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;Changes&lt;/h2&gt;
&lt;p&gt;So if you are a Behave 1 user and you are wondering what exactly is under the hood, I included the full Behave changelog below.&lt;/p&gt;
&lt;p&gt;Now you might go &amp;#8220;1.5? What the hell? Did I miss something?&amp;#8221;. No you did not. That version unfortunately did not ship, but was in stead rolled straight into 2.0. But hey, water and bridges, right? 2.0 is here baby!&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://u3d.as/5hA&quot;&gt;Behave 2 for Unity on the asset store&lt;/a&gt;.&lt;/p&gt;
&lt;pre&gt;Changelist:

2.0:
 - New editor.
	- Unified all controls into one window.
	- Completely customised look - compatible with both Unity light and dark skin.
	- Keyboard authoring interface in addition to drag &amp;amp; drop.
 - Debugger upgrade.
	- Remote debugging.
	- Tick and reset.
	- &quot;Unplug&quot; for debugger-only control.
	- Breakpoints.
	- Action overrides - override the return values of specified actions.
 - Decorator rewrite.
	- Deprecated old decorator.
	   - Still compiles, but cannot be added.
	- Decorators are now control-type components.
	   - No specific decorator handlers on agents.
	   - Control is achieved via third connection socket.
	- Two initial decorator types: Repeater and Interrupter.
 - Asset restructuring.
	- No more collections - for nesting, use paths in tree names.
	- New serialization format - see Readme.txt for upgrade instructions.
	- Collections are gone. Use Unix-style path names for tree organisation.
 - IAgent.Tick (Tree, bool) changed to IAgent.Tick (Tree)
	- Init calls can now only be handled explicitly
 - Full coverage online documentation and other community resources.
 - Countless fixes and polish items.

1.5:
 - Added Tree.TickActive - indicating if a tree is currently executing a tick or if it has completed evaluation.
 - In-tick tree reset requests now result in a reset at the end of tree evaluation rather than an immediate one.
 - Removed the legacy compatibility assembly (for compatibility with pre-1.2 assets) from the default distribution.
 - Fixed &quot;X must be instantiated using the ScriptableObject.CreateInstance method instead of new X&quot; warnings.

1.4:
 - Fixed decorator incorrectly initializing on every returning tick when tick handler returned Running.
 - Fixed debugger view dependency on active tree editor - causing reported null reference exception.
 - Fixed missing scrollbars on browser window.
 - Reduced logging noise from debug builds.
 - Agent blueprints can now be MonoBehaviour based.
 - Clarified wording on &quot;library not loaded&quot;.
 - Now handling reset a bit cleverer - potential performance boost.
 - Changed the default success criteria of Parallel components from SuccessOrFailure to Success.
 - Added &quot;instant&quot; flag to components. Components marked instant will affect sequences and selectors when moving between child nodes. When a child node marked &quot;instant&quot; completes, rather than waiting for the next tree tick to tick the following child node, the sequence or selector does it immediately.
 - The compiler progress bar returns.
 - Editing a Behave asset now focuses the asset browser last instead of the tree editor.
 - Behave can now be installed in any subfolder of Assets - provided its internal folder structure remains intact.
 - Compilation speed improvements.
 - Enabled references across collection borders.
 - Added Tree.DataSize - returning the number of bytes used by a tree instance. This is also displayed in the debugger window.

1.3:
 - Fixed priority selector init flag resetting.
 - Fixed reference handling on tree renaming and deletion.
 - Fixed references still pointing at old collection post collection duplication.
 - Fixed compilation of actions and decorators with non-integral float parameters.
 - Fixed GUI list behaviours.
 - Fixed passing context back and forth between referenced trees and referrer.
 - Fixed reordering connections not causing save state to be set.
 - Various GUI tweaks.
 - Runtime optimisations.
 - Enabled scrolling of the tree list in the debugger window.
 - Exposed Tree.ReflectForwards.
 - Added Tree.ResetForwards.
 - Added agent blueprints - connecting to agent handlers through virtual methods rather than reflected handlers.
 - Made connections selectable in the tree editor via the connection nub.
 - Moved connection managing from the inspector to the tree editor, where it is more visible and handy.
 - Added support for disabling connections - for faster, less destructive debugging.
 - Double-click reference component to jump to referenced tree.
 - Changed &quot;Cannot update unregistered tree&quot; handling from an exception to an error message. Still need more info.
 - Now showing string and float parameters in the tree editor if either is set.

1.2:
 - Fixed release building.
 - Added the priority selector, introducing the API points:
	- int IAgent.SelectTopPriority (Tree sender, params int[] IDs);
	- enum BL[LibraryName].PriorityType { PriorityName, ..., Unknown };
 - Added support for branch contexts, introducing the API points:
	- enum BL[LibraryName].ContextType { ContextName, ..., Unknown };
	- int Tree.ActiveContext { get; }
 - Changed IAgent interface:
	- Tick (bool init, Tree sender) -&amp;gt; Tick (Tree sender, bool init)
 - Added &quot;Select asset&quot; button to the standard inspector.
 - Interface polish.

1.1:
 - Made compatible with Unity 3.0 - including ensuring that the 2.5-2.6.1 bug preventing compilation on Windows is fixed on the Unity side.
 - UI tweaks and polish.
 - Added the option to have return values of nodes be inverted.
 - Fixed compiler bug when facing sequence or selector with only one child node.
 - Renamed Library.Tree -&amp;gt; Library.InstantiateTree.
 - Added Tree.Tick () and Tree.Reset () methods using the IAgent instance given at instantiation of the tree.
 - Removed the abstract Library class.
 - Changed generated library class:
	- Trees -&amp;gt; TreeType.
	- Actions -&amp;gt; ActionType.
	- Decorators -&amp;gt; DecoratorType.
	- Tree InstantiateTree (int, IAgent) -&amp;gt; static Tree InstantiateTree (TreeType, IAgent)
	- int TreeID (Tree) -&amp;gt; static TreeType Type (Tree)
	- bool IsAction (int) -&amp;gt; static bool IsAction (int)
	- bool IsDecorator (int) -&amp;gt; static bool IsDecorator (int)
 - Upped editor performance.
 - New asset structure change with automatic import of Behave 1.0 assets.
 - Changed action and decorator handlers. These are now the handlers mapped:
	- public BehaveResult Init[Name][Action/Decorator] (Tree sender, string stringParameter, float floatParameter, IAgent agent, object data);
	- public BehaveResult Tick[Name][Action/Decorator] (Tree sender, string stringParameter, float floatParameter, IAgent agent, object data);
	- public void Reset[Name][Action/Decorator] (Tree sender, string stringParameter, float floatParameter, IAgent agent, object data);
	- public BehaveResult Init[Name][Action/Decorator] (Tree sender);
	- public BehaveResult Tick[Name][Action/Decorator] (Tree sender);
	- public void Reset[Name][Action/Decorator] (Tree sender);
	- public BehaveResult [Name][Action/Decorator] {get; set;}
 - Added support for collection duplication.
 - Moved debug rendering into the editor with its own dedicated debugger window, including actor listing.
 - Debugger now renders active sub-trees as well.

1.0:
 - Lots o fixes for Unity 2.5 compatibility.
 - Closer editor integration with new UI.
	- Component bar.
	- Node inspection.
 - Runtime tree debugging.
 - Direct mapping of action and delegate handlers via reflection.
 - Kitty demo.

0.3b:
 - Various tweaks to the editor UI.
 - Optimised the compiler.
 - Fixed the following editor bugs from the bug list:
	- When the editor scrips are recompiled and when the user enters and exits play mode, running editors will loose references, causing undetermined behaviour.
	- When a compile fails, the Behave compiler is locked and unusable – requiring a unity relaunch.
 - Implemented the following wishlist items:
	- Behaviour tree decorators.
	- Stand-alone edition of the Behave editor.
	- Behaviour tree debugging features.

0.2b:
 - Made the demo project a whole lot more interesting.
 - Implemented the editor wish list item: Ability to move trees between collections.
 - Various tweaks to the editor UI.
 - Fixed a ton of bugs in the compiler.
 - Fixed the following editor bugs from the bug list:
	- Not able to delete collections from library.
	- Not able to delete trees from library.
	- Not able to rename collections from library.
	- Not able to rename trees from library.
	- Missing &quot;tree has been changed, save changes?&quot; dialog.

0.1b:
 - Some documentation is available.
 - Compiler is now creating sensible output.
 - A simple test tree and script using it is provided with the demo.
 - Documentation is linked directly from the unity help menu.
 - Less spamming of the log with debug information.

Pre-release:
 - Magic happened. Behave was born.&lt;/pre&gt;</description>
				<published>2013-08-25 00:00:00 +0200</published>
				<link>http://angryant.com/2013/08/25/Behave-2-0/</link>
			</item>
		
			<item>
				<title>Unity Hacks: Dual sticks</title>
				<description>&lt;p&gt;This is my third post in what looks like is going to turn into &lt;a href=&quot;http://angryant.com/2013/07/19/Unity-Hacks-Touch-gestures/&quot;&gt;a series&lt;/a&gt;, examining parts of the example project I provided for the Unity Hacks presentation &amp;#8211; delivered at a couple of the Unite conferences this year.&lt;/p&gt;
&lt;p&gt;You can find the project and a recording of the presentation in the &lt;a href=&quot;/videos&quot;&gt;videos&lt;/a&gt; section of this site.&lt;/p&gt;
&lt;h1&gt;DualControls&lt;/h1&gt;
&lt;p&gt;The &lt;a href=&quot;https://github.com/AngryAnt/UnityHacks/blob/master/Assets/Standard%20Assets/Input/DualControls.cs&quot;&gt;DualControls&lt;/a&gt; interface has a very straight forward purpose: Provide a 2 &amp;#215; 2 axis input interface across platforms and compatible units. This is exposed via the DualControls.Left and DualControls.Right accessors &amp;#8211; each returning a Vector2.&lt;/p&gt;
&lt;p&gt;Supported out of the box is:&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;&lt;span class=&quot;caps&quot;&gt;WASD&lt;/span&gt; + mouse.&lt;/li&gt;
	&lt;li&gt;Xbox360 controller (windows-only)&lt;/li&gt;
	&lt;li&gt;ps3 controller (OS X-only)&lt;/li&gt;
	&lt;li&gt;Shadowgun-style touch controls (left/right screen split)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;However abstraction is relaxed enough that virtual sticks or alternative input like the leap motion could be added fairly easily (assuming you have a means of capturing that input data in the first place).&lt;/p&gt;
&lt;h1&gt;Controllers&lt;/h1&gt;
&lt;p&gt;So controllers are not exactly nicely wrapped up in the current version of Unity. Which ungodly hack did I have to apply to get them to play along with just working out of the box in an easily installable package? It is actually not so bad. However I had to concede to some compromises up front. Basically when it comes to joysticks and controllers, you generally have two complications: the hardware itself and the driver.&lt;/p&gt;
&lt;p&gt;So? What is so bad about that? Well, in a perfect world you had one driver for each controller type or at least all the drivers for the same hardware would map the buttons and axes in the same way, right?&lt;/p&gt;
&lt;p&gt;Enter: This world. For every controller you always have at least two drivers set up differently: One for OS X and one for Windows (the Linux one often being based on the Windows one as I understand it). Why would anyone be content with just two drivers though? There exists a good number of different packages and open source solutions, vendor and OS provided drivers for the different controllers.&lt;/p&gt;
&lt;p&gt;The way these are differentiated in the Unity runtime is via the joystick name string &amp;#8211; as accessible via Input.GetJoystickNames.&lt;/p&gt;
&lt;p&gt;This is what &lt;a href=&quot;https://github.com/AngryAnt/UnityHacks/blob/master/Assets/Standard%20Assets/Input/DualControls.cs&quot;&gt;DualControls&lt;/a&gt; checks for in its Update handler. If a new joystick is found connected, it runs the name by the controller wiring and activates the appropriate controller (optionally if accepted by a callback).&lt;/p&gt;
&lt;p&gt;Per default I have compromised and only provided wiring for the Xbox360 controller on Windows and the ps3 controller on OS X. This particular configuration stems from the fact that those OS&amp;#8217;es ship with a pre-installed default driver for those controllers.&lt;/p&gt;
&lt;p&gt;Microsoft clearly should support their own hardware and I&amp;#8217;m assuming that Apple just supports the ps3 controller because it&amp;#8217;s hardware from a direct Microsoft competitor.&lt;/p&gt;
&lt;p&gt;However, again, the abstraction is loose enough that if you want to, you should be able to add support for more controllers fairly easily. See the end of the &lt;a href=&quot;https://github.com/AngryAnt/UnityHacks/blob/master/Assets/Standard%20Assets/Input/Controllers.cs&quot;&gt;Controllers.cs&lt;/a&gt; script for that.&lt;/p&gt;
&lt;p&gt;Oh, but I almost forgot the hack: As I am using the standard Unity Input &lt;span class=&quot;caps&quot;&gt;API&lt;/span&gt; for this, the input manager needs configuring, right? So with no &lt;span class=&quot;caps&quot;&gt;API&lt;/span&gt; for it, how do you go about doing that for a package?&lt;/p&gt;
&lt;p&gt;You use the AssetDatabase &lt;span class=&quot;caps&quot;&gt;API&lt;/span&gt; to load ProjectSettings/InputManager.asset and then the ScriptableObject &lt;span class=&quot;caps&quot;&gt;API&lt;/span&gt; to modify it.
&lt;script src=&#39;https://gist.github.com/6151366.js?file=&#39;&gt;&lt;/script&gt;&lt;div&gt;&lt;noscript&gt;&lt;pre&gt;&lt;code&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/noscript&gt;&lt;/div&gt;&lt;/p&gt;
&lt;p&gt;I hope you find this useful. For more details, these are the Unity Hacks scripts related to this post:&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;&lt;a href=&quot;https://github.com/AngryAnt/UnityHacks/blob/master/Assets/Standard%20Assets/Input/DualControls.cs&quot;&gt;DualControls.cs&lt;/a&gt;&lt;/li&gt;
	&lt;li&gt;&lt;a href=&quot;https://github.com/AngryAnt/UnityHacks/blob/master/Assets/Standard%20Assets/Input/DualControls.Stick.cs&quot;&gt;DualControls.Stick.cs&lt;/a&gt;&lt;/li&gt;
	&lt;li&gt;&lt;a href=&quot;https://github.com/AngryAnt/UnityHacks/blob/master/Assets/Standard%20Assets/Input/Controllers.cs&quot;&gt;Controllers.cs&lt;/a&gt;&lt;/li&gt;
	&lt;li&gt;&lt;a href=&quot;https://github.com/AngryAnt/UnityHacks/blob/master/Assets/Standard%20Assets/Input/ControllerInput.cs&quot;&gt;ControllerInput.cs&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;


</description>
				<published>2013-08-04 00:00:00 +0200</published>
				<link>http://angryant.com/2013/08/04/Unity-Hacks-Dual-sticks/</link>
			</item>
		
			<item>
				<title>Unity Hacks: Cameras</title>
				<description>&lt;p&gt;In my &lt;a href=&quot;http://angryant.com/2013/07/19/Unity-Hacks-Touch-gestures/&quot;&gt;effort to pick apart&lt;/a&gt; the &amp;#8220;Unity Hacks&amp;#8221; project as made available, along with a recording of the presentation, in the &lt;a href=&quot;/videos&quot;&gt;videos&lt;/a&gt; section, I now focus on the camera system.&lt;/p&gt;
&lt;h1&gt;Overview&lt;/h1&gt;
&lt;p&gt;Like the other new components I was preparing for the new standard assets, a key part of this setup is modularity and versatility. This is why I from the start chose to have camera handling values maintained via the transform tree &amp;#8211; as opposed to maintaining internal values to overwrite the transform values when updated.&lt;/p&gt;
&lt;p&gt;This way, not only can camera logic be broken down into several components which can be optional or replaced, but co-operation between the camera system, animations and any other systems which could apply relative transformation, is much easier.&lt;/p&gt;
&lt;p&gt;As this approach would be placing a certain requirement on the transform tree structure surrounding the camera in any case, I opted to go for greatest amount of possible detail vs. smallest impact. The structure therefore requires a three layers deep transform tree.&lt;/p&gt;
&lt;p&gt;The root of the tree is designated the horizontal hinge. It takes care of movement in all three dimensions as well as rotation on the horizontal plane. The immediate child of this transform is referred to as the vertical hinge. This transform is expected to not move and will have its position reset every frame to enforce this. In stead, the vertical hinge is only responsible for rotation on the vertical plane.&lt;/p&gt;
&lt;p&gt;The final transform, the child of the vertical hinge, is expected to not rotate and only move on its relative z-axis. This effectively makes it the zoom component of the rig. The GameObject of this transform is the one holding the camera component.&lt;/p&gt;
&lt;h1&gt;DualHingeCamera&lt;/h1&gt;
&lt;p&gt;Maintaining and abstracting this setup is the &lt;a href=&quot;https://github.com/AngryAnt/UnityHacks/blob/master/Assets/Standard%20Assets/Camera/DualHingeCamera.cs&quot;&gt;DualHingeCamera&lt;/a&gt; component. With reference to the different transforms of the rig, this component maintains the setup by apply three targets: targetOffset, targetHorizontalRotation and targetVerticalRotation. These are set by controller scripts and applied via constrained speed and offset variables.&lt;/p&gt;
&lt;p&gt;Vertical rotation is clamped and damped by the verticalSpan animation curve variable. As explained in the presentation, the time value of the most extreme animation keys specify the vertical angles (relative to a vector pointing backwards from the rig root) at which vertical rotation is clamped.&lt;/p&gt;
&lt;p&gt;The height of the curve at any point specifies the scale of the update speed &amp;#8211; as the camera moves through that angle and further towards the end of the half of the curve it is on. As in: If the angle is above the middle of the vertical span and the camera is moving further up, speed is scaled according to the curve, but if it is moving down then no scale is applied. The inverse if of-course true as well. The effect, assuming the curve is not flat, is a smooth limit rather than a hard clamp.&lt;/p&gt;
&lt;h1&gt;Control&lt;/h1&gt;
&lt;p&gt;The base for any of the example camera behaviours supplied with the project is the &lt;a href=&quot;https://github.com/AngryAnt/UnityHacks/blob/master/Assets/Standard%20Assets/Camera/CameraBehaviour.cs&quot;&gt;CameraBehaviour&lt;/a&gt; component. This supplies wrapping of access to the DualHingeCamera, as well as a bit of default handling &amp;#8211; such as automatically updating the camera activity tracking when the camera moves. It also offers up the MoveCamera method as a common interface for input scripts to apply movement instructions.&lt;/p&gt;
&lt;p&gt;One of the most simple examples of a camera behaviour is the &lt;a href=&quot;https://github.com/AngryAnt/UnityHacks/blob/master/Assets/Standard%20Assets/Camera/OrbitCamera.cs&quot;&gt;OrbitCamera&lt;/a&gt;. This camera simply takes the movement instructions (a Vector2) and apply them to the target horizontal and vertical rotation. The result is the familiar behaviour of being able to rotate around a subject, while rotating up and down within the clamped span.&lt;/p&gt;
&lt;p&gt;There are several more camera behaviours in the project (which you should take a look at) and they are demonstrated in an example scene as well as within the presentation. However as a last example, I want to point out the &lt;a href=&quot;https://github.com/AngryAnt/UnityHacks/blob/master/Assets/Standard%20Assets/Camera/TravelCamera.cs&quot;&gt;TravelCamera&lt;/a&gt; component. Unlike the others, this does not inherit from CameraBehaviour &amp;#8211; nor does it directly affect its rotation or position. In stead, it holds a simple piece of logic which enables and disables other behaviours, based on input activity. The result should be a behaviour somewhere between that seen in Journey and that of the Assassins Creed games.&lt;/p&gt;
&lt;p&gt;I tried to keep this post short, but I hope you still find this useful and decide to build on the system. In any case, here are direct links to the resources covered in the post:&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;&lt;a href=&quot;https://github.com/AngryAnt/UnityHacks/blob/master/Assets/Standard%20Assets/Camera/DualHingeCamera.cs&quot;&gt;DualHingeCamera.cs&lt;/a&gt;&lt;/li&gt;
	&lt;li&gt;&lt;a href=&quot;https://github.com/AngryAnt/UnityHacks/blob/master/Assets/Standard%20Assets/Camera/CameraBehaviour.cs&quot;&gt;CameraBehaviour.cs&lt;/a&gt;&lt;/li&gt;
	&lt;li&gt;&lt;a href=&quot;https://github.com/AngryAnt/UnityHacks/blob/master/Assets/Standard%20Assets/Camera/OrbitCamera.cs&quot;&gt;OrbitCamera.cs&lt;/a&gt;&lt;/li&gt;
	&lt;li&gt;&lt;a href=&quot;https://github.com/AngryAnt/UnityHacks/blob/master/Assets/Standard%20Assets/Camera/TravelCamera.cs&quot;&gt;TravelCamera.cs&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;


</description>
				<published>2013-07-28 00:00:00 +0200</published>
				<link>http://angryant.com/2013/07/28/Unity-Hacks-Cameras/</link>
			</item>
		
			<item>
				<title>Unity Hacks: Touch gestures</title>
				<description>&lt;p&gt;So earlier this month I could finally push the Unity Hacks example code and slide show project &lt;a href=&quot;https://github.com/AngryAnt/UnityHacks/&quot;&gt;live&lt;/a&gt; &amp;#8211; after one of the &lt;a href=&quot;/videos&quot;&gt;videos&lt;/a&gt; of the presentation was pushed live.&lt;/p&gt;
&lt;p&gt;The project is a pretty big treasure trove of handy scripts though and I didn&amp;#8217;t like just tossing it out there and let people pick it apart on their own(feel free to go excavating if you learn better that way though). Therefore I plan for the next couple of posts here to cover various bits and bops from that project.&lt;/p&gt;
&lt;p&gt;Note that a bunch of these scripts &amp;#8211; for instance the one I cover today &amp;#8211; was at the time I was still at Unity Technologies slated for the new Standard Assets shipped with Unity. Since I left, I obviously can&amp;#8217;t say if or when these are shipped and in which form. What&amp;#8217;s in the Unity Hacks project is pretty much the last iteration I did on them before leaving.&lt;/p&gt;
&lt;h1&gt;TouchGestures.cs&lt;/h1&gt;
&lt;p&gt;The purpose of this component is to facilitate easy handling of common gestures on touch enabled devices. With one instance of the component placed in a scene, you can specify which gestures to track, some key measuring caps with sensible defaults and a list of MonoBehaviours interested in receiving notification when a gesture has been detected.&lt;/p&gt;
&lt;p&gt;An example of how to handle gesture tracking event can be found in this particular snippet from the presentation Control.cs script from Unity Hacks:
&lt;script src=&#39;https://gist.github.com/6039082.js?file=&#39;&gt;&lt;/script&gt;&lt;div&gt;&lt;noscript&gt;&lt;pre&gt;&lt;code&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/noscript&gt;&lt;/div&gt;&lt;/p&gt;
&lt;p&gt;This handler responds to single swipes, checking for strictly left or right swipes, handling them by progressing to the next slide/build step or jumping to the previous slide.&lt;/p&gt;
&lt;p&gt;Great, so what do the different configuration values mean? First, let&amp;#8217;s take a look at the tracking clamps:&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;maxDuration: If a tracked touch remains active for longer than this time, it is no longer considered as part of a gesture. This avoids misinterpreting drags or virtual joysticks.&lt;/li&gt;
	&lt;li&gt;min[Pinch/Swipe]ScreenTravel: How much of the normalized screen size should a pinch or a swipe travel before it is considered valid? This avoids misinterpreting taps as mini pinches or swipes.&lt;/li&gt;
	&lt;li&gt;maxTapScreenTravel: What is the maximum normalized screen movement a tap gesture can have before it is no longer considered a tap?&lt;/li&gt;
	&lt;li&gt;maxTapDuration: For how long can a tracked touch be live before it is no longer considered a tap?&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The last elements are somewhat less finicky and tweak happy, though the tracking clamps should have sensible default values:&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;receivers: The list of MonoBehaviours interested in receiving a callback when a gesture has been identified.&lt;/li&gt;
	&lt;li&gt;trackingMask: This is a bitmask identifying which gestures you are interested in tracking. If you only need to deal with swipes, there is no need to spend time tracking any other gestures. Note that in order for this field to be set correctly, it is important that the custom inspector for the TouchGestures component is used.&lt;/li&gt;
	&lt;li&gt;trackMultiple: Should the gesture tracker allow multiple gestures to occur at the same time? Like a pinch and a swipe in different ends of the screen.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;And that is about it! You should have what you need to start using the TouchGestures component. Hopefully you will find it useful.&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;&lt;a href=&quot;https://github.com/AngryAnt/UnityHacks/blob/master/Assets/Standard%20Assets/Input/TouchGestures.cs&quot;&gt;TouchGestures.cs&lt;/a&gt;&lt;/li&gt;
	&lt;li&gt;&lt;a href=&quot;https://github.com/AngryAnt/UnityHacks/blob/master/Assets/Standard%20Assets/Editor/TouchGesturesInspector.cs&quot;&gt;TouchGesturesInspector.cs&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description>
				<published>2013-07-19 00:00:00 +0200</published>
				<link>http://angryant.com/2013/07/19/Unity-Hacks-Touch-gestures/</link>
			</item>
		
			<item>
				<title>OnRenderTextureGUI</title>
				<description>&lt;p&gt;Have you ever wanted to apply a full-screen effect to your &lt;span class=&quot;caps&quot;&gt;GUI&lt;/span&gt; without having to completely restructuring the way you set up your OnGUI structure? Or how about rendering text and &lt;span class=&quot;caps&quot;&gt;GUI&lt;/span&gt; controls onto in-scene virtual screens and objects? Yea me too.&lt;/p&gt;
&lt;p&gt;So a couple of years ago I did a friday project investigating the possibility of a setup like this. What I wanted was a Doom 3 &amp;#8211; style in-game numpad, responding to mouse clicks. Unfortunately I couldn&amp;#8217;t get there 100% and in a nice and straight-forward way, so I abandoned it with no further time spent.&lt;/p&gt;
&lt;p&gt;The specific problem was that while I could get my &lt;span class=&quot;caps&quot;&gt;GUI&lt;/span&gt; to render to the object just fine, the &lt;span class=&quot;caps&quot;&gt;GUI&lt;/span&gt; system had no way of injecting events or modifying existing ones. This meant that if I wanted &lt;span class=&quot;caps&quot;&gt;GUI&lt;/span&gt; to respond to events, I would have to bypass the &lt;span class=&quot;caps&quot;&gt;GUI&lt;/span&gt; event system and effectively rewrite the basic &lt;span class=&quot;caps&quot;&gt;GUI&lt;/span&gt; controls. That failed my &amp;#8220;nice and straight-forward&amp;#8221; requirement.&lt;/p&gt;
&lt;p&gt;However a while later, I came across a similar need: I had a project where the screen was warped slightly fish-eye, to give an impression of an old-school &lt;span class=&quot;caps&quot;&gt;CRT&lt;/span&gt; display. It looked great, except the &lt;span class=&quot;caps&quot;&gt;GUI&lt;/span&gt; was just rendered on top of everything &amp;#8211; as per usual &amp;#8211; with no warping. Since the &lt;span class=&quot;caps&quot;&gt;GUI&lt;/span&gt; was non-interactive, there was no down-side to using the approach I had come up with before to include the &lt;span class=&quot;caps&quot;&gt;GUI&lt;/span&gt; in the full-screen effect rendering.&lt;/p&gt;
&lt;p&gt;It was a snap to apply, I had no required changes to my general OnGUI structure and the result looked great. This setup also came in handy when I was working with the Oculus Rift &amp;#8211; rendering the &lt;span class=&quot;caps&quot;&gt;GUI&lt;/span&gt; on a plane, rendered always on top, in front of the Oculus cameras.&lt;/p&gt;
&lt;p&gt;So what is the idea then? Well it is quite straight forward: OnGUI is invoked multiple times each frame (once per event) &amp;#8211; at least twice &amp;#8211; unless layouting has been disabled on the MonoBehaviour. The last event of the frame is the repaint event. In this, all resolved controls render to the active context. Which fortunately can be set by render textures.&lt;/p&gt;
&lt;p&gt;The trick therefore becomes:
&lt;script src=&#39;https://gist.github.com/5984299.js?file=&#39;&gt;&lt;/script&gt;&lt;div&gt;&lt;noscript&gt;&lt;pre&gt;&lt;code&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/noscript&gt;&lt;/div&gt;&lt;/p&gt;
&lt;p&gt;Remember that this is not immediately useful if you need interactive &lt;span class=&quot;caps&quot;&gt;GUI&lt;/span&gt; as this would require work to handle input gathered from the regular UnityEngine.Input &lt;span class=&quot;caps&quot;&gt;API&lt;/span&gt;. Nonetheless it will give you for instance a scrolling screen of text on an in-game monitor.&lt;/p&gt;
&lt;p&gt;I hope you find it useful!&lt;/p&gt;</description>
				<published>2013-07-17 00:00:00 +0200</published>
				<link>http://angryant.com/2013/07/17/OnRenderTextureGUI/</link>
			</item>
		
			<item>
				<title>Unite 13 video "Unity Hacks" available</title>
				<description>&lt;p&gt;The &amp;#8220;Unity Hacks&amp;#8221; presentation, containing a good chunk of practical tips &amp;amp; tricks and example code, I did for Unite 13 Korea, Japan, China and Nordic is now available as video and presentation/examples download. The specific video recording is the one from Unite Japan.&lt;/p&gt;
&lt;p&gt;Find link to video, presentation and examples in the &lt;a href=&quot;/videos&quot;&gt;videos&lt;/a&gt; section.&lt;/p&gt;</description>
				<published>2013-07-05 00:00:00 +0200</published>
				<link>http://angryant.com/2013/07/05/Unite-13-video-Unity-Hacks-available/</link>
			</item>
		
	</channel>
</rss>
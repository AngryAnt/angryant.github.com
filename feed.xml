<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
	<channel>
		<title>AngryAnt.com/feed</title>
		<description>Random scribblings at random intervals</description>
		<link>http://angryant.com</link>
		
			<item>
				<title>Behave 2.0</title>
				<description>&lt;p&gt;In 2010 the Unity Asset Store launched with an editor extension already live. That extension was Behave 1. Three years later, after way too long a pause, I have finally gotten around to releasing version 2.0 of Behave.&lt;/p&gt;
&lt;p&gt;As you might have noticed, especially lately, I have had quite a few things going on &amp;#8211; not the least of which is my recent exit from Unity Technologies and entry into freelancing. This all meant not a lot of time for Behave.&lt;/p&gt;
&lt;p&gt;So anyway, this is what I was doing when I was not writing that Unity Hacks blog post you were waiting for.&lt;/p&gt;
&lt;h2&gt;Behave&lt;/h2&gt;
&lt;p&gt;If you have no idea what Behave is and don&amp;#8217;t feel like dropping by the subsection on this site (which I am updating soon&amp;#8482;) dedicated to it, here is how it is defined on the Asset Store:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Behave is a system for designing, integrating and running behaviour logic using Behaviour Trees. At its core Behave has a drag-drop designer and a highly effective and flexible compiled runtime.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;No funky runtime data formats or interpretation. Designer &amp;#8594; Compiler &amp;#8594; Your code.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;What is the use of a workflow extension without proper rapid iteration tools? Connect the visual debugger with break, step, reset, breakpoints and overrides directly to your project in the editor or on your target device.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&quot;/resources/posts/2013-08-23-Behave-2-0/Behave2.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;h2&gt;Future&lt;/h2&gt;
&lt;p&gt;Part of the challenge with any project is always to fight feature creep. This was very much also the case with Behave 2, so don&amp;#8217;t worry &amp;#8211; I have plenty of improvements to come. Not saying that this build is broken though &amp;#8211; go get it!&lt;/p&gt;
&lt;h2&gt;License&lt;/h2&gt;
&lt;p&gt;Unlike Behave 1, version 2 is a paid package. Aside from having gone freelance and needing a financial basis to keep up support for the software, this also had to be done as the Asset Store long ago banned the use of custom licenses.&lt;/p&gt;
&lt;p&gt;This, of-course posed a bit of a problem for Behave 1&amp;#8217;s default &amp;#8220;free if you show the splash&amp;#8221; license. Fortunately the Asset Store team members are merciful gods and I got a veeery long grace period to beat Behave into compliance.&lt;/p&gt;
&lt;p&gt;Included in the license is also access to a private community and internal support resources &amp;#8211; including the beta list.&lt;/p&gt;
&lt;h2&gt;Launch&lt;/h2&gt;
&lt;p&gt;For a limited time after launch, Behave 2 will be available at a flat discount of 50%. Additionally, if you happen to bump into me at Unite 2013 in Vancouver next week, you can slip me your business card and partake in the raffle for one of &lt;strong&gt;three free Behave 2 licenses&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;If you already purchased a copy of Behave 2 and win a free copy, I&amp;#8217;ll refund you the purchase amount.&lt;/p&gt;
&lt;h2&gt;Changes&lt;/h2&gt;
&lt;p&gt;So if you are a Behave 1 user and you are wondering what exactly is under the hood, I included the full Behave changelog below.&lt;/p&gt;
&lt;p&gt;Now you might go &amp;#8220;1.5? What the hell? Did I miss something?&amp;#8221;. No you did not. That version unfortunately did not ship, but was in stead rolled straight into 2.0. But hey, water and bridges, right? 2.0 is here baby!&lt;/p&gt;
&lt;pre&gt;Changelist:

2.0:
 - New editor.
    - Unified all controls into one window.
    - Completely customised look - compatible with both Unity light and dark skin.
    - Keyboard authoring interface in addition to drag &amp;amp; drop.
 - Debugger upgrade.
    - Remote debugging.
    - Tick and reset.
    - &quot;Unplug&quot; for debugger-only control.
    - Breakpoints.
    - Action overrides - override the return values of specified actions.
 - Decorator rewrite.
    - Deprecated old decorator.
       - Still compiles, but cannot be added.
    - Decorators are now control-type components.
       - No specific decorator handlers on agents.
       - Control is achieved via third connection socket.
    - Two initial decorator types: Repeater and Interrupter.
 - Asset restructuring.
    - No more collections - for nesting, use paths in tree names.
    - New serialization format - see Readme.txt for upgrade instructions.
    - Collections are gone. Use Unix-style path names for tree organisation.
 - IAgent.Tick (Tree, bool) changed to IAgent.Tick (Tree)
    - Init calls can now only be handled explicitly
 - Full coverage online documentation and other community resources.
 - Countless fixes and polish items.

1.5:
 - Added Tree.TickActive - indicating if a tree is currently executing a tick or if it has completed evaluation.
 - In-tick tree reset requests now result in a reset at the end of tree evaluation rather than an immediate one.
 - Removed the legacy compatibility assembly (for compatibility with pre-1.2 assets) from the default distribution.
 - Fixed &quot;X must be instantiated using the ScriptableObject.CreateInstance method instead of new X&quot; warnings.

1.4:
 - Fixed decorator incorrectly initializing on every returning tick when tick handler returned Running.
 - Fixed debugger view dependency on active tree editor - causing reported null reference exception.
 - Fixed missing scrollbars on browser window.
 - Reduced logging noise from debug builds.
 - Agent blueprints can now be MonoBehaviour based.
 - Clarified wording on &quot;library not loaded&quot;.
 - Now handling reset a bit cleverer - potential performance boost.
 - Changed the default success criteria of Parallel components from SuccessOrFailure to Success.
 - Added &quot;instant&quot; flag to components. Components marked instant will affect sequences and selectors when moving between child nodes. When a child node marked &quot;instant&quot; completes, rather than waiting for the next tree tick to tick the following child node, the sequence or selector does it immediately.
 - The compiler progress bar returns.
 - Editing a Behave asset now focuses the asset browser last instead of the tree editor.
 - Behave can now be installed in any subfolder of Assets - provided its internal folder structure remains intact.
 - Compilation speed improvements.
 - Enabled references across collection borders.
 - Added Tree.DataSize - returning the number of bytes used by a tree instance. This is also displayed in the debugger window.

1.3:
 - Fixed priority selector init flag resetting.
 - Fixed reference handling on tree renaming and deletion.
 - Fixed references still pointing at old collection post collection duplication.
 - Fixed compilation of actions and decorators with non-integral float parameters.
 - Fixed GUI list behaviours.
 - Fixed passing context back and forth between referenced trees and referrer.
 - Fixed reordering connections not causing save state to be set.
 - Various GUI tweaks.
 - Runtime optimisations.
 - Enabled scrolling of the tree list in the debugger window.
 - Exposed Tree.ReflectForwards.
 - Added Tree.ResetForwards.
 - Added agent blueprints - connecting to agent handlers through virtual methods rather than reflected handlers.
 - Made connections selectable in the tree editor via the connection nub.
 - Moved connection managing from the inspector to the tree editor, where it is more visible and handy.
 - Added support for disabling connections - for faster, less destructive debugging.
 - Double-click reference component to jump to referenced tree.
 - Changed &quot;Cannot update unregistered tree&quot; handling from an exception to an error message. Still need more info.
 - Now showing string and float parameters in the tree editor if either is set.

1.2:
 - Fixed release building.
 - Added the priority selector, introducing the API points:
    - int IAgent.SelectTopPriority (Tree sender, params int[] IDs);
    - enum BL[LibraryName].PriorityType { PriorityName, ..., Unknown };
 - Added support for branch contexts, introducing the API points:
    - enum BL[LibraryName].ContextType { ContextName, ..., Unknown };
    - int Tree.ActiveContext { get; }
 - Changed IAgent interface:
    - Tick (bool init, Tree sender) -&amp;gt; Tick (Tree sender, bool init)
 - Added &quot;Select asset&quot; button to the standard inspector.
 - Interface polish.

1.1:
 - Made compatible with Unity 3.0 - including ensuring that the 2.5-2.6.1 bug preventing compilation on Windows is fixed on the Unity side.
 - UI tweaks and polish.
 - Added the option to have return values of nodes be inverted.
 - Fixed compiler bug when facing sequence or selector with only one child node.
 - Renamed Library.Tree -&amp;gt; Library.InstantiateTree.
 - Added Tree.Tick () and Tree.Reset () methods using the IAgent instance given at instantiation of the tree.
 - Removed the abstract Library class.
 - Changed generated library class:
    - Trees -&amp;gt; TreeType.
    - Actions -&amp;gt; ActionType.
    - Decorators -&amp;gt; DecoratorType.
    - Tree InstantiateTree (int, IAgent) -&amp;gt; static Tree InstantiateTree (TreeType, IAgent)
    - int TreeID (Tree) -&amp;gt; static TreeType Type (Tree)
    - bool IsAction (int) -&amp;gt; static bool IsAction (int)
    - bool IsDecorator (int) -&amp;gt; static bool IsDecorator (int)
 - Upped editor performance.
 - New asset structure change with automatic import of Behave 1.0 assets.
 - Changed action and decorator handlers. These are now the handlers mapped:
    - public BehaveResult Init[Name][Action/Decorator] (Tree sender, string stringParameter, float floatParameter, IAgent agent, object data);
    - public BehaveResult Tick[Name][Action/Decorator] (Tree sender, string stringParameter, float floatParameter, IAgent agent, object data);
    - public void Reset[Name][Action/Decorator] (Tree sender, string stringParameter, float floatParameter, IAgent agent, object data);
    - public BehaveResult Init[Name][Action/Decorator] (Tree sender);
    - public BehaveResult Tick[Name][Action/Decorator] (Tree sender);
    - public void Reset[Name][Action/Decorator] (Tree sender);
    - public BehaveResult [Name][Action/Decorator] {get; set;}
 - Added support for collection duplication.
 - Moved debug rendering into the editor with its own dedicated debugger window, including actor listing.
 - Debugger now renders active sub-trees as well.

1.0:
 - Lots o fixes for Unity 2.5 compatibility.
 - Closer editor integration with new UI.
    - Component bar.
    - Node inspection.
 - Runtime tree debugging.
 - Direct mapping of action and delegate handlers via reflection.
 - Kitty demo.

0.3b:
 - Various tweaks to the editor UI.
 - Optimised the compiler.
 - Fixed the following editor bugs from the bug list:
    - When the editor scrips are recompiled and when the user enters and exits play mode, running editors will loose references, causing undetermined behaviour.
    - When a compile fails, the Behave compiler is locked and unusable – requiring a unity relaunch.
 - Implemented the following wishlist items:
    - Behaviour tree decorators.
    - Stand-alone edition of the Behave editor.
    - Behaviour tree debugging features.

0.2b:
 - Made the demo project a whole lot more interesting.
 - Implemented the editor wish list item: Ability to move trees between collections.
 - Various tweaks to the editor UI.
 - Fixed a ton of bugs in the compiler.
 - Fixed the following editor bugs from the bug list:
    - Not able to delete collections from library.
    - Not able to delete trees from library.
    - Not able to rename collections from library.
    - Not able to rename trees from library.
    - Missing &quot;tree has been changed, save changes?&quot; dialog.

0.1b:
 - Some documentation is available.
 - Compiler is now creating sensible output.
 - A simple test tree and script using it is provided with the demo.
 - Documentation is linked directly from the unity help menu.
 - Less spamming of the log with debug information.

Pre-release:
 - Magic happened. Behave was born.&lt;/pre&gt;</description>
				<published>2013-08-24 00:00:00 +0200</published>
				<link>http://angryant.com/2013/08/24/Behave-2-0/</link>
			</item>
		
			<item>
				<title>Unity Hacks: Dual sticks</title>
				<description>&lt;p&gt;This is my third post in what looks like is going to turn into &lt;a href=&quot;http://angryant.com/2013/07/19/Unity-Hacks-Touch-gestures/&quot;&gt;a series&lt;/a&gt;, examining parts of the example project I provided for the Unity Hacks presentation &amp;#8211; delivered at a couple of the Unite conferences this year.&lt;/p&gt;
&lt;p&gt;You can find the project and a recording of the presentation in the &lt;a href=&quot;/videos&quot;&gt;videos&lt;/a&gt; section of this site.&lt;/p&gt;
&lt;h1&gt;DualControls&lt;/h1&gt;
&lt;p&gt;The &lt;a href=&quot;https://github.com/AngryAnt/UnityHacks/blob/master/Assets/Standard%20Assets/Input/DualControls.cs&quot;&gt;DualControls&lt;/a&gt; interface has a very straight forward purpose: Provide a 2 &amp;#215; 2 axis input interface across platforms and compatible units. This is exposed via the DualControls.Left and DualControls.Right accessors &amp;#8211; each returning a Vector2.&lt;/p&gt;
&lt;p&gt;Supported out of the box is:&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;&lt;span class=&quot;caps&quot;&gt;WASD&lt;/span&gt; + mouse.&lt;/li&gt;
	&lt;li&gt;Xbox360 controller (windows-only)&lt;/li&gt;
	&lt;li&gt;ps3 controller (OS X-only)&lt;/li&gt;
	&lt;li&gt;Shadowgun-style touch controls (left/right screen split)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;However abstraction is relaxed enough that virtual sticks or alternative input like the leap motion could be added fairly easily (assuming you have a means of capturing that input data in the first place).&lt;/p&gt;
&lt;h1&gt;Controllers&lt;/h1&gt;
&lt;p&gt;So controllers are not exactly nicely wrapped up in the current version of Unity. Which ungodly hack did I have to apply to get them to play along with just working out of the box in an easily installable package? It is actually not so bad. However I had to concede to some compromises up front. Basically when it comes to joysticks and controllers, you generally have two complications: the hardware itself and the driver.&lt;/p&gt;
&lt;p&gt;So? What is so bad about that? Well, in a perfect world you had one driver for each controller type or at least all the drivers for the same hardware would map the buttons and axes in the same way, right?&lt;/p&gt;
&lt;p&gt;Enter: This world. For every controller you always have at least two drivers set up differently: One for OS X and one for Windows (the Linux one often being based on the Windows one as I understand it). Why would anyone be content with just two drivers though? There exists a good number of different packages and open source solutions, vendor and OS provided drivers for the different controllers.&lt;/p&gt;
&lt;p&gt;The way these are differentiated in the Unity runtime is via the joystick name string &amp;#8211; as accessible via Input.GetJoystickNames.&lt;/p&gt;
&lt;p&gt;This is what &lt;a href=&quot;https://github.com/AngryAnt/UnityHacks/blob/master/Assets/Standard%20Assets/Input/DualControls.cs&quot;&gt;DualControls&lt;/a&gt; checks for in its Update handler. If a new joystick is found connected, it runs the name by the controller wiring and activates the appropriate controller (optionally if accepted by a callback).&lt;/p&gt;
&lt;p&gt;Per default I have compromised and only provided wiring for the Xbox360 controller on Windows and the ps3 controller on OS X. This particular configuration stems from the fact that those OS&amp;#8217;es ship with a pre-installed default driver for those controllers.&lt;/p&gt;
&lt;p&gt;Microsoft clearly should support their own hardware and I&amp;#8217;m assuming that Apple just supports the ps3 controller because it&amp;#8217;s hardware from a direct Microsoft competitor.&lt;/p&gt;
&lt;p&gt;However, again, the abstraction is loose enough that if you want to, you should be able to add support for more controllers fairly easily. See the end of the &lt;a href=&quot;https://github.com/AngryAnt/UnityHacks/blob/master/Assets/Standard%20Assets/Input/Controllers.cs&quot;&gt;Controllers.cs&lt;/a&gt; script for that.&lt;/p&gt;
&lt;p&gt;Oh, but I almost forgot the hack: As I am using the standard Unity Input &lt;span class=&quot;caps&quot;&gt;API&lt;/span&gt; for this, the input manager needs configuring, right? So with no &lt;span class=&quot;caps&quot;&gt;API&lt;/span&gt; for it, how do you go about doing that for a package?&lt;/p&gt;
&lt;p&gt;You use the AssetDatabase &lt;span class=&quot;caps&quot;&gt;API&lt;/span&gt; to load ProjectSettings/InputManager.asset and then the ScriptableObject &lt;span class=&quot;caps&quot;&gt;API&lt;/span&gt; to modify it.
&lt;script src=&#39;https://gist.github.com/6151366.js?file=&#39;&gt;&lt;/script&gt;&lt;div&gt;&lt;noscript&gt;&lt;pre&gt;&lt;code&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/noscript&gt;&lt;/div&gt;&lt;/p&gt;
&lt;p&gt;I hope you find this useful. For more details, these are the Unity Hacks scripts related to this post:&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;&lt;a href=&quot;https://github.com/AngryAnt/UnityHacks/blob/master/Assets/Standard%20Assets/Input/DualControls.cs&quot;&gt;DualControls.cs&lt;/a&gt;&lt;/li&gt;
	&lt;li&gt;&lt;a href=&quot;https://github.com/AngryAnt/UnityHacks/blob/master/Assets/Standard%20Assets/Input/DualControls.Stick.cs&quot;&gt;DualControls.Stick.cs&lt;/a&gt;&lt;/li&gt;
	&lt;li&gt;&lt;a href=&quot;https://github.com/AngryAnt/UnityHacks/blob/master/Assets/Standard%20Assets/Input/Controllers.cs&quot;&gt;Controllers.cs&lt;/a&gt;&lt;/li&gt;
	&lt;li&gt;&lt;a href=&quot;https://github.com/AngryAnt/UnityHacks/blob/master/Assets/Standard%20Assets/Input/ControllerInput.cs&quot;&gt;ControllerInput.cs&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;


</description>
				<published>2013-08-04 00:00:00 +0200</published>
				<link>http://angryant.com/2013/08/04/Unity-Hacks-Dual-sticks/</link>
			</item>
		
			<item>
				<title>Unity Hacks: Cameras</title>
				<description>&lt;p&gt;In my &lt;a href=&quot;http://angryant.com/2013/07/19/Unity-Hacks-Touch-gestures/&quot;&gt;effort to pick apart&lt;/a&gt; the &amp;#8220;Unity Hacks&amp;#8221; project as made available, along with a recording of the presentation, in the &lt;a href=&quot;/videos&quot;&gt;videos&lt;/a&gt; section, I now focus on the camera system.&lt;/p&gt;
&lt;h1&gt;Overview&lt;/h1&gt;
&lt;p&gt;Like the other new components I was preparing for the new standard assets, a key part of this setup is modularity and versatility. This is why I from the start chose to have camera handling values maintained via the transform tree &amp;#8211; as opposed to maintaining internal values to overwrite the transform values when updated.&lt;/p&gt;
&lt;p&gt;This way, not only can camera logic be broken down into several components which can be optional or replaced, but co-operation between the camera system, animations and any other systems which could apply relative transformation, is much easier.&lt;/p&gt;
&lt;p&gt;As this approach would be placing a certain requirement on the transform tree structure surrounding the camera in any case, I opted to go for greatest amount of possible detail vs. smallest impact. The structure therefore requires a three layers deep transform tree.&lt;/p&gt;
&lt;p&gt;The root of the tree is designated the horizontal hinge. It takes care of movement in all three dimensions as well as rotation on the horizontal plane. The immediate child of this transform is referred to as the vertical hinge. This transform is expected to not move and will have its position reset every frame to enforce this. In stead, the vertical hinge is only responsible for rotation on the vertical plane.&lt;/p&gt;
&lt;p&gt;The final transform, the child of the vertical hinge, is expected to not rotate and only move on its relative z-axis. This effectively makes it the zoom component of the rig. The GameObject of this transform is the one holding the camera component.&lt;/p&gt;
&lt;h1&gt;DualHingeCamera&lt;/h1&gt;
&lt;p&gt;Maintaining and abstracting this setup is the &lt;a href=&quot;https://github.com/AngryAnt/UnityHacks/blob/master/Assets/Standard%20Assets/Camera/DualHingeCamera.cs&quot;&gt;DualHingeCamera&lt;/a&gt; component. With reference to the different transforms of the rig, this component maintains the setup by apply three targets: targetOffset, targetHorizontalRotation and targetVerticalRotation. These are set by controller scripts and applied via constrained speed and offset variables.&lt;/p&gt;
&lt;p&gt;Vertical rotation is clamped and damped by the verticalSpan animation curve variable. As explained in the presentation, the time value of the most extreme animation keys specify the vertical angles (relative to a vector pointing backwards from the rig root) at which vertical rotation is clamped.&lt;/p&gt;
&lt;p&gt;The height of the curve at any point specifies the scale of the update speed &amp;#8211; as the camera moves through that angle and further towards the end of the half of the curve it is on. As in: If the angle is above the middle of the vertical span and the camera is moving further up, speed is scaled according to the curve, but if it is moving down then no scale is applied. The inverse if of-course true as well. The effect, assuming the curve is not flat, is a smooth limit rather than a hard clamp.&lt;/p&gt;
&lt;h1&gt;Control&lt;/h1&gt;
&lt;p&gt;The base for any of the example camera behaviours supplied with the project is the &lt;a href=&quot;https://github.com/AngryAnt/UnityHacks/blob/master/Assets/Standard%20Assets/Camera/CameraBehaviour.cs&quot;&gt;CameraBehaviour&lt;/a&gt; component. This supplies wrapping of access to the DualHingeCamera, as well as a bit of default handling &amp;#8211; such as automatically updating the camera activity tracking when the camera moves. It also offers up the MoveCamera method as a common interface for input scripts to apply movement instructions.&lt;/p&gt;
&lt;p&gt;One of the most simple examples of a camera behaviour is the &lt;a href=&quot;https://github.com/AngryAnt/UnityHacks/blob/master/Assets/Standard%20Assets/Camera/OrbitCamera.cs&quot;&gt;OrbitCamera&lt;/a&gt;. This camera simply takes the movement instructions (a Vector2) and apply them to the target horizontal and vertical rotation. The result is the familiar behaviour of being able to rotate around a subject, while rotating up and down within the clamped span.&lt;/p&gt;
&lt;p&gt;There are several more camera behaviours in the project (which you should take a look at) and they are demonstrated in an example scene as well as within the presentation. However as a last example, I want to point out the &lt;a href=&quot;https://github.com/AngryAnt/UnityHacks/blob/master/Assets/Standard%20Assets/Camera/TravelCamera.cs&quot;&gt;TravelCamera&lt;/a&gt; component. Unlike the others, this does not inherit from CameraBehaviour &amp;#8211; nor does it directly affect its rotation or position. In stead, it holds a simple piece of logic which enables and disables other behaviours, based on input activity. The result should be a behaviour somewhere between that seen in Journey and that of the Assassins Creed games.&lt;/p&gt;
&lt;p&gt;I tried to keep this post short, but I hope you still find this useful and decide to build on the system. In any case, here are direct links to the resources covered in the post:&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;&lt;a href=&quot;https://github.com/AngryAnt/UnityHacks/blob/master/Assets/Standard%20Assets/Camera/DualHingeCamera.cs&quot;&gt;DualHingeCamera.cs&lt;/a&gt;&lt;/li&gt;
	&lt;li&gt;&lt;a href=&quot;https://github.com/AngryAnt/UnityHacks/blob/master/Assets/Standard%20Assets/Camera/CameraBehaviour.cs&quot;&gt;CameraBehaviour.cs&lt;/a&gt;&lt;/li&gt;
	&lt;li&gt;&lt;a href=&quot;https://github.com/AngryAnt/UnityHacks/blob/master/Assets/Standard%20Assets/Camera/OrbitCamera.cs&quot;&gt;OrbitCamera.cs&lt;/a&gt;&lt;/li&gt;
	&lt;li&gt;&lt;a href=&quot;https://github.com/AngryAnt/UnityHacks/blob/master/Assets/Standard%20Assets/Camera/TravelCamera.cs&quot;&gt;TravelCamera.cs&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;


</description>
				<published>2013-07-28 00:00:00 +0200</published>
				<link>http://angryant.com/2013/07/28/Unity-Hacks-Cameras/</link>
			</item>
		
			<item>
				<title>Unity Hacks: Touch gestures</title>
				<description>&lt;p&gt;So earlier this month I could finally push the Unity Hacks example code and slide show project &lt;a href=&quot;https://github.com/AngryAnt/UnityHacks/&quot;&gt;live&lt;/a&gt; &amp;#8211; after one of the &lt;a href=&quot;/videos&quot;&gt;videos&lt;/a&gt; of the presentation was pushed live.&lt;/p&gt;
&lt;p&gt;The project is a pretty big treasure trove of handy scripts though and I didn&amp;#8217;t like just tossing it out there and let people pick it apart on their own(feel free to go excavating if you learn better that way though). Therefore I plan for the next couple of posts here to cover various bits and bops from that project.&lt;/p&gt;
&lt;p&gt;Note that a bunch of these scripts &amp;#8211; for instance the one I cover today &amp;#8211; was at the time I was still at Unity Technologies slated for the new Standard Assets shipped with Unity. Since I left, I obviously can&amp;#8217;t say if or when these are shipped and in which form. What&amp;#8217;s in the Unity Hacks project is pretty much the last iteration I did on them before leaving.&lt;/p&gt;
&lt;h1&gt;TouchGestures.cs&lt;/h1&gt;
&lt;p&gt;The purpose of this component is to facilitate easy handling of common gestures on touch enabled devices. With one instance of the component placed in a scene, you can specify which gestures to track, some key measuring caps with sensible defaults and a list of MonoBehaviours interested in receiving notification when a gesture has been detected.&lt;/p&gt;
&lt;p&gt;An example of how to handle gesture tracking event can be found in this particular snippet from the presentation Control.cs script from Unity Hacks:
&lt;script src=&#39;https://gist.github.com/6039082.js?file=&#39;&gt;&lt;/script&gt;&lt;div&gt;&lt;noscript&gt;&lt;pre&gt;&lt;code&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/noscript&gt;&lt;/div&gt;&lt;/p&gt;
&lt;p&gt;This handler responds to single swipes, checking for strictly left or right swipes, handling them by progressing to the next slide/build step or jumping to the previous slide.&lt;/p&gt;
&lt;p&gt;Great, so what do the different configuration values mean? First, let&amp;#8217;s take a look at the tracking clamps:&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;maxDuration: If a tracked touch remains active for longer than this time, it is no longer considered as part of a gesture. This avoids misinterpreting drags or virtual joysticks.&lt;/li&gt;
	&lt;li&gt;min[Pinch/Swipe]ScreenTravel: How much of the normalized screen size should a pinch or a swipe travel before it is considered valid? This avoids misinterpreting taps as mini pinches or swipes.&lt;/li&gt;
	&lt;li&gt;maxTapScreenTravel: What is the maximum normalized screen movement a tap gesture can have before it is no longer considered a tap?&lt;/li&gt;
	&lt;li&gt;maxTapDuration: For how long can a tracked touch be live before it is no longer considered a tap?&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The last elements are somewhat less finicky and tweak happy, though the tracking clamps should have sensible default values:&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;receivers: The list of MonoBehaviours interested in receiving a callback when a gesture has been identified.&lt;/li&gt;
	&lt;li&gt;trackingMask: This is a bitmask identifying which gestures you are interested in tracking. If you only need to deal with swipes, there is no need to spend time tracking any other gestures. Note that in order for this field to be set correctly, it is important that the custom inspector for the TouchGestures component is used.&lt;/li&gt;
	&lt;li&gt;trackMultiple: Should the gesture tracker allow multiple gestures to occur at the same time? Like a pinch and a swipe in different ends of the screen.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;And that is about it! You should have what you need to start using the TouchGestures component. Hopefully you will find it useful.&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;&lt;a href=&quot;https://github.com/AngryAnt/UnityHacks/blob/master/Assets/Standard%20Assets/Input/TouchGestures.cs&quot;&gt;TouchGestures.cs&lt;/a&gt;&lt;/li&gt;
	&lt;li&gt;&lt;a href=&quot;https://github.com/AngryAnt/UnityHacks/blob/master/Assets/Standard%20Assets/Editor/TouchGesturesInspector.cs&quot;&gt;TouchGesturesInspector.cs&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description>
				<published>2013-07-19 00:00:00 +0200</published>
				<link>http://angryant.com/2013/07/19/Unity-Hacks-Touch-gestures/</link>
			</item>
		
			<item>
				<title>OnRenderTextureGUI</title>
				<description>&lt;p&gt;Have you ever wanted to apply a full-screen effect to your &lt;span class=&quot;caps&quot;&gt;GUI&lt;/span&gt; without having to completely restructuring the way you set up your OnGUI structure? Or how about rendering text and &lt;span class=&quot;caps&quot;&gt;GUI&lt;/span&gt; controls onto in-scene virtual screens and objects? Yea me too.&lt;/p&gt;
&lt;p&gt;So a couple of years ago I did a friday project investigating the possibility of a setup like this. What I wanted was a Doom 3 &amp;#8211; style in-game numpad, responding to mouse clicks. Unfortunately I couldn&amp;#8217;t get there 100% and in a nice and straight-forward way, so I abandoned it with no further time spent.&lt;/p&gt;
&lt;p&gt;The specific problem was that while I could get my &lt;span class=&quot;caps&quot;&gt;GUI&lt;/span&gt; to render to the object just fine, the &lt;span class=&quot;caps&quot;&gt;GUI&lt;/span&gt; system had no way of injecting events or modifying existing ones. This meant that if I wanted &lt;span class=&quot;caps&quot;&gt;GUI&lt;/span&gt; to respond to events, I would have to bypass the &lt;span class=&quot;caps&quot;&gt;GUI&lt;/span&gt; event system and effectively rewrite the basic &lt;span class=&quot;caps&quot;&gt;GUI&lt;/span&gt; controls. That failed my &amp;#8220;nice and straight-forward&amp;#8221; requirement.&lt;/p&gt;
&lt;p&gt;However a while later, I came across a similar need: I had a project where the screen was warped slightly fish-eye, to give an impression of an old-school &lt;span class=&quot;caps&quot;&gt;CRT&lt;/span&gt; display. It looked great, except the &lt;span class=&quot;caps&quot;&gt;GUI&lt;/span&gt; was just rendered on top of everything &amp;#8211; as per usual &amp;#8211; with no warping. Since the &lt;span class=&quot;caps&quot;&gt;GUI&lt;/span&gt; was non-interactive, there was no down-side to using the approach I had come up with before to include the &lt;span class=&quot;caps&quot;&gt;GUI&lt;/span&gt; in the full-screen effect rendering.&lt;/p&gt;
&lt;p&gt;It was a snap to apply, I had no required changes to my general OnGUI structure and the result looked great. This setup also came in handy when I was working with the Oculus Rift &amp;#8211; rendering the &lt;span class=&quot;caps&quot;&gt;GUI&lt;/span&gt; on a plane, rendered always on top, in front of the Oculus cameras.&lt;/p&gt;
&lt;p&gt;So what is the idea then? Well it is quite straight forward: OnGUI is invoked multiple times each frame (once per event) &amp;#8211; at least twice &amp;#8211; unless layouting has been disabled on the MonoBehaviour. The last event of the frame is the repaint event. In this, all resolved controls render to the active context. Which fortunately can be set by render textures.&lt;/p&gt;
&lt;p&gt;The trick therefore becomes:
&lt;script src=&#39;https://gist.github.com/5984299.js?file=&#39;&gt;&lt;/script&gt;&lt;div&gt;&lt;noscript&gt;&lt;pre&gt;&lt;code&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/noscript&gt;&lt;/div&gt;&lt;/p&gt;
&lt;p&gt;Remember that this is not immediately useful if you need interactive &lt;span class=&quot;caps&quot;&gt;GUI&lt;/span&gt; as this would require work to handle input gathered from the regular UnityEngine.Input &lt;span class=&quot;caps&quot;&gt;API&lt;/span&gt;. Nonetheless it will give you for instance a scrolling screen of text on an in-game monitor.&lt;/p&gt;
&lt;p&gt;I hope you find it useful!&lt;/p&gt;</description>
				<published>2013-07-17 00:00:00 +0200</published>
				<link>http://angryant.com/2013/07/17/OnRenderTextureGUI/</link>
			</item>
		
			<item>
				<title>Unite 13 video "Unity Hacks" available</title>
				<description>&lt;p&gt;The &amp;#8220;Unity Hacks&amp;#8221; presentation, containing a good chunk of practical tips &amp;amp; tricks and example code, I did for Unite 13 Korea, Japan, China and Nordic is now available as video and presentation/examples download. The specific video recording is the one from Unite Japan.&lt;/p&gt;
&lt;p&gt;Find link to video, presentation and examples in the &lt;a href=&quot;/videos&quot;&gt;videos&lt;/a&gt; section.&lt;/p&gt;</description>
				<published>2013-07-05 00:00:00 +0200</published>
				<link>http://angryant.com/2013/07/05/Unite-13-video-Unity-Hacks-available/</link>
			</item>
		
			<item>
				<title>The implicit local network interface</title>
				<description>&lt;p&gt;I foolishly promised I would resume my posting of tech stuff on this blog, so I suppose I better own up to that.&lt;/p&gt;
&lt;h1&gt;Story time&lt;/h1&gt;
&lt;p&gt;You are playing some amazingly addictive game on your iOS device when commuting home. Let&amp;#8217;s say it&amp;#8217;s a Mario clone.&lt;/p&gt;
&lt;p&gt;As you arrive home, you want more of this gaming goodness. So you switch on your television and use AirPlay to continue the game on your TV, controls on your iOS device, via your Apple TV or other AirServer hosting, TV connected, device.&lt;/p&gt;
&lt;p&gt;Now your good friend Bob comes by (you forgot to lock the door, so he walks straight in). Obviously this game is too good to put down, so in stead you instruct Bob to buy a copy of it. Bob pulls out his android phone, jumps on your wifi, downloads the game and starts playing.&lt;/p&gt;
&lt;p&gt;At one point in Bobs game he sees this funky spinning portal in the level and opts to tap it. And poof! Bobs character is sucked into your game on the TV.&lt;/p&gt;
&lt;p&gt;Unfortunately Bob is a terrible player of this game and ruins your score, but it was pretty cool to try this game in multiplayer mode.&lt;/p&gt;
&lt;h1&gt;Do want!&lt;/h1&gt;
&lt;p&gt;The above scenario may sound complex to set up, but like so many other cases, it is just a nice combination of simpler bits. So let&amp;#8217;s look into how we enable something like this in our (Unity based) game.&lt;/p&gt;
&lt;p&gt;First up, AirPlay support was recently added to Unity and I posted &lt;a href=&quot;https://gist.github.com/AngryAnt/5160204&quot;&gt;a gist&lt;/a&gt; to help people get started with it.&lt;/p&gt;
&lt;p&gt;Secondly, we need to host a network game pretty much all the time, so that others may join any ongoing session at any time. Of-course you might want to provide an opt-in/out setting for networked play in your game. Just remember that we are only enabling this feature for local network play &amp;#8211; not internet play like Journey did it.&lt;/p&gt;
&lt;p&gt;For information on how to easily set up this network game, see the talk I did at Unite 12 in Amsterdam: &amp;#8220;Unity, Network Code, and You&amp;#8221; &amp;#8211; the example provided for the built-in networking is quite relevant to the above example. You can find the talk linked from the &lt;a href=&quot;/videos/&quot;&gt;video&lt;/a&gt; section of this site.&lt;/p&gt;
&lt;p&gt;So with those parts in place, we just need a bit of glue &amp;#8211; namely the broadcasting of games on your local network. This gist deals with just that:
&lt;script src=&#39;https://gist.github.com/5730611.js?file=Broadcaster.cs&#39;&gt;&lt;/script&gt;&lt;div&gt;&lt;noscript&gt;&lt;pre&gt;&lt;code&gt;if (m_BroadcastTimer == null)
// Setup broadcast of hosting service
{
	m_BroadcastSocket = new Socket (AddressFamily.InterNetwork, SocketType.Dgram, ProtocolType.Udp);&lt;/p&gt;
&lt;p&gt;try
	{
		IPAddress broadcastGroup = IPAddress.Parse (kBroadcastGroup);&lt;/p&gt;
&lt;p&gt;m_BroadcastSocket.SetSocketOption (
			SocketOptionLevel.IP,
			SocketOptionName.AddMembership,
			new MulticastOption (broadcastGroup)
		);&lt;/p&gt;
&lt;p&gt;m_BroadcastSocket.SetSocketOption (
			SocketOptionLevel.IP,
			SocketOptionName.MulticastTimeToLive,
			1
		);&lt;/p&gt;
&lt;p&gt;m_BroadcastSocket.Connect (new IPEndPoint (broadcastGroup, kBroadcastPort));
	}
	catch (Exception e)
	{
		Debug.LogError (string.Format (
			&amp;quot;Exception when attempting to set up service broadcast ({0}:{1}): {2}&amp;quot;,
			kBroadcastGroup,
			kBroadcastPort,
			e
		));&lt;/p&gt;
&lt;p&gt;return false;
	}&lt;/p&gt;
&lt;p&gt;m_BroadcastTimer = new Timer (kBroadcastDelay);&lt;/p&gt;
&lt;p&gt;m_BroadcastTimer.Elapsed += new ElapsedEventHandler (
		(object s, ElapsedEventArgs e) =&amp;gt;
		{
			m_BroadcastSocket.Send (GetBroadcastBytes ());
		}
	);
	m_BroadcastTimer.Enabled = true;
}&lt;/p&gt;
&lt;p&gt;return true;&lt;/p&gt;
&lt;p&gt;// &amp;#8230;&lt;/p&gt;
&lt;p&gt;byte[] GetBroadcastBytes ()
{
	/*
		Return byte array containing IP and port of our host socket plus meta data
		such as current level and perhaps location (for portal placement)
	*/
}&lt;/code&gt;&lt;/pre&gt;&lt;/noscript&gt;&lt;/div&gt;&lt;/p&gt;
&lt;p&gt;Let&amp;#8217;s go over the interface for this gist:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;kBroadcastGroup&lt;/strong&gt; and &lt;strong&gt;kBroadcastPort&lt;/strong&gt; are effectively shared keys we use to facilitate broadcasting communication between game instances. Broadcasting happens by way of multi-casting &amp;#8211; an IP protocol feature allowing peers to send one package to multiple unidentified receivers. This is why our shared keys are in the form of an IP address and a port, though their value is completely arbitrary &amp;#8211; all that matters is that both broadcaster and receiver use the same keys.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;m_BroadcastTimer&lt;/strong&gt; and &lt;strong&gt;kBroadcastDelay&lt;/strong&gt; control how often &lt;strong&gt;m_BroadcastSocket&lt;/strong&gt; will send out the broadcast message generated by &lt;strong&gt;GetBroadcastBytes&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;This covers the transmission part of the broadcast functionality. The following gist deals with receiving the broadcast message:&lt;/p&gt;
&lt;script src=&#39;https://gist.github.com/5730611.js?file=Seeker.cs&#39;&gt;&lt;/script&gt;&lt;div&gt;&lt;noscript&gt;&lt;pre&gt;&lt;code&gt;if (m_SeekerSocket == null)
{
	m_SeekerSocket = new Socket (AddressFamily.InterNetwork, SocketType.Dgram, ProtocolType.Udp);

	try
	{
		m_SeekerSocket.Bind (new IPEndPoint (IPAddress.Any, kBroadcastPort));

		IPAddress broadcastGroup = IPAddress.Parse (kBroadcastGroup);

		m_SeekerSocket.SetSocketOption (
			SocketOptionLevel.IP,
			SocketOptionName.AddMembership,
			new MulticastOption (broadcastGroup, IPAddress.Any)
		);

		ReadBroadcasts ();
	}
	catch (Exception e)
	{
		Debug.LogError (string.Format (
			&amp;amp;quot;Exception when attempting to set up service listener ({0}:{1}): {2}&amp;amp;quot;,
			kBroadcastGroup,
			kBroadcastPort,
			e
		));

		m_SeekerSocket.Dispose ();
	}
}

// ...

void ReadBroadcasts ()
{
	/*
		Now set up periodic or event-driven reading from m_SeekerSocket, parsing
		broadcast packages containing IP, port and meta data of locally available games
	*/
}&lt;/code&gt;&lt;/pre&gt;&lt;/noscript&gt;&lt;/div&gt;
&lt;p&gt;Like with the broadcaster, &lt;strong&gt;kBroadcastGroup&lt;/strong&gt; and &lt;strong&gt;kBroadcastPort&lt;/strong&gt; are used with the same values to make sure we are listening on the same multi-cast setup as the broadcaster.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;m_SeekerSocket&lt;/strong&gt; is the socket on which broadcasts will be received &amp;#8211; just like you would on any other reception socket.&lt;/p&gt;
&lt;p&gt;And that is all there is to it. I hope you found it useful.&lt;/p&gt;</description>
				<published>2013-06-07 00:00:00 +0200</published>
				<link>http://angryant.com/2013/06/07/The-implicit-local-network-interface/</link>
			</item>
		
			<item>
				<title>Talks and progress</title>
				<description>&lt;p&gt;Recently I have been posting less hacks, tips and tricks than I wanted to and I fully intend to rectify this. However, first let me provide a brief overview of what I have in stead been squandering my time on.&lt;/p&gt;
&lt;p&gt;2013 started off with lots of still-internal Unity work which I hope will be publicly available very soon. Shortly after that I was off to a very busy &lt;span class=&quot;caps&quot;&gt;GDC&lt;/span&gt; with a very fancy booth sandwiched between Sony and Nintendo (very fitting given our announcements of partnering with both to support their new platforms).&lt;/p&gt;
&lt;p&gt;Beforehand, I had been playing around with the Oculus Rift devkits we had received in the Unity Copenhagen office and at &lt;span class=&quot;caps&quot;&gt;GDC&lt;/span&gt; a guy from Road To VR caught me for an interview about this. If you are interested in Unity and Oculus Rift, you can find the interview linked from the &lt;a href=&quot;/videos/&quot;&gt;video section&lt;/a&gt; of this site.&lt;/p&gt;
&lt;p&gt;Following &lt;span class=&quot;caps&quot;&gt;GDC&lt;/span&gt; I had a week at home to reset my time-zone orientation again, before heading to this years Unite Asia tour (re-branded from last years Unity Asia Bootcamp). So that week obviously went completely into talk prep.&lt;/p&gt;
&lt;p&gt;Unfortunately the talk recordings are not yet available, but as soon as they are, I will make sure to link them from the &lt;a href=&quot;/videos/&quot;&gt;video section&lt;/a&gt;, where you can also find recordings and example source from last years Unity Asia Bootcamp.&lt;/p&gt;
&lt;p&gt;After the two weeks blast through Asia, I had taken three weeks of vacation to reset an at this point quite messed up time-zone orientation. While I did spend some time relaxing, however I of-course had a hard time not using such a great opportunity to make some headway on Behave 2.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/resources/share/behave2peek.png&quot; title=&quot;Sneak peek at Behave 2&quot; alt=&quot;Sneak peek at Behave 2&quot; /&gt;&lt;/p&gt;
&lt;p&gt;Remaining tasks are mainly polish items and one fix for iOS &lt;span class=&quot;caps&quot;&gt;AOT&lt;/span&gt; compilation &amp;#8211; specifically I have moved serialization to use ProtoBuf-net for better performance and flexibility, however this library requires slightly different implementation for &lt;span class=&quot;caps&quot;&gt;AOT&lt;/span&gt; compatibility than regular &lt;span class=&quot;caps&quot;&gt;JIT&lt;/span&gt; platforms.&lt;/p&gt;
&lt;p&gt;I hope to get this wrapped up and shipped very soon, however right now I am sitting on the train to Malmö &amp;#8211; headed to the Unite Nordic conference. Tomorrow at the conference (May 22nd) I am scheduled to give two talks &amp;#8211; &amp;#8220;Unity Hacks&amp;#8221; at 10:00 and &amp;#8220;Cross-platform Considerations&amp;#8221; at 14:30.&lt;/p&gt;
&lt;p&gt;&amp;#8220;Unity Hacks&amp;#8221; is a repeat from Unite Asia, so if you don&amp;#8217;t want to wait for the videos on that one, tomorrow is your chance for some great Unity hackery. For the complete conference schedule, see the &lt;a href=&quot;http://unity3d.com/unite/nordic/&quot;&gt;Unite Nordic website&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Finally, after much consideration I decided to end my time at Unity Technologies. It has been great fun, but now seems the right time to get out and stretch my legs a bit. I do so by starting contracting again and if you&amp;#8217;re interested in working together, please use &lt;a href=&quot;/contracting&quot;&gt;the form&lt;/a&gt; I have provided for that purpose.&lt;/p&gt;
&lt;p&gt;Or if you are at Unite Nordic or Nordic Game which follows right after, feel free to give me a poke there.&lt;/p&gt;
&lt;p&gt;Until next time!&lt;/p&gt;</description>
				<published>2013-05-21 00:00:00 +0200</published>
				<link>http://angryant.com/2013/05/21/Talks-and-progress/</link>
			</item>
		
			<item>
				<title>Five years of Unity expertise looking for contracts</title>
				<description>&lt;p&gt;On the 28th of June, after four great years at Unity Technologies, I part ways with my friends to go explore for a while &amp;#8211; doing consulting / contract work.&lt;/p&gt;
&lt;p&gt;I have had a great time and seen absolutely crazy growth and things while at Unity. I definitely am leaving with a nice big bag of great memories. However I feel the need to stretch my legs a bit, so off I go.&lt;/p&gt;
&lt;p&gt;So I am available for contracts from July 1st, offering up among other things, my five years of Unity expertise. For more details on the things that I do there is this site and my &lt;a href=&quot;http://eej.dk&quot;&gt;LinkedIn profile&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;And, well, that&amp;#8217;s pretty much it. Want to play? Please use the handy contact form I set up: &lt;a href=&quot;/contracting&quot;&gt;Handy contact form&lt;/a&gt;.&lt;/p&gt;</description>
				<published>2013-05-14 00:00:00 +0200</published>
				<link>http://angryant.com/2013/05/14/Five-years-of-Unity-expertise-looking-for-contracts/</link>
			</item>
		
			<item>
				<title>Automagic Unity Android Java gadget OF DOOM!</title>
				<description>&lt;p&gt;Ok maybe not that dramatic, but pretty handy if you&amp;#8217;re working with Unity Android and doing some Java plugin work.&lt;/p&gt;
&lt;p&gt;I hadn&amp;#8217;t really touched Unity Android specific code since setting up automatic testing of it, so a few months back I wanted to remedy that by diving in head-first with an obvious not-hello-world sort of project.&lt;/p&gt;
&lt;p&gt;For christmas of 2011, my awesome parents had bought me a &lt;span class=&quot;caps&quot;&gt;IOIO&lt;/span&gt; board&lt;sup class=&quot;footnote&quot; id=&quot;fnr1&quot;&gt;&lt;a href=&quot;#fn1&quot;&gt;1&lt;/a&gt;&lt;/sup&gt;. I wanted to push some more boundaries of mine and do some hacking which couldn&amp;#8217;t all be contained in an email attachment and the &lt;span class=&quot;caps&quot;&gt;IOIO&lt;/span&gt; seemed a great start for that.&lt;/p&gt;
&lt;p&gt;In short, the &lt;span class=&quot;caps&quot;&gt;IOIO&lt;/span&gt; board is a small, inexpensive IO board with a &lt;span class=&quot;caps&quot;&gt;USB&lt;/span&gt; interface and Android drivers &amp;#8211; allowing you to connect your Android phone to it and control its 48 IO ports from software running on that phone.&lt;/p&gt;
&lt;p&gt;Obviously I had to write that software as a Unity project and I hope I&amp;#8217;ll get some more time to polish up the last bits of the soft- and hardware for it soonish and tell you some more about it.&lt;/p&gt;
&lt;p&gt;Anywho, that&amp;#8217;s enough background. Long story short, I obviously started out (after consulting the Unity documentation on how to work with the Java interface with Unity Android which I would need to access the &lt;span class=&quot;caps&quot;&gt;IOIO&lt;/span&gt; driver) by doing some editor scripting to reduce my iteration time on the Java I needed. Wisely I predicted that my Java would be so terribly rusty that I would need a significant number of iterations.&lt;/p&gt;
&lt;p&gt;Basically what I wanted was to get rid of the multiple steps needed for compiling, signing and assembling a Java plugin. Initially I just hacked together a perl script to reduce those steps to one line of shell execution, but that still meant more context switching than I wanted.&lt;/p&gt;
&lt;p&gt;So I leveled up the hack by having a Unity asset post processor automatically execute the perl script whenever a Java file got imported in the plugins directory &amp;#8211; re-routing any output from it to the Unity console.&lt;/p&gt;
&lt;p&gt;That was really awesome. I would make a change in my Java, save it, switch to Unity and see all my horrible compiler errors right there in the console. And as this was my only Android project, I was quite happy with my hack &amp;#8211; proceeding to kill my compiler errors and build my &lt;span class=&quot;caps&quot;&gt;IOIO&lt;/span&gt; project.&lt;/p&gt;
&lt;p&gt;Some friends had been poking me about cleaning up and generalising the hack a bit more and luck would have it that in my christmas vacation I spent a lot of time being sick. So I used some time here and there to clean up the Unity Android plugin builder and yesterday I pushed it to github &amp;#8211; without any project specific bits, without perl and somewhat more user friendly.&lt;/p&gt;
&lt;p&gt;Check it out and let me know what you think. If anything is broken or you&amp;#8217;d like to request a change or addition, please use the github issues feature:&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;&lt;a href=&quot;https://github.com/AngryAnt/JavaPluginBuilder&quot;&gt;The JavaPluginBuilder repository on github&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p class=&quot;footnote&quot; id=&quot;fn1&quot;&gt;&lt;a href=&quot;#fnr1&quot;&gt;&lt;sup&gt;1&lt;/sup&gt;&lt;/a&gt; &lt;a href=&quot;https://www.sparkfun.com/products/10748&quot;&gt;The &lt;span class=&quot;caps&quot;&gt;IOIO&lt;/span&gt; board&lt;/a&gt;&lt;/p&gt;</description>
				<published>2012-12-22 00:00:00 +0100</published>
				<link>http://angryant.com/2012/12/22/Automagic-Unity-Android-Java-gadget-OF-DOOM/</link>
			</item>
		
	</channel>
</rss>